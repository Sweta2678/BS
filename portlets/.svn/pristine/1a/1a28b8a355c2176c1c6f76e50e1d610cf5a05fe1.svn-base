/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.grs.common.model.impl;

import com.ihg.grs.common.model.Glossary;
import com.ihg.grs.common.model.GlossaryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Glossary service. Represents a row in the &quot;GRS_COMM.GLOSSARY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.grs.common.model.GlossaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlossaryImpl}.
 * </p>
 *
 * @author gulam.vora
 * @see GlossaryImpl
 * @see com.ihg.grs.common.model.Glossary
 * @see com.ihg.grs.common.model.GlossaryModel
 * @generated
 */
public class GlossaryModelImpl extends BaseModelImpl<Glossary>
	implements GlossaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a glossary model instance should use the {@link com.ihg.grs.common.model.Glossary} interface instead.
	 */
	public static final String TABLE_NAME = "GRS_COMM.GLOSSARY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GLOSSARY_ID", Types.INTEGER },
			{ "GLOSSARY_TERM_TXT", Types.VARCHAR },
			{ "GLOSSARY_DESC", Types.VARCHAR },
			{ "ACTV_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GRS_COMM.GLOSSARY (GLOSSARY_ID INTEGER not null primary key,GLOSSARY_TERM_TXT VARCHAR(75) null,GLOSSARY_DESC VARCHAR(75) null,ACTV_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GRS_COMM.GLOSSARY";
	public static final String ORDER_BY_JPQL = " ORDER BY glossary.glossaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GRS_COMM.GLOSSARY.GLOSSARY_ID ASC";
	public static final String DATA_SOURCE = "grsDataSource";
	public static final String SESSION_FACTORY = "grsSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.grs.common.model.Glossary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.grs.common.model.Glossary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.grs.common.model.Glossary"));

	public GlossaryModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setGlossaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Glossary.class;
	}

	@Override
	public String getModelClassName() {
		return Glossary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("glossaryId", getGlossaryId());
		attributes.put("term", getTerm());
		attributes.put("description", getDescription());
		attributes.put("activeIndicator", getActiveIndicator());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createdate", getCreatedate());
		attributes.put("lastUpdateUserId", getLastUpdateUserId());
		attributes.put("updatedate", getUpdatedate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer glossaryId = (Integer)attributes.get("glossaryId");

		if (glossaryId != null) {
			setGlossaryId(glossaryId);
		}

		String term = (String)attributes.get("term");

		if (term != null) {
			setTerm(term);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String activeIndicator = (String)attributes.get("activeIndicator");

		if (activeIndicator != null) {
			setActiveIndicator(activeIndicator);
		}

		String createUserId = (String)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Date createdate = (Date)attributes.get("createdate");

		if (createdate != null) {
			setCreatedate(createdate);
		}

		String lastUpdateUserId = (String)attributes.get("lastUpdateUserId");

		if (lastUpdateUserId != null) {
			setLastUpdateUserId(lastUpdateUserId);
		}

		Date updatedate = (Date)attributes.get("updatedate");

		if (updatedate != null) {
			setUpdatedate(updatedate);
		}
	}

	@Override
	public int getGlossaryId() {
		return _glossaryId;
	}

	@Override
	public void setGlossaryId(int glossaryId) {
		_glossaryId = glossaryId;
	}

	@Override
	public String getTerm() {
		if (_term == null) {
			return StringPool.BLANK;
		}
		else {
			return _term;
		}
	}

	@Override
	public void setTerm(String term) {
		_term = term;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getActiveIndicator() {
		if (_activeIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeIndicator;
		}
	}

	@Override
	public void setActiveIndicator(String activeIndicator) {
		_activeIndicator = activeIndicator;
	}

	@Override
	public String getCreateUserId() {
		if (_createUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserId;
		}
	}

	@Override
	public void setCreateUserId(String createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public Date getCreatedate() {
		return _createdate;
	}

	@Override
	public void setCreatedate(Date createdate) {
		_createdate = createdate;
	}

	@Override
	public String getLastUpdateUserId() {
		if (_lastUpdateUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserId;
		}
	}

	@Override
	public void setLastUpdateUserId(String lastUpdateUserId) {
		_lastUpdateUserId = lastUpdateUserId;
	}

	@Override
	public Date getUpdatedate() {
		return _updatedate;
	}

	@Override
	public void setUpdatedate(Date updatedate) {
		_updatedate = updatedate;
	}

	@Override
	public Glossary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Glossary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GlossaryImpl glossaryImpl = new GlossaryImpl();

		glossaryImpl.setGlossaryId(getGlossaryId());
		glossaryImpl.setTerm(getTerm());
		glossaryImpl.setDescription(getDescription());
		glossaryImpl.setActiveIndicator(getActiveIndicator());
		glossaryImpl.setCreateUserId(getCreateUserId());
		glossaryImpl.setCreatedate(getCreatedate());
		glossaryImpl.setLastUpdateUserId(getLastUpdateUserId());
		glossaryImpl.setUpdatedate(getUpdatedate());

		glossaryImpl.resetOriginalValues();

		return glossaryImpl;
	}

	@Override
	public int compareTo(Glossary glossary) {
		int primaryKey = glossary.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Glossary)) {
			return false;
		}

		Glossary glossary = (Glossary)obj;

		int primaryKey = glossary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Glossary> toCacheModel() {
		GlossaryCacheModel glossaryCacheModel = new GlossaryCacheModel();

		glossaryCacheModel.glossaryId = getGlossaryId();

		glossaryCacheModel.term = getTerm();

		String term = glossaryCacheModel.term;

		if ((term != null) && (term.length() == 0)) {
			glossaryCacheModel.term = null;
		}

		glossaryCacheModel.description = getDescription();

		String description = glossaryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			glossaryCacheModel.description = null;
		}

		glossaryCacheModel.activeIndicator = getActiveIndicator();

		String activeIndicator = glossaryCacheModel.activeIndicator;

		if ((activeIndicator != null) && (activeIndicator.length() == 0)) {
			glossaryCacheModel.activeIndicator = null;
		}

		glossaryCacheModel.createUserId = getCreateUserId();

		String createUserId = glossaryCacheModel.createUserId;

		if ((createUserId != null) && (createUserId.length() == 0)) {
			glossaryCacheModel.createUserId = null;
		}

		Date createdate = getCreatedate();

		if (createdate != null) {
			glossaryCacheModel.createdate = createdate.getTime();
		}
		else {
			glossaryCacheModel.createdate = Long.MIN_VALUE;
		}

		glossaryCacheModel.lastUpdateUserId = getLastUpdateUserId();

		String lastUpdateUserId = glossaryCacheModel.lastUpdateUserId;

		if ((lastUpdateUserId != null) && (lastUpdateUserId.length() == 0)) {
			glossaryCacheModel.lastUpdateUserId = null;
		}

		Date updatedate = getUpdatedate();

		if (updatedate != null) {
			glossaryCacheModel.updatedate = updatedate.getTime();
		}
		else {
			glossaryCacheModel.updatedate = Long.MIN_VALUE;
		}

		return glossaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{glossaryId=");
		sb.append(getGlossaryId());
		sb.append(", term=");
		sb.append(getTerm());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", activeIndicator=");
		sb.append(getActiveIndicator());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createdate=");
		sb.append(getCreatedate());
		sb.append(", lastUpdateUserId=");
		sb.append(getLastUpdateUserId());
		sb.append(", updatedate=");
		sb.append(getUpdatedate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.grs.common.model.Glossary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>glossaryId</column-name><column-value><![CDATA[");
		sb.append(getGlossaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>term</column-name><column-value><![CDATA[");
		sb.append(getTerm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeIndicator</column-name><column-value><![CDATA[");
		sb.append(getActiveIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdate</column-name><column-value><![CDATA[");
		sb.append(getCreatedate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserId</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Glossary.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Glossary.class
		};
	private int _glossaryId;
	private String _term;
	private String _description;
	private String _activeIndicator;
	private String _createUserId;
	private Date _createdate;
	private String _lastUpdateUserId;
	private Date _updatedate;
	private Glossary _escapedModel;
}