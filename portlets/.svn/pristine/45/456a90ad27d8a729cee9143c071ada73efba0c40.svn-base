package com.ihg.brandstandards.portlet;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.http.HttpServletRequest;

import com.ihg.brandstandards.db.service.JobQueueLocalServiceUtil;
import com.ihg.brandstandards.db.service.PublicationLocalServiceUtil;
import com.ihg.brandstandards.util.BSCommonUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.User;
import com.liferay.portal.service.UserLocalServiceUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.util.bridges.mvc.MVCPortlet;

/**
 * Portlet implementation class DeleteArchiveManualPortlet
 */
public class ArchivePublishPortlet extends MVCPortlet {

	private static final Log LOG = LogFactoryUtil.getLog(ArchivePublishPortlet.class);

	private static final String JOB_TYPE_PUBLICATION_PURGE = "PUBLISH_PURGE";
	@Override
	public void doView(RenderRequest renderRequest,
			RenderResponse renderResponse) throws IOException, PortletException {
	
		LOG.info("Archive Publish portlet DO view...");
		
		super.doView(renderRequest, renderResponse);
	}

	@Override
	public void serveResource(ResourceRequest resourceRequest,
			ResourceResponse resourceResponse) throws IOException,
			PortletException {
		String resourceId = resourceRequest.getResourceID();
		DateFormat formatter = new SimpleDateFormat("dd-MMM-yy");
		JSONArray jsonArray = JSONFactoryUtil.createJSONArray();
		
		if(Validator.isNotNull(resourceId) && resourceId.equals("getPublicationDateByBrand")){
			HttpServletRequest httpReq = PortalUtil.getOriginalServletRequest(PortalUtil.getHttpServletRequest(resourceRequest));
			//String brandCode = httpReq.getParameter("selectedBrandCode");
			String env = httpReq.getParameter("environment");
			List<String> publicationDates= (List<String>)PublicationLocalServiceUtil.getPublicationDateByEnv(env);
			
			JSONObject jsonDateObject = JSONFactoryUtil.createJSONObject();
			/*for(Publication pub:publications){				
				jsonDateObject.put(String.valueOf(pub.getPublishId()), formatter.format(pub.getPublishDate()));				
			}*/
			for(Object pubDate: publicationDates){				
				jsonDateObject.put(formatter.format(pubDate),formatter.format(pubDate));			
			}
			jsonArray.put(jsonDateObject);
			resourceRequest.setAttribute("publicationDates", publicationDates);
			resourceResponse.getWriter().write(jsonArray.toString());
		}
		if(Validator.isNotNull(resourceId) && resourceId.equals("deletePublications")){
			HttpServletRequest httpReq = PortalUtil.getOriginalServletRequest(PortalUtil.getHttpServletRequest(resourceRequest));
			String pubdate = httpReq.getParameter("pubDate");
			String pubEnv = httpReq.getParameter("environment");
			
			 final long userId = PortalUtil.getUserId(resourceRequest);
		  
		       
			LOG.info("Archive Publication record method start "+pubdate +"---"+pubEnv);
			String message = insertIntoJobQeue(pubEnv, pubdate, userId);
			//executePurgeJob(pubEnv, pubdate,userId);
			LOG.info("Archive Publication record method end "+pubdate +"---"+pubEnv);
			
			resourceResponse.getWriter().write(message);
		}
		
	}
	
	public String insertIntoJobQeue(String enviornment,String publishdate,long userId){
		Map<String, String> metadataParams = new LinkedHashMap<String, String>();
        Map<String, String> compareMetadataParams = new LinkedHashMap<String, String>();
        String returnMsg=StringPool.BLANK;
        try {
			final User user = UserLocalServiceUtil.getUserById(userId);
			 addMetadataFields(enviornment, publishdate,userId, user.getScreenName(), user.getEmailAddress(),metadataParams);
		     addCompareMetadataFields(enviornment, publishdate,userId, user.getScreenName(), user.getEmailAddress(),compareMetadataParams);
		     String metaData = BSCommonUtil.buildJobQueueMetadataXML(JOB_TYPE_PUBLICATION_PURGE, metadataParams, null, null);
		        String compareMetaData = BSCommonUtil.buildJobQueueMetadataXML(JOB_TYPE_PUBLICATION_PURGE, compareMetadataParams, null, null);
		        if (JobQueueLocalServiceUtil.isJobQueueExistWithSameMetadata(compareMetaData, StringPool.PERCENT, JOB_TYPE_PUBLICATION_PURGE, "NEW,IN_PROGRESS"))
		        {
		        	returnMsg = "Archive_already_Inprogress";
		        } 
		        else
		        {	
					try 
					{
		    			JobQueueLocalServiceUtil.insertJobQueueUsingOraSequence(user.getScreenName(),JOB_TYPE_PUBLICATION_PURGE, metaData, 
		    					null, user.getEmailAddress(), user.getScreenName());
		    			returnMsg= "Archive publication process started in backend you will be notify by mail once its completed. ";
					} 
					catch(Exception e)
					{
						returnMsg = "Failure";
						LOG.error("Failed to insert JOB Queue Entry"+e.getMessage());
					}
		        }
			LOG.info("Mailing function Here to ....."+user.getEmailAddress());
		} catch (PortalException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SystemException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
      
		return returnMsg;
	}
	/*
	
	public void executePurgeJob(final String pubEnv,final String pubdate,final long userId){
		new Thread()
		{
			public void run() {
				try {
					LOG.info("Purge Job Started.....");
					if(pubEnv.equalsIgnoreCase("BRIDGE")){
						BridgePublishLocalServiceUtil.archiveBridgePublishedRecords(pubdate);
					}else if(pubEnv.equalsIgnoreCase("PRODUCTION")){
						BridgePublishLocalServiceUtil.archiveOBSMPublishedRecords(pubdate);
					}else if(pubEnv.equalsIgnoreCase("GEM")){
						BridgePublishLocalServiceUtil.archiveGEMPublishedRecords(pubdate);
					}else if(pubEnv.equalsIgnoreCase("all")){
						BridgePublishLocalServiceUtil.archiveOBSMPublishedRecords(pubdate);
						BridgePublishLocalServiceUtil.archiveGEMPublishedRecords(pubdate);
						BridgePublishLocalServiceUtil.archiveBridgePublishedRecords(pubdate);
					}
					if(Validator.isNotNull(userId)){
					   try {
							final User user = UserLocalServiceUtil.getUserById(userId);
							LOG.info("Mailing function Here to ....."+user.getEmailAddress());
						} catch (PortalException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (SystemException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					LOG.info("Purge Job Completed.....");
				} catch (SystemException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			}
			}.start();
		}*/
	
	  public void addMetadataFields(String env, String pubDate, long userId, String userScreenName, String userEmailAdd,Map<String, String> metadataParams) {
			metadataParams.put("ENVIRONMENT",env);
			metadataParams.put("PUBLISH_DATE", pubDate);
			metadataParams.put("USER_ID", String.valueOf(userId));			
			metadataParams.put("SCREEN_NAME", userScreenName);
			metadataParams.put("USER_EMAIL", userEmailAdd);			
	    }
	  public void addCompareMetadataFields(String env, String pubDate, long userId, String userScreenName, String userEmailAdd, Map<String, String> compareMetadataParams) {
			compareMetadataParams.put("ENVIRONMENT",env);
			compareMetadataParams.put("PUBLISH_DATE", pubDate);
			compareMetadataParams.put("USER_ID", StringPool.PERCENT);			
			compareMetadataParams.put("SCREEN_NAME", StringPool.PERCENT);
			compareMetadataParams.put("USER_EMAIL", StringPool.PERCENT);			
	    }
	  
	    
}
