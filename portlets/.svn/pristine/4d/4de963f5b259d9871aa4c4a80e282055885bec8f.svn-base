/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy;
import com.ihg.brandstandards.db.model.BridgeProgressDiscrepancyModel;
import com.ihg.brandstandards.db.service.persistence.BridgeProgressDiscrepancyPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgeProgressDiscrepancy service. Represents a row in the &quot;BRIDGE_PUB_PROG_DISCREPANCY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgeProgressDiscrepancyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgeProgressDiscrepancyImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgeProgressDiscrepancyImpl
 * @see com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy
 * @see com.ihg.brandstandards.db.model.BridgeProgressDiscrepancyModel
 * @generated
 */
public class BridgeProgressDiscrepancyModelImpl extends BaseModelImpl<BridgeProgressDiscrepancy>
	implements BridgeProgressDiscrepancyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge progress discrepancy model instance should use the {@link com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUB_PROG_DISCREPANCY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUB_PROGRESS_CATGY_ID", Types.BIGINT },
			{ "BRIDGE_PUB_PROGRESS_SUBCAT_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "ERR_QTY", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUB_PROG_DISCREPANCY (BRIDGE_PUB_PROGRESS_CATGY_ID LONG not null,BRIDGE_PUB_PROGRESS_SUBCAT_ID LONG not null,PUBLISH_ID LONG not null,RGN_ID LONG not null,ERR_QTY LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (BRIDGE_PUB_PROGRESS_CATGY_ID, BRIDGE_PUB_PROGRESS_SUBCAT_ID, PUBLISH_ID, RGN_ID))";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUB_PROG_DISCREPANCY";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgeProgressDiscrepancy.id.progressCategoryId ASC, bridgeProgressDiscrepancy.id.progressSubCategoryId ASC, bridgeProgressDiscrepancy.id.publishId ASC, bridgeProgressDiscrepancy.id.regionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUB_PROG_DISCREPANCY.BRIDGE_PUB_PROGRESS_CATGY_ID ASC, BRIDGE_PUB_PROG_DISCREPANCY.BRIDGE_PUB_PROGRESS_SUBCAT_ID ASC, BRIDGE_PUB_PROG_DISCREPANCY.PUBLISH_ID ASC, BRIDGE_PUB_PROG_DISCREPANCY.RGN_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy"),
			true);
	public static long PROGRESSCATEGORYID_COLUMN_BITMASK = 1L;
	public static long PROGRESSSUBCATEGORYID_COLUMN_BITMASK = 2L;
	public static long PUBLISHID_COLUMN_BITMASK = 4L;
	public static long REGIONID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy"));

	public BridgeProgressDiscrepancyModelImpl() {
	}

	@Override
	public BridgeProgressDiscrepancyPK getPrimaryKey() {
		return new BridgeProgressDiscrepancyPK(_progressCategoryId,
			_progressSubCategoryId, _publishId, _regionId);
	}

	@Override
	public void setPrimaryKey(BridgeProgressDiscrepancyPK primaryKey) {
		setProgressCategoryId(primaryKey.progressCategoryId);
		setProgressSubCategoryId(primaryKey.progressSubCategoryId);
		setPublishId(primaryKey.publishId);
		setRegionId(primaryKey.regionId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new BridgeProgressDiscrepancyPK(_progressCategoryId,
			_progressSubCategoryId, _publishId, _regionId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((BridgeProgressDiscrepancyPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return BridgeProgressDiscrepancy.class;
	}

	@Override
	public String getModelClassName() {
		return BridgeProgressDiscrepancy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("progressCategoryId", getProgressCategoryId());
		attributes.put("progressSubCategoryId", getProgressSubCategoryId());
		attributes.put("publishId", getPublishId());
		attributes.put("regionId", getRegionId());
		attributes.put("errorCount", getErrorCount());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long progressCategoryId = (Long)attributes.get("progressCategoryId");

		if (progressCategoryId != null) {
			setProgressCategoryId(progressCategoryId);
		}

		Long progressSubCategoryId = (Long)attributes.get(
				"progressSubCategoryId");

		if (progressSubCategoryId != null) {
			setProgressSubCategoryId(progressSubCategoryId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		Long errorCount = (Long)attributes.get("errorCount");

		if (errorCount != null) {
			setErrorCount(errorCount);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getProgressCategoryId() {
		return _progressCategoryId;
	}

	@Override
	public void setProgressCategoryId(long progressCategoryId) {
		_columnBitmask |= PROGRESSCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalProgressCategoryId) {
			_setOriginalProgressCategoryId = true;

			_originalProgressCategoryId = _progressCategoryId;
		}

		_progressCategoryId = progressCategoryId;
	}

	public long getOriginalProgressCategoryId() {
		return _originalProgressCategoryId;
	}

	@Override
	public long getProgressSubCategoryId() {
		return _progressSubCategoryId;
	}

	@Override
	public void setProgressSubCategoryId(long progressSubCategoryId) {
		_columnBitmask |= PROGRESSSUBCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalProgressSubCategoryId) {
			_setOriginalProgressSubCategoryId = true;

			_originalProgressSubCategoryId = _progressSubCategoryId;
		}

		_progressSubCategoryId = progressSubCategoryId;
	}

	public long getOriginalProgressSubCategoryId() {
		return _originalProgressSubCategoryId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public long getErrorCount() {
		return _errorCount;
	}

	@Override
	public void setErrorCount(long errorCount) {
		_errorCount = errorCount;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public BridgeProgressDiscrepancy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgeProgressDiscrepancy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgeProgressDiscrepancyImpl bridgeProgressDiscrepancyImpl = new BridgeProgressDiscrepancyImpl();

		bridgeProgressDiscrepancyImpl.setProgressCategoryId(getProgressCategoryId());
		bridgeProgressDiscrepancyImpl.setProgressSubCategoryId(getProgressSubCategoryId());
		bridgeProgressDiscrepancyImpl.setPublishId(getPublishId());
		bridgeProgressDiscrepancyImpl.setRegionId(getRegionId());
		bridgeProgressDiscrepancyImpl.setErrorCount(getErrorCount());
		bridgeProgressDiscrepancyImpl.setCreatorId(getCreatorId());
		bridgeProgressDiscrepancyImpl.setCreatedDate(getCreatedDate());
		bridgeProgressDiscrepancyImpl.setUpdatedBy(getUpdatedBy());
		bridgeProgressDiscrepancyImpl.setUpdatedDate(getUpdatedDate());

		bridgeProgressDiscrepancyImpl.resetOriginalValues();

		return bridgeProgressDiscrepancyImpl;
	}

	@Override
	public int compareTo(BridgeProgressDiscrepancy bridgeProgressDiscrepancy) {
		BridgeProgressDiscrepancyPK primaryKey = bridgeProgressDiscrepancy.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgeProgressDiscrepancy)) {
			return false;
		}

		BridgeProgressDiscrepancy bridgeProgressDiscrepancy = (BridgeProgressDiscrepancy)obj;

		BridgeProgressDiscrepancyPK primaryKey = bridgeProgressDiscrepancy.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		BridgeProgressDiscrepancyModelImpl bridgeProgressDiscrepancyModelImpl = this;

		bridgeProgressDiscrepancyModelImpl._originalProgressCategoryId = bridgeProgressDiscrepancyModelImpl._progressCategoryId;

		bridgeProgressDiscrepancyModelImpl._setOriginalProgressCategoryId = false;

		bridgeProgressDiscrepancyModelImpl._originalProgressSubCategoryId = bridgeProgressDiscrepancyModelImpl._progressSubCategoryId;

		bridgeProgressDiscrepancyModelImpl._setOriginalProgressSubCategoryId = false;

		bridgeProgressDiscrepancyModelImpl._originalPublishId = bridgeProgressDiscrepancyModelImpl._publishId;

		bridgeProgressDiscrepancyModelImpl._setOriginalPublishId = false;

		bridgeProgressDiscrepancyModelImpl._originalRegionId = bridgeProgressDiscrepancyModelImpl._regionId;

		bridgeProgressDiscrepancyModelImpl._setOriginalRegionId = false;

		bridgeProgressDiscrepancyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BridgeProgressDiscrepancy> toCacheModel() {
		BridgeProgressDiscrepancyCacheModel bridgeProgressDiscrepancyCacheModel = new BridgeProgressDiscrepancyCacheModel();

		bridgeProgressDiscrepancyCacheModel.progressCategoryId = getProgressCategoryId();

		bridgeProgressDiscrepancyCacheModel.progressSubCategoryId = getProgressSubCategoryId();

		bridgeProgressDiscrepancyCacheModel.publishId = getPublishId();

		bridgeProgressDiscrepancyCacheModel.regionId = getRegionId();

		bridgeProgressDiscrepancyCacheModel.errorCount = getErrorCount();

		bridgeProgressDiscrepancyCacheModel.creatorId = getCreatorId();

		String creatorId = bridgeProgressDiscrepancyCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			bridgeProgressDiscrepancyCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bridgeProgressDiscrepancyCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bridgeProgressDiscrepancyCacheModel.createdDate = Long.MIN_VALUE;
		}

		bridgeProgressDiscrepancyCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bridgeProgressDiscrepancyCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bridgeProgressDiscrepancyCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			bridgeProgressDiscrepancyCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			bridgeProgressDiscrepancyCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return bridgeProgressDiscrepancyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{progressCategoryId=");
		sb.append(getProgressCategoryId());
		sb.append(", progressSubCategoryId=");
		sb.append(getProgressSubCategoryId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", errorCount=");
		sb.append(getErrorCount());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgeProgressDiscrepancy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>progressCategoryId</column-name><column-value><![CDATA[");
		sb.append(getProgressCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progressSubCategoryId</column-name><column-value><![CDATA[");
		sb.append(getProgressSubCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCount</column-name><column-value><![CDATA[");
		sb.append(getErrorCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgeProgressDiscrepancy.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgeProgressDiscrepancy.class
		};
	private long _progressCategoryId;
	private long _originalProgressCategoryId;
	private boolean _setOriginalProgressCategoryId;
	private long _progressSubCategoryId;
	private long _originalProgressSubCategoryId;
	private boolean _setOriginalProgressSubCategoryId;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private long _errorCount;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private BridgeProgressDiscrepancy _escapedModel;
}