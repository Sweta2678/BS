/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.UserPreference;
import com.ihg.brandstandards.db.model.UserPreferenceModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserPreference service. Represents a row in the &quot;USR_PREF&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.UserPreferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserPreferenceImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see UserPreferenceImpl
 * @see com.ihg.brandstandards.db.model.UserPreference
 * @see com.ihg.brandstandards.db.model.UserPreferenceModel
 * @generated
 */
public class UserPreferenceModelImpl extends BaseModelImpl<UserPreference>
	implements UserPreferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user preference model instance should use the {@link com.ihg.brandstandards.db.model.UserPreference} interface instead.
	 */
	public static final String TABLE_NAME = "USR_PREF";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PREF_ID", Types.BIGINT },
			{ "USR_ID", Types.BIGINT },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "PDF_LOCALE_CD", Types.VARCHAR },
			{ "BUILD_TYP", Types.VARCHAR },
			{ "CHAIN_CD", Types.VARCHAR },
			{ "RPT_TYP", Types.VARCHAR },
			{ "RPT_PAPER_SIZE", Types.VARCHAR },
			{ "ITEMS_PER_PAGE", Types.VARCHAR },
			{ "INFO_DISP", Types.VARCHAR },
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "UNSUBSCRIBE_CMT_EML", Types.VARCHAR },
			{ "MODULE_NM", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table USR_PREF (PREF_ID LONG not null primary key,USR_ID LONG,LOCALE_CD VARCHAR(75) null,PDF_LOCALE_CD VARCHAR(75) null,BUILD_TYP VARCHAR(75) null,CHAIN_CD VARCHAR(75) null,RPT_TYP VARCHAR(75) null,RPT_PAPER_SIZE VARCHAR(75) null,ITEMS_PER_PAGE VARCHAR(75) null,INFO_DISP VARCHAR(75) null,CTRY_NM_CD VARCHAR(75) null,UNSUBSCRIBE_CMT_EML VARCHAR(75) null,MODULE_NM VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table USR_PREF";
	public static final String ORDER_BY_JPQL = " ORDER BY userPreference.preferenceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY USR_PREF.PREF_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.UserPreference"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.UserPreference"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.UserPreference"),
			true);
	public static long MODULENAME_COLUMN_BITMASK = 1L;
	public static long PREFERENCEID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.UserPreference"));

	public UserPreferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _preferenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPreferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _preferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserPreference.class;
	}

	@Override
	public String getModelClassName() {
		return UserPreference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("preferenceId", getPreferenceId());
		attributes.put("userId", getUserId());
		attributes.put("langCode", getLangCode());
		attributes.put("pdfLangCode", getPdfLangCode());
		attributes.put("buildType", getBuildType());
		attributes.put("chainCode", getChainCode());
		attributes.put("reportType", getReportType());
		attributes.put("paperSize", getPaperSize());
		attributes.put("itemsPerPage", getItemsPerPage());
		attributes.put("infoDisplay", getInfoDisplay());
		attributes.put("CountryCode", getCountryCode());
		attributes.put("unsubscribeEmail", getUnsubscribeEmail());
		attributes.put("moduleName", getModuleName());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long preferenceId = (Long)attributes.get("preferenceId");

		if (preferenceId != null) {
			setPreferenceId(preferenceId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String langCode = (String)attributes.get("langCode");

		if (langCode != null) {
			setLangCode(langCode);
		}

		String pdfLangCode = (String)attributes.get("pdfLangCode");

		if (pdfLangCode != null) {
			setPdfLangCode(pdfLangCode);
		}

		String buildType = (String)attributes.get("buildType");

		if (buildType != null) {
			setBuildType(buildType);
		}

		String chainCode = (String)attributes.get("chainCode");

		if (chainCode != null) {
			setChainCode(chainCode);
		}

		String reportType = (String)attributes.get("reportType");

		if (reportType != null) {
			setReportType(reportType);
		}

		String paperSize = (String)attributes.get("paperSize");

		if (paperSize != null) {
			setPaperSize(paperSize);
		}

		String itemsPerPage = (String)attributes.get("itemsPerPage");

		if (itemsPerPage != null) {
			setItemsPerPage(itemsPerPage);
		}

		String infoDisplay = (String)attributes.get("infoDisplay");

		if (infoDisplay != null) {
			setInfoDisplay(infoDisplay);
		}

		String CountryCode = (String)attributes.get("CountryCode");

		if (CountryCode != null) {
			setCountryCode(CountryCode);
		}

		String unsubscribeEmail = (String)attributes.get("unsubscribeEmail");

		if (unsubscribeEmail != null) {
			setUnsubscribeEmail(unsubscribeEmail);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPreferenceId() {
		return _preferenceId;
	}

	@Override
	public void setPreferenceId(long preferenceId) {
		_columnBitmask |= PREFERENCEID_COLUMN_BITMASK;

		if (!_setOriginalPreferenceId) {
			_setOriginalPreferenceId = true;

			_originalPreferenceId = _preferenceId;
		}

		_preferenceId = preferenceId;
	}

	public long getOriginalPreferenceId() {
		return _originalPreferenceId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getLangCode() {
		if (_langCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _langCode;
		}
	}

	@Override
	public void setLangCode(String langCode) {
		_langCode = langCode;
	}

	@Override
	public String getPdfLangCode() {
		if (_pdfLangCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfLangCode;
		}
	}

	@Override
	public void setPdfLangCode(String pdfLangCode) {
		_pdfLangCode = pdfLangCode;
	}

	@Override
	public String getBuildType() {
		if (_buildType == null) {
			return StringPool.BLANK;
		}
		else {
			return _buildType;
		}
	}

	@Override
	public void setBuildType(String buildType) {
		_buildType = buildType;
	}

	@Override
	public String getChainCode() {
		if (_chainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chainCode;
		}
	}

	@Override
	public void setChainCode(String chainCode) {
		_chainCode = chainCode;
	}

	@Override
	public String getReportType() {
		if (_reportType == null) {
			return StringPool.BLANK;
		}
		else {
			return _reportType;
		}
	}

	@Override
	public void setReportType(String reportType) {
		_reportType = reportType;
	}

	@Override
	public String getPaperSize() {
		if (_paperSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _paperSize;
		}
	}

	@Override
	public void setPaperSize(String paperSize) {
		_paperSize = paperSize;
	}

	@Override
	public String getItemsPerPage() {
		if (_itemsPerPage == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemsPerPage;
		}
	}

	@Override
	public void setItemsPerPage(String itemsPerPage) {
		_itemsPerPage = itemsPerPage;
	}

	@Override
	public String getInfoDisplay() {
		if (_infoDisplay == null) {
			return StringPool.BLANK;
		}
		else {
			return _infoDisplay;
		}
	}

	@Override
	public void setInfoDisplay(String infoDisplay) {
		_infoDisplay = infoDisplay;
	}

	@Override
	public String getCountryCode() {
		if (_CountryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _CountryCode;
		}
	}

	@Override
	public void setCountryCode(String CountryCode) {
		_CountryCode = CountryCode;
	}

	@Override
	public String getUnsubscribeEmail() {
		if (_unsubscribeEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _unsubscribeEmail;
		}
	}

	@Override
	public void setUnsubscribeEmail(String unsubscribeEmail) {
		_unsubscribeEmail = unsubscribeEmail;
	}

	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_columnBitmask |= MODULENAME_COLUMN_BITMASK;

		if (_originalModuleName == null) {
			_originalModuleName = _moduleName;
		}

		_moduleName = moduleName;
	}

	public String getOriginalModuleName() {
		return GetterUtil.getString(_originalModuleName);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserPreference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserPreference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserPreference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserPreferenceImpl userPreferenceImpl = new UserPreferenceImpl();

		userPreferenceImpl.setPreferenceId(getPreferenceId());
		userPreferenceImpl.setUserId(getUserId());
		userPreferenceImpl.setLangCode(getLangCode());
		userPreferenceImpl.setPdfLangCode(getPdfLangCode());
		userPreferenceImpl.setBuildType(getBuildType());
		userPreferenceImpl.setChainCode(getChainCode());
		userPreferenceImpl.setReportType(getReportType());
		userPreferenceImpl.setPaperSize(getPaperSize());
		userPreferenceImpl.setItemsPerPage(getItemsPerPage());
		userPreferenceImpl.setInfoDisplay(getInfoDisplay());
		userPreferenceImpl.setCountryCode(getCountryCode());
		userPreferenceImpl.setUnsubscribeEmail(getUnsubscribeEmail());
		userPreferenceImpl.setModuleName(getModuleName());
		userPreferenceImpl.setCreatorId(getCreatorId());
		userPreferenceImpl.setCreatedDate(getCreatedDate());
		userPreferenceImpl.setUpdatedBy(getUpdatedBy());
		userPreferenceImpl.setUpdatedDate(getUpdatedDate());

		userPreferenceImpl.resetOriginalValues();

		return userPreferenceImpl;
	}

	@Override
	public int compareTo(UserPreference userPreference) {
		long primaryKey = userPreference.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserPreference)) {
			return false;
		}

		UserPreference userPreference = (UserPreference)obj;

		long primaryKey = userPreference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserPreferenceModelImpl userPreferenceModelImpl = this;

		userPreferenceModelImpl._originalPreferenceId = userPreferenceModelImpl._preferenceId;

		userPreferenceModelImpl._setOriginalPreferenceId = false;

		userPreferenceModelImpl._originalUserId = userPreferenceModelImpl._userId;

		userPreferenceModelImpl._setOriginalUserId = false;

		userPreferenceModelImpl._originalModuleName = userPreferenceModelImpl._moduleName;

		userPreferenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserPreference> toCacheModel() {
		UserPreferenceCacheModel userPreferenceCacheModel = new UserPreferenceCacheModel();

		userPreferenceCacheModel.preferenceId = getPreferenceId();

		userPreferenceCacheModel.userId = getUserId();

		userPreferenceCacheModel.langCode = getLangCode();

		String langCode = userPreferenceCacheModel.langCode;

		if ((langCode != null) && (langCode.length() == 0)) {
			userPreferenceCacheModel.langCode = null;
		}

		userPreferenceCacheModel.pdfLangCode = getPdfLangCode();

		String pdfLangCode = userPreferenceCacheModel.pdfLangCode;

		if ((pdfLangCode != null) && (pdfLangCode.length() == 0)) {
			userPreferenceCacheModel.pdfLangCode = null;
		}

		userPreferenceCacheModel.buildType = getBuildType();

		String buildType = userPreferenceCacheModel.buildType;

		if ((buildType != null) && (buildType.length() == 0)) {
			userPreferenceCacheModel.buildType = null;
		}

		userPreferenceCacheModel.chainCode = getChainCode();

		String chainCode = userPreferenceCacheModel.chainCode;

		if ((chainCode != null) && (chainCode.length() == 0)) {
			userPreferenceCacheModel.chainCode = null;
		}

		userPreferenceCacheModel.reportType = getReportType();

		String reportType = userPreferenceCacheModel.reportType;

		if ((reportType != null) && (reportType.length() == 0)) {
			userPreferenceCacheModel.reportType = null;
		}

		userPreferenceCacheModel.paperSize = getPaperSize();

		String paperSize = userPreferenceCacheModel.paperSize;

		if ((paperSize != null) && (paperSize.length() == 0)) {
			userPreferenceCacheModel.paperSize = null;
		}

		userPreferenceCacheModel.itemsPerPage = getItemsPerPage();

		String itemsPerPage = userPreferenceCacheModel.itemsPerPage;

		if ((itemsPerPage != null) && (itemsPerPage.length() == 0)) {
			userPreferenceCacheModel.itemsPerPage = null;
		}

		userPreferenceCacheModel.infoDisplay = getInfoDisplay();

		String infoDisplay = userPreferenceCacheModel.infoDisplay;

		if ((infoDisplay != null) && (infoDisplay.length() == 0)) {
			userPreferenceCacheModel.infoDisplay = null;
		}

		userPreferenceCacheModel.CountryCode = getCountryCode();

		String CountryCode = userPreferenceCacheModel.CountryCode;

		if ((CountryCode != null) && (CountryCode.length() == 0)) {
			userPreferenceCacheModel.CountryCode = null;
		}

		userPreferenceCacheModel.unsubscribeEmail = getUnsubscribeEmail();

		String unsubscribeEmail = userPreferenceCacheModel.unsubscribeEmail;

		if ((unsubscribeEmail != null) && (unsubscribeEmail.length() == 0)) {
			userPreferenceCacheModel.unsubscribeEmail = null;
		}

		userPreferenceCacheModel.moduleName = getModuleName();

		String moduleName = userPreferenceCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			userPreferenceCacheModel.moduleName = null;
		}

		userPreferenceCacheModel.creatorId = getCreatorId();

		String creatorId = userPreferenceCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			userPreferenceCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			userPreferenceCacheModel.createdDate = createdDate.getTime();
		}
		else {
			userPreferenceCacheModel.createdDate = Long.MIN_VALUE;
		}

		userPreferenceCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = userPreferenceCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			userPreferenceCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			userPreferenceCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			userPreferenceCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return userPreferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{preferenceId=");
		sb.append(getPreferenceId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", langCode=");
		sb.append(getLangCode());
		sb.append(", pdfLangCode=");
		sb.append(getPdfLangCode());
		sb.append(", buildType=");
		sb.append(getBuildType());
		sb.append(", chainCode=");
		sb.append(getChainCode());
		sb.append(", reportType=");
		sb.append(getReportType());
		sb.append(", paperSize=");
		sb.append(getPaperSize());
		sb.append(", itemsPerPage=");
		sb.append(getItemsPerPage());
		sb.append(", infoDisplay=");
		sb.append(getInfoDisplay());
		sb.append(", CountryCode=");
		sb.append(getCountryCode());
		sb.append(", unsubscribeEmail=");
		sb.append(getUnsubscribeEmail());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.UserPreference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>preferenceId</column-name><column-value><![CDATA[");
		sb.append(getPreferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>langCode</column-name><column-value><![CDATA[");
		sb.append(getLangCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfLangCode</column-name><column-value><![CDATA[");
		sb.append(getPdfLangCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildType</column-name><column-value><![CDATA[");
		sb.append(getBuildType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chainCode</column-name><column-value><![CDATA[");
		sb.append(getChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportType</column-name><column-value><![CDATA[");
		sb.append(getReportType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paperSize</column-name><column-value><![CDATA[");
		sb.append(getPaperSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemsPerPage</column-name><column-value><![CDATA[");
		sb.append(getItemsPerPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>infoDisplay</column-name><column-value><![CDATA[");
		sb.append(getInfoDisplay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CountryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unsubscribeEmail</column-name><column-value><![CDATA[");
		sb.append(getUnsubscribeEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserPreference.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserPreference.class
		};
	private long _preferenceId;
	private long _originalPreferenceId;
	private boolean _setOriginalPreferenceId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _langCode;
	private String _pdfLangCode;
	private String _buildType;
	private String _chainCode;
	private String _reportType;
	private String _paperSize;
	private String _itemsPerPage;
	private String _infoDisplay;
	private String _CountryCode;
	private String _unsubscribeEmail;
	private String _moduleName;
	private String _originalModuleName;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private UserPreference _escapedModel;
}