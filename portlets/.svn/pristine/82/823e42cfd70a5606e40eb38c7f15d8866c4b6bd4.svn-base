/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsLocale;
import com.ihg.brandstandards.db.model.StandardsLocaleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsLocale service. Represents a row in the &quot;BRNDSTND_LOCALE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsLocaleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsLocaleImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsLocaleImpl
 * @see com.ihg.brandstandards.db.model.StandardsLocale
 * @see com.ihg.brandstandards.db.model.StandardsLocaleModel
 * @generated
 */
public class StandardsLocaleModelImpl extends BaseModelImpl<StandardsLocale>
	implements StandardsLocaleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards locale model instance should use the {@link com.ihg.brandstandards.db.model.StandardsLocale} interface instead.
	 */
	public static final String TABLE_NAME = "BRNDSTND_LOCALE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LOCALE_CD", Types.VARCHAR },
			{ "CTRY_CD", Types.VARCHAR },
			{ "LOCALE_NM", Types.VARCHAR },
			{ "LANG_CD", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "ACTV_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRNDSTND_LOCALE (LOCALE_CD VARCHAR(75) not null primary key,CTRY_CD VARCHAR(75) null,LOCALE_NM VARCHAR(75) null,LANG_CD VARCHAR(75) null,DISP_ORDER_NBR LONG,ACTV_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BRNDSTND_LOCALE";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsLocale.orderNumber ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRNDSTND_LOCALE.DISP_ORDER_NBR ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsLocale"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsLocale"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsLocale"),
			true);
	public static long ISACTIVE_COLUMN_BITMASK = 1L;
	public static long LOCALECODE_COLUMN_BITMASK = 2L;
	public static long ORDERNUMBER_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsLocale"));

	public StandardsLocaleModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _localeCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setLocaleCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _localeCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsLocale.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsLocale.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("localeCode", getLocaleCode());
		attributes.put("countryCode", getCountryCode());
		attributes.put("localeName", getLocaleName());
		attributes.put("languageCode", getLanguageCode());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("isActive", getIsActive());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String localeName = (String)attributes.get("localeName");

		if (localeName != null) {
			setLocaleName(localeName);
		}

		String languageCode = (String)attributes.get("languageCode");

		if (languageCode != null) {
			setLanguageCode(languageCode);
		}

		Long orderNumber = (Long)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		String isActive = (String)attributes.get("isActive");

		if (isActive != null) {
			setIsActive(isActive);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_columnBitmask |= LOCALECODE_COLUMN_BITMASK;

		if (_originalLocaleCode == null) {
			_originalLocaleCode = _localeCode;
		}

		_localeCode = localeCode;
	}

	public String getOriginalLocaleCode() {
		return GetterUtil.getString(_originalLocaleCode);
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@Override
	public String getLocaleName() {
		if (_localeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeName;
		}
	}

	@Override
	public void setLocaleName(String localeName) {
		_localeName = localeName;
	}

	@Override
	public String getLanguageCode() {
		if (_languageCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageCode;
		}
	}

	@Override
	public void setLanguageCode(String languageCode) {
		_languageCode = languageCode;
	}

	@Override
	public long getOrderNumber() {
		return _orderNumber;
	}

	@Override
	public void setOrderNumber(long orderNumber) {
		_columnBitmask = -1L;

		_orderNumber = orderNumber;
	}

	@Override
	public String getIsActive() {
		if (_isActive == null) {
			return StringPool.BLANK;
		}
		else {
			return _isActive;
		}
	}

	@Override
	public void setIsActive(String isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (_originalIsActive == null) {
			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public String getOriginalIsActive() {
		return GetterUtil.getString(_originalIsActive);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsLocale toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsLocale)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsLocaleImpl standardsLocaleImpl = new StandardsLocaleImpl();

		standardsLocaleImpl.setLocaleCode(getLocaleCode());
		standardsLocaleImpl.setCountryCode(getCountryCode());
		standardsLocaleImpl.setLocaleName(getLocaleName());
		standardsLocaleImpl.setLanguageCode(getLanguageCode());
		standardsLocaleImpl.setOrderNumber(getOrderNumber());
		standardsLocaleImpl.setIsActive(getIsActive());
		standardsLocaleImpl.setCreatorId(getCreatorId());
		standardsLocaleImpl.setCreatedDate(getCreatedDate());
		standardsLocaleImpl.setUpdatedBy(getUpdatedBy());
		standardsLocaleImpl.setUpdatedDate(getUpdatedDate());

		standardsLocaleImpl.resetOriginalValues();

		return standardsLocaleImpl;
	}

	@Override
	public int compareTo(StandardsLocale standardsLocale) {
		int value = 0;

		if (getOrderNumber() < standardsLocale.getOrderNumber()) {
			value = -1;
		}
		else if (getOrderNumber() > standardsLocale.getOrderNumber()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsLocale)) {
			return false;
		}

		StandardsLocale standardsLocale = (StandardsLocale)obj;

		String primaryKey = standardsLocale.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsLocaleModelImpl standardsLocaleModelImpl = this;

		standardsLocaleModelImpl._originalLocaleCode = standardsLocaleModelImpl._localeCode;

		standardsLocaleModelImpl._originalIsActive = standardsLocaleModelImpl._isActive;

		standardsLocaleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsLocale> toCacheModel() {
		StandardsLocaleCacheModel standardsLocaleCacheModel = new StandardsLocaleCacheModel();

		standardsLocaleCacheModel.localeCode = getLocaleCode();

		String localeCode = standardsLocaleCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			standardsLocaleCacheModel.localeCode = null;
		}

		standardsLocaleCacheModel.countryCode = getCountryCode();

		String countryCode = standardsLocaleCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			standardsLocaleCacheModel.countryCode = null;
		}

		standardsLocaleCacheModel.localeName = getLocaleName();

		String localeName = standardsLocaleCacheModel.localeName;

		if ((localeName != null) && (localeName.length() == 0)) {
			standardsLocaleCacheModel.localeName = null;
		}

		standardsLocaleCacheModel.languageCode = getLanguageCode();

		String languageCode = standardsLocaleCacheModel.languageCode;

		if ((languageCode != null) && (languageCode.length() == 0)) {
			standardsLocaleCacheModel.languageCode = null;
		}

		standardsLocaleCacheModel.orderNumber = getOrderNumber();

		standardsLocaleCacheModel.isActive = getIsActive();

		String isActive = standardsLocaleCacheModel.isActive;

		if ((isActive != null) && (isActive.length() == 0)) {
			standardsLocaleCacheModel.isActive = null;
		}

		standardsLocaleCacheModel.creatorId = getCreatorId();

		String creatorId = standardsLocaleCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsLocaleCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsLocaleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsLocaleCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsLocaleCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsLocaleCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsLocaleCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsLocaleCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsLocaleCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsLocaleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{localeCode=");
		sb.append(getLocaleCode());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", localeName=");
		sb.append(getLocaleName());
		sb.append(", languageCode=");
		sb.append(getLanguageCode());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", isActive=");
		sb.append(getIsActive());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsLocale");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeName</column-name><column-value><![CDATA[");
		sb.append(getLocaleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageCode</column-name><column-value><![CDATA[");
		sb.append(getLanguageCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActive</column-name><column-value><![CDATA[");
		sb.append(getIsActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsLocale.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsLocale.class
		};
	private String _localeCode;
	private String _originalLocaleCode;
	private String _countryCode;
	private String _localeName;
	private String _languageCode;
	private long _orderNumber;
	private String _isActive;
	private String _originalIsActive;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsLocale _escapedModel;
}