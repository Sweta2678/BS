/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.grs.common.model.impl;

import com.ihg.grs.common.model.Directory;
import com.ihg.grs.common.model.DirectoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Directory service. Represents a row in the &quot;GRS_COMM.TEAM_MBR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.grs.common.model.DirectoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DirectoryImpl}.
 * </p>
 *
 * @author gulam.vora
 * @see DirectoryImpl
 * @see com.ihg.grs.common.model.Directory
 * @see com.ihg.grs.common.model.DirectoryModel
 * @generated
 */
public class DirectoryModelImpl extends BaseModelImpl<Directory>
	implements DirectoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a directory model instance should use the {@link com.ihg.grs.common.model.Directory} interface instead.
	 */
	public static final String TABLE_NAME = "GRS_COMM.TEAM_MBR";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TEAM_MBR_ID", Types.INTEGER },
			{ "TEAM_MBR_FRST_NM", Types.VARCHAR },
			{ "TEAM_MBR_LST_NM", Types.VARCHAR },
			{ "BUS_TITLE_NM", Types.VARCHAR },
			{ "RGN_NM", Types.VARCHAR },
			{ "ROLE_NM", Types.VARCHAR },
			{ "ROLE_TYP_NM", Types.VARCHAR },
			{ "ORG_NM", Types.VARCHAR },
			{ "PHOTO_URL_TXT", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP },
			{ "TEAM_MBR_EMAIL_ID", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GRS_COMM.TEAM_MBR (TEAM_MBR_ID INTEGER not null primary key,TEAM_MBR_FRST_NM VARCHAR(75) null,TEAM_MBR_LST_NM VARCHAR(75) null,BUS_TITLE_NM VARCHAR(75) null,RGN_NM VARCHAR(75) null,ROLE_NM VARCHAR(75) null,ROLE_TYP_NM VARCHAR(75) null,ORG_NM VARCHAR(75) null,PHOTO_URL_TXT VARCHAR(75) null,CREAT_TS DATE null,CREAT_USR_ID VARCHAR(75) null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,TEAM_MBR_EMAIL_ID VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GRS_COMM.TEAM_MBR";
	public static final String ORDER_BY_JPQL = " ORDER BY directory.directoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GRS_COMM.TEAM_MBR.TEAM_MBR_ID ASC";
	public static final String DATA_SOURCE = "grsDataSource";
	public static final String SESSION_FACTORY = "grsSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.grs.common.model.Directory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.grs.common.model.Directory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.grs.common.model.Directory"));

	public DirectoryModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _directoryId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDirectoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _directoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Directory.class;
	}

	@Override
	public String getModelClassName() {
		return Directory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("directoryId", getDirectoryId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("businessTitle", getBusinessTitle());
		attributes.put("geoRegion", getGeoRegion());
		attributes.put("role", getRole());
		attributes.put("regionType", getRegionType());
		attributes.put("organizationName", getOrganizationName());
		attributes.put("portraitURL", getPortraitURL());
		attributes.put("createdate", getCreatedate());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("lastUpdateUserId", getLastUpdateUserId());
		attributes.put("updatedate", getUpdatedate());
		attributes.put("email", getEmail());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer directoryId = (Integer)attributes.get("directoryId");

		if (directoryId != null) {
			setDirectoryId(directoryId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String businessTitle = (String)attributes.get("businessTitle");

		if (businessTitle != null) {
			setBusinessTitle(businessTitle);
		}

		String geoRegion = (String)attributes.get("geoRegion");

		if (geoRegion != null) {
			setGeoRegion(geoRegion);
		}

		String role = (String)attributes.get("role");

		if (role != null) {
			setRole(role);
		}

		String regionType = (String)attributes.get("regionType");

		if (regionType != null) {
			setRegionType(regionType);
		}

		String organizationName = (String)attributes.get("organizationName");

		if (organizationName != null) {
			setOrganizationName(organizationName);
		}

		String portraitURL = (String)attributes.get("portraitURL");

		if (portraitURL != null) {
			setPortraitURL(portraitURL);
		}

		Date createdate = (Date)attributes.get("createdate");

		if (createdate != null) {
			setCreatedate(createdate);
		}

		String createUserId = (String)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		String lastUpdateUserId = (String)attributes.get("lastUpdateUserId");

		if (lastUpdateUserId != null) {
			setLastUpdateUserId(lastUpdateUserId);
		}

		Date updatedate = (Date)attributes.get("updatedate");

		if (updatedate != null) {
			setUpdatedate(updatedate);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}
	}

	@Override
	public int getDirectoryId() {
		return _directoryId;
	}

	@Override
	public void setDirectoryId(int directoryId) {
		_directoryId = directoryId;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public String getBusinessTitle() {
		if (_businessTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessTitle;
		}
	}

	@Override
	public void setBusinessTitle(String businessTitle) {
		_businessTitle = businessTitle;
	}

	@Override
	public String getGeoRegion() {
		if (_geoRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _geoRegion;
		}
	}

	@Override
	public void setGeoRegion(String geoRegion) {
		_geoRegion = geoRegion;
	}

	@Override
	public String getRole() {
		if (_role == null) {
			return StringPool.BLANK;
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		_role = role;
	}

	@Override
	public String getRegionType() {
		if (_regionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionType;
		}
	}

	@Override
	public void setRegionType(String regionType) {
		_regionType = regionType;
	}

	@Override
	public String getOrganizationName() {
		if (_organizationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizationName;
		}
	}

	@Override
	public void setOrganizationName(String organizationName) {
		_organizationName = organizationName;
	}

	@Override
	public String getPortraitURL() {
		if (_portraitURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _portraitURL;
		}
	}

	@Override
	public void setPortraitURL(String portraitURL) {
		_portraitURL = portraitURL;
	}

	@Override
	public Date getCreatedate() {
		return _createdate;
	}

	@Override
	public void setCreatedate(Date createdate) {
		_createdate = createdate;
	}

	@Override
	public String getCreateUserId() {
		if (_createUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserId;
		}
	}

	@Override
	public void setCreateUserId(String createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public String getLastUpdateUserId() {
		if (_lastUpdateUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserId;
		}
	}

	@Override
	public void setLastUpdateUserId(String lastUpdateUserId) {
		_lastUpdateUserId = lastUpdateUserId;
	}

	@Override
	public Date getUpdatedate() {
		return _updatedate;
	}

	@Override
	public void setUpdatedate(Date updatedate) {
		_updatedate = updatedate;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public Directory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Directory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DirectoryImpl directoryImpl = new DirectoryImpl();

		directoryImpl.setDirectoryId(getDirectoryId());
		directoryImpl.setFirstName(getFirstName());
		directoryImpl.setLastName(getLastName());
		directoryImpl.setBusinessTitle(getBusinessTitle());
		directoryImpl.setGeoRegion(getGeoRegion());
		directoryImpl.setRole(getRole());
		directoryImpl.setRegionType(getRegionType());
		directoryImpl.setOrganizationName(getOrganizationName());
		directoryImpl.setPortraitURL(getPortraitURL());
		directoryImpl.setCreatedate(getCreatedate());
		directoryImpl.setCreateUserId(getCreateUserId());
		directoryImpl.setLastUpdateUserId(getLastUpdateUserId());
		directoryImpl.setUpdatedate(getUpdatedate());
		directoryImpl.setEmail(getEmail());

		directoryImpl.resetOriginalValues();

		return directoryImpl;
	}

	@Override
	public int compareTo(Directory directory) {
		int primaryKey = directory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Directory)) {
			return false;
		}

		Directory directory = (Directory)obj;

		int primaryKey = directory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Directory> toCacheModel() {
		DirectoryCacheModel directoryCacheModel = new DirectoryCacheModel();

		directoryCacheModel.directoryId = getDirectoryId();

		directoryCacheModel.firstName = getFirstName();

		String firstName = directoryCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			directoryCacheModel.firstName = null;
		}

		directoryCacheModel.lastName = getLastName();

		String lastName = directoryCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			directoryCacheModel.lastName = null;
		}

		directoryCacheModel.businessTitle = getBusinessTitle();

		String businessTitle = directoryCacheModel.businessTitle;

		if ((businessTitle != null) && (businessTitle.length() == 0)) {
			directoryCacheModel.businessTitle = null;
		}

		directoryCacheModel.geoRegion = getGeoRegion();

		String geoRegion = directoryCacheModel.geoRegion;

		if ((geoRegion != null) && (geoRegion.length() == 0)) {
			directoryCacheModel.geoRegion = null;
		}

		directoryCacheModel.role = getRole();

		String role = directoryCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			directoryCacheModel.role = null;
		}

		directoryCacheModel.regionType = getRegionType();

		String regionType = directoryCacheModel.regionType;

		if ((regionType != null) && (regionType.length() == 0)) {
			directoryCacheModel.regionType = null;
		}

		directoryCacheModel.organizationName = getOrganizationName();

		String organizationName = directoryCacheModel.organizationName;

		if ((organizationName != null) && (organizationName.length() == 0)) {
			directoryCacheModel.organizationName = null;
		}

		directoryCacheModel.portraitURL = getPortraitURL();

		String portraitURL = directoryCacheModel.portraitURL;

		if ((portraitURL != null) && (portraitURL.length() == 0)) {
			directoryCacheModel.portraitURL = null;
		}

		Date createdate = getCreatedate();

		if (createdate != null) {
			directoryCacheModel.createdate = createdate.getTime();
		}
		else {
			directoryCacheModel.createdate = Long.MIN_VALUE;
		}

		directoryCacheModel.createUserId = getCreateUserId();

		String createUserId = directoryCacheModel.createUserId;

		if ((createUserId != null) && (createUserId.length() == 0)) {
			directoryCacheModel.createUserId = null;
		}

		directoryCacheModel.lastUpdateUserId = getLastUpdateUserId();

		String lastUpdateUserId = directoryCacheModel.lastUpdateUserId;

		if ((lastUpdateUserId != null) && (lastUpdateUserId.length() == 0)) {
			directoryCacheModel.lastUpdateUserId = null;
		}

		Date updatedate = getUpdatedate();

		if (updatedate != null) {
			directoryCacheModel.updatedate = updatedate.getTime();
		}
		else {
			directoryCacheModel.updatedate = Long.MIN_VALUE;
		}

		directoryCacheModel.email = getEmail();

		String email = directoryCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			directoryCacheModel.email = null;
		}

		return directoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{directoryId=");
		sb.append(getDirectoryId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", businessTitle=");
		sb.append(getBusinessTitle());
		sb.append(", geoRegion=");
		sb.append(getGeoRegion());
		sb.append(", role=");
		sb.append(getRole());
		sb.append(", regionType=");
		sb.append(getRegionType());
		sb.append(", organizationName=");
		sb.append(getOrganizationName());
		sb.append(", portraitURL=");
		sb.append(getPortraitURL());
		sb.append(", createdate=");
		sb.append(getCreatedate());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", lastUpdateUserId=");
		sb.append(getLastUpdateUserId());
		sb.append(", updatedate=");
		sb.append(getUpdatedate());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.ihg.grs.common.model.Directory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>directoryId</column-name><column-value><![CDATA[");
		sb.append(getDirectoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTitle</column-name><column-value><![CDATA[");
		sb.append(getBusinessTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoRegion</column-name><column-value><![CDATA[");
		sb.append(getGeoRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionType</column-name><column-value><![CDATA[");
		sb.append(getRegionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationName</column-name><column-value><![CDATA[");
		sb.append(getOrganizationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portraitURL</column-name><column-value><![CDATA[");
		sb.append(getPortraitURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdate</column-name><column-value><![CDATA[");
		sb.append(getCreatedate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserId</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Directory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Directory.class
		};
	private int _directoryId;
	private String _firstName;
	private String _lastName;
	private String _businessTitle;
	private String _geoRegion;
	private String _role;
	private String _regionType;
	private String _organizationName;
	private String _portraitURL;
	private Date _createdate;
	private String _createUserId;
	private String _lastUpdateUserId;
	private Date _updatedate;
	private String _email;
	private Directory _escapedModel;
}