/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.AttachmentsStandards;
import com.ihg.brandstandards.db.model.AttachmentsStandardsModel;
import com.ihg.brandstandards.db.service.persistence.AttachmentsStandardsPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AttachmentsStandards service. Represents a row in the &quot;STD_ATTACHMENT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.AttachmentsStandardsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentsStandardsImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see AttachmentsStandardsImpl
 * @see com.ihg.brandstandards.db.model.AttachmentsStandards
 * @see com.ihg.brandstandards.db.model.AttachmentsStandardsModel
 * @generated
 */
public class AttachmentsStandardsModelImpl extends BaseModelImpl<AttachmentsStandards>
	implements AttachmentsStandardsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attachments standards model instance should use the {@link com.ihg.brandstandards.db.model.AttachmentsStandards} interface instead.
	 */
	public static final String TABLE_NAME = "STD_ATTACHMENT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_ATTACHEMENT_ID", Types.BIGINT },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "PRNT_STD_ATTACHMENT_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "ATTACHMENT_TYP", Types.VARCHAR },
			{ "ATTACHMENT_TITLE_TXT", Types.VARCHAR },
			{ "XLAT_IND", Types.VARCHAR },
			{ "ATTACHMENT_PATH_TXT", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_ATTACHMENT (STD_ATTACHEMENT_ID LONG not null,LOCALE_CD VARCHAR(75) not null,PRNT_STD_ATTACHMENT_ID LONG,STD_ID LONG,ATTACHMENT_TYP VARCHAR(75) null,ATTACHMENT_TITLE_TXT VARCHAR(75) null,XLAT_IND VARCHAR(75) null,ATTACHMENT_PATH_TXT VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (STD_ATTACHEMENT_ID, LOCALE_CD))";
	public static final String TABLE_SQL_DROP = "drop table STD_ATTACHMENT";
	public static final String ORDER_BY_JPQL = " ORDER BY attachmentsStandards.id.attachmentId ASC, attachmentsStandards.id.localeCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_ATTACHMENT.STD_ATTACHEMENT_ID ASC, STD_ATTACHMENT.LOCALE_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.AttachmentsStandards"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.AttachmentsStandards"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.AttachmentsStandards"),
			true);
	public static long ATTACHMENTID_COLUMN_BITMASK = 1L;
	public static long LOCALECODE_COLUMN_BITMASK = 2L;
	public static long PARENTATTACHMENTID_COLUMN_BITMASK = 4L;
	public static long STDID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.AttachmentsStandards"));

	public AttachmentsStandardsModelImpl() {
	}

	@Override
	public AttachmentsStandardsPK getPrimaryKey() {
		return new AttachmentsStandardsPK(_attachmentId, _localeCode);
	}

	@Override
	public void setPrimaryKey(AttachmentsStandardsPK primaryKey) {
		setAttachmentId(primaryKey.attachmentId);
		setLocaleCode(primaryKey.localeCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new AttachmentsStandardsPK(_attachmentId, _localeCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((AttachmentsStandardsPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AttachmentsStandards.class;
	}

	@Override
	public String getModelClassName() {
		return AttachmentsStandards.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("attachmentId", getAttachmentId());
		attributes.put("localeCode", getLocaleCode());
		attributes.put("parentAttachmentId", getParentAttachmentId());
		attributes.put("stdId", getStdId());
		attributes.put("type", getType());
		attributes.put("title", getTitle());
		attributes.put("translationIndicator", getTranslationIndicator());
		attributes.put("attachmentPath", getAttachmentPath());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long attachmentId = (Long)attributes.get("attachmentId");

		if (attachmentId != null) {
			setAttachmentId(attachmentId);
		}

		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		Long parentAttachmentId = (Long)attributes.get("parentAttachmentId");

		if (parentAttachmentId != null) {
			setParentAttachmentId(parentAttachmentId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String translationIndicator = (String)attributes.get(
				"translationIndicator");

		if (translationIndicator != null) {
			setTranslationIndicator(translationIndicator);
		}

		String attachmentPath = (String)attributes.get("attachmentPath");

		if (attachmentPath != null) {
			setAttachmentPath(attachmentPath);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getAttachmentId() {
		return _attachmentId;
	}

	@Override
	public void setAttachmentId(long attachmentId) {
		_columnBitmask |= ATTACHMENTID_COLUMN_BITMASK;

		if (!_setOriginalAttachmentId) {
			_setOriginalAttachmentId = true;

			_originalAttachmentId = _attachmentId;
		}

		_attachmentId = attachmentId;
	}

	public long getOriginalAttachmentId() {
		return _originalAttachmentId;
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_columnBitmask |= LOCALECODE_COLUMN_BITMASK;

		if (_originalLocaleCode == null) {
			_originalLocaleCode = _localeCode;
		}

		_localeCode = localeCode;
	}

	public String getOriginalLocaleCode() {
		return GetterUtil.getString(_originalLocaleCode);
	}

	@Override
	public long getParentAttachmentId() {
		return _parentAttachmentId;
	}

	@Override
	public void setParentAttachmentId(long parentAttachmentId) {
		_columnBitmask |= PARENTATTACHMENTID_COLUMN_BITMASK;

		if (!_setOriginalParentAttachmentId) {
			_setOriginalParentAttachmentId = true;

			_originalParentAttachmentId = _parentAttachmentId;
		}

		_parentAttachmentId = parentAttachmentId;
	}

	public long getOriginalParentAttachmentId() {
		return _originalParentAttachmentId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getTranslationIndicator() {
		if (_translationIndicator == null) {
			return StringPool.BLANK;
		}
		else {
			return _translationIndicator;
		}
	}

	@Override
	public void setTranslationIndicator(String translationIndicator) {
		_translationIndicator = translationIndicator;
	}

	@Override
	public String getAttachmentPath() {
		if (_attachmentPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentPath;
		}
	}

	@Override
	public void setAttachmentPath(String attachmentPath) {
		_attachmentPath = attachmentPath;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AttachmentsStandards toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AttachmentsStandards)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachmentsStandardsImpl attachmentsStandardsImpl = new AttachmentsStandardsImpl();

		attachmentsStandardsImpl.setAttachmentId(getAttachmentId());
		attachmentsStandardsImpl.setLocaleCode(getLocaleCode());
		attachmentsStandardsImpl.setParentAttachmentId(getParentAttachmentId());
		attachmentsStandardsImpl.setStdId(getStdId());
		attachmentsStandardsImpl.setType(getType());
		attachmentsStandardsImpl.setTitle(getTitle());
		attachmentsStandardsImpl.setTranslationIndicator(getTranslationIndicator());
		attachmentsStandardsImpl.setAttachmentPath(getAttachmentPath());
		attachmentsStandardsImpl.setCreatorId(getCreatorId());
		attachmentsStandardsImpl.setCreatedDate(getCreatedDate());
		attachmentsStandardsImpl.setUpdatedBy(getUpdatedBy());
		attachmentsStandardsImpl.setUpdatedDate(getUpdatedDate());

		attachmentsStandardsImpl.resetOriginalValues();

		return attachmentsStandardsImpl;
	}

	@Override
	public int compareTo(AttachmentsStandards attachmentsStandards) {
		AttachmentsStandardsPK primaryKey = attachmentsStandards.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AttachmentsStandards)) {
			return false;
		}

		AttachmentsStandards attachmentsStandards = (AttachmentsStandards)obj;

		AttachmentsStandardsPK primaryKey = attachmentsStandards.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		AttachmentsStandardsModelImpl attachmentsStandardsModelImpl = this;

		attachmentsStandardsModelImpl._originalAttachmentId = attachmentsStandardsModelImpl._attachmentId;

		attachmentsStandardsModelImpl._setOriginalAttachmentId = false;

		attachmentsStandardsModelImpl._originalLocaleCode = attachmentsStandardsModelImpl._localeCode;

		attachmentsStandardsModelImpl._originalParentAttachmentId = attachmentsStandardsModelImpl._parentAttachmentId;

		attachmentsStandardsModelImpl._setOriginalParentAttachmentId = false;

		attachmentsStandardsModelImpl._originalStdId = attachmentsStandardsModelImpl._stdId;

		attachmentsStandardsModelImpl._setOriginalStdId = false;

		attachmentsStandardsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AttachmentsStandards> toCacheModel() {
		AttachmentsStandardsCacheModel attachmentsStandardsCacheModel = new AttachmentsStandardsCacheModel();

		attachmentsStandardsCacheModel.attachmentId = getAttachmentId();

		attachmentsStandardsCacheModel.localeCode = getLocaleCode();

		String localeCode = attachmentsStandardsCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			attachmentsStandardsCacheModel.localeCode = null;
		}

		attachmentsStandardsCacheModel.parentAttachmentId = getParentAttachmentId();

		attachmentsStandardsCacheModel.stdId = getStdId();

		attachmentsStandardsCacheModel.type = getType();

		String type = attachmentsStandardsCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			attachmentsStandardsCacheModel.type = null;
		}

		attachmentsStandardsCacheModel.title = getTitle();

		String title = attachmentsStandardsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			attachmentsStandardsCacheModel.title = null;
		}

		attachmentsStandardsCacheModel.translationIndicator = getTranslationIndicator();

		String translationIndicator = attachmentsStandardsCacheModel.translationIndicator;

		if ((translationIndicator != null) &&
				(translationIndicator.length() == 0)) {
			attachmentsStandardsCacheModel.translationIndicator = null;
		}

		attachmentsStandardsCacheModel.attachmentPath = getAttachmentPath();

		String attachmentPath = attachmentsStandardsCacheModel.attachmentPath;

		if ((attachmentPath != null) && (attachmentPath.length() == 0)) {
			attachmentsStandardsCacheModel.attachmentPath = null;
		}

		attachmentsStandardsCacheModel.creatorId = getCreatorId();

		String creatorId = attachmentsStandardsCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			attachmentsStandardsCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			attachmentsStandardsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			attachmentsStandardsCacheModel.createdDate = Long.MIN_VALUE;
		}

		attachmentsStandardsCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = attachmentsStandardsCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			attachmentsStandardsCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			attachmentsStandardsCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			attachmentsStandardsCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return attachmentsStandardsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{attachmentId=");
		sb.append(getAttachmentId());
		sb.append(", localeCode=");
		sb.append(getLocaleCode());
		sb.append(", parentAttachmentId=");
		sb.append(getParentAttachmentId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", translationIndicator=");
		sb.append(getTranslationIndicator());
		sb.append(", attachmentPath=");
		sb.append(getAttachmentPath());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.AttachmentsStandards");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>attachmentId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getParentAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>translationIndicator</column-name><column-value><![CDATA[");
		sb.append(getTranslationIndicator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentPath</column-name><column-value><![CDATA[");
		sb.append(getAttachmentPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AttachmentsStandards.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AttachmentsStandards.class
		};
	private long _attachmentId;
	private long _originalAttachmentId;
	private boolean _setOriginalAttachmentId;
	private String _localeCode;
	private String _originalLocaleCode;
	private long _parentAttachmentId;
	private long _originalParentAttachmentId;
	private boolean _setOriginalParentAttachmentId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private String _type;
	private String _title;
	private String _translationIndicator;
	private String _attachmentPath;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private AttachmentsStandards _escapedModel;
}