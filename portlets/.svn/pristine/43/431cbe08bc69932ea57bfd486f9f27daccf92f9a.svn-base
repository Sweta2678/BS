/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.service;

import com.liferay.portal.kernel.bean.PortletBeanLocatorUtil;
import com.liferay.portal.kernel.util.ReferenceRegistry;
import com.liferay.portal.service.InvokableLocalService;

/**
 * Provides the local service utility for GEMQlReport. This utility wraps
 * {@link com.ihg.brandstandards.db.service.impl.GEMQlReportLocalServiceImpl} and is the
 * primary access point for service operations in application layer code running
 * on the local server. Methods of this service will not have security checks
 * based on the propagated JAAS credentials because this service can only be
 * accessed from within the same VM.
 *
 * @author Mummanedi
 * @see GEMQlReportLocalService
 * @see com.ihg.brandstandards.db.service.base.GEMQlReportLocalServiceBaseImpl
 * @see com.ihg.brandstandards.db.service.impl.GEMQlReportLocalServiceImpl
 * @generated
 */
public class GEMQlReportLocalServiceUtil {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify this class directly. Add custom service methods to {@link com.ihg.brandstandards.db.service.impl.GEMQlReportLocalServiceImpl} and rerun ServiceBuilder to regenerate this class.
	 */

	/**
	* Adds the g e m ql report to the database. Also notifies the appropriate model listeners.
	*
	* @param gemQlReport the g e m ql report
	* @return the g e m ql report that was added
	* @throws SystemException if a system exception occurred
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport addGEMQlReport(
		com.ihg.brandstandards.db.model.GEMQlReport gemQlReport)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().addGEMQlReport(gemQlReport);
	}

	/**
	* Creates a new g e m ql report with the primary key. Does not add the g e m ql report to the database.
	*
	* @param qlReportId the primary key for the new g e m ql report
	* @return the new g e m ql report
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport createGEMQlReport(
		long qlReportId) {
		return getService().createGEMQlReport(qlReportId);
	}

	/**
	* Deletes the g e m ql report with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param qlReportId the primary key of the g e m ql report
	* @return the g e m ql report that was removed
	* @throws PortalException if a g e m ql report with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport deleteGEMQlReport(
		long qlReportId)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return getService().deleteGEMQlReport(qlReportId);
	}

	/**
	* Deletes the g e m ql report from the database. Also notifies the appropriate model listeners.
	*
	* @param gemQlReport the g e m ql report
	* @return the g e m ql report that was removed
	* @throws SystemException if a system exception occurred
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport deleteGEMQlReport(
		com.ihg.brandstandards.db.model.GEMQlReport gemQlReport)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().deleteGEMQlReport(gemQlReport);
	}

	public static com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery() {
		return getService().dynamicQuery();
	}

	/**
	* Performs a dynamic query on the database and returns the matching rows.
	*
	* @param dynamicQuery the dynamic query
	* @return the matching rows
	* @throws SystemException if a system exception occurred
	*/
	@SuppressWarnings("rawtypes")
	public static java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().dynamicQuery(dynamicQuery);
	}

	/**
	* Performs a dynamic query on the database and returns a range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.brandstandards.db.model.impl.GEMQlReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @return the range of matching rows
	* @throws SystemException if a system exception occurred
	*/
	@SuppressWarnings("rawtypes")
	public static java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end) throws com.liferay.portal.kernel.exception.SystemException {
		return getService().dynamicQuery(dynamicQuery, start, end);
	}

	/**
	* Performs a dynamic query on the database and returns an ordered range of the matching rows.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.brandstandards.db.model.impl.GEMQlReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param dynamicQuery the dynamic query
	* @param start the lower bound of the range of model instances
	* @param end the upper bound of the range of model instances (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching rows
	* @throws SystemException if a system exception occurred
	*/
	@SuppressWarnings("rawtypes")
	public static java.util.List dynamicQuery(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,
		int end,
		com.liferay.portal.kernel.util.OrderByComparator orderByComparator)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService()
				   .dynamicQuery(dynamicQuery, start, end, orderByComparator);
	}

	/**
	* Returns the number of rows that match the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @return the number of rows that match the dynamic query
	* @throws SystemException if a system exception occurred
	*/
	public static long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().dynamicQueryCount(dynamicQuery);
	}

	/**
	* Returns the number of rows that match the dynamic query.
	*
	* @param dynamicQuery the dynamic query
	* @param projection the projection to apply to the query
	* @return the number of rows that match the dynamic query
	* @throws SystemException if a system exception occurred
	*/
	public static long dynamicQueryCount(
		com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery,
		com.liferay.portal.kernel.dao.orm.Projection projection)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().dynamicQueryCount(dynamicQuery, projection);
	}

	public static com.ihg.brandstandards.db.model.GEMQlReport fetchGEMQlReport(
		long qlReportId)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().fetchGEMQlReport(qlReportId);
	}

	/**
	* Returns the g e m ql report with the primary key.
	*
	* @param qlReportId the primary key of the g e m ql report
	* @return the g e m ql report
	* @throws PortalException if a g e m ql report with the primary key could not be found
	* @throws SystemException if a system exception occurred
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport getGEMQlReport(
		long qlReportId)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return getService().getGEMQlReport(qlReportId);
	}

	public static com.liferay.portal.model.PersistedModel getPersistedModel(
		java.io.Serializable primaryKeyObj)
		throws com.liferay.portal.kernel.exception.PortalException,
			com.liferay.portal.kernel.exception.SystemException {
		return getService().getPersistedModel(primaryKeyObj);
	}

	/**
	* Returns a range of all the g e m ql reports.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.brandstandards.db.model.impl.GEMQlReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of g e m ql reports
	* @param end the upper bound of the range of g e m ql reports (not inclusive)
	* @return the range of g e m ql reports
	* @throws SystemException if a system exception occurred
	*/
	public static java.util.List<com.ihg.brandstandards.db.model.GEMQlReport> getGEMQlReports(
		int start, int end)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().getGEMQlReports(start, end);
	}

	/**
	* Returns the number of g e m ql reports.
	*
	* @return the number of g e m ql reports
	* @throws SystemException if a system exception occurred
	*/
	public static int getGEMQlReportsCount()
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().getGEMQlReportsCount();
	}

	/**
	* Updates the g e m ql report in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	*
	* @param gemQlReport the g e m ql report
	* @return the g e m ql report that was updated
	* @throws SystemException if a system exception occurred
	*/
	public static com.ihg.brandstandards.db.model.GEMQlReport updateGEMQlReport(
		com.ihg.brandstandards.db.model.GEMQlReport gemQlReport)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().updateGEMQlReport(gemQlReport);
	}

	/**
	* Returns the Spring bean ID for this bean.
	*
	* @return the Spring bean ID for this bean
	*/
	public static java.lang.String getBeanIdentifier() {
		return getService().getBeanIdentifier();
	}

	/**
	* Sets the Spring bean ID for this bean.
	*
	* @param beanIdentifier the Spring bean ID for this bean
	*/
	public static void setBeanIdentifier(java.lang.String beanIdentifier) {
		getService().setBeanIdentifier(beanIdentifier);
	}

	public static java.lang.Object invokeMethod(java.lang.String name,
		java.lang.String[] parameterTypes, java.lang.Object[] arguments)
		throws java.lang.Throwable {
		return getService().invokeMethod(name, parameterTypes, arguments);
	}

	public static void clearCache() {
		getService().clearCache();
	}

	public static java.util.List<com.ihg.brandstandards.custom.gem.model.QualityLeadModel> getGEMQlReport(
		long parentPublishId, long publishId, long regionId,
		java.lang.String regionCd, java.lang.String brandCd,
		java.lang.String stdIdLst, java.lang.String stdStatus,
		java.lang.String stdOwner, long seCategory, java.lang.String stdRegion,
		boolean isGlobalUser) {
		return getService()
				   .getGEMQlReport(parentPublishId, publishId, regionId,
			regionCd, brandCd, stdIdLst, stdStatus, stdOwner, seCategory,
			stdRegion, isGlobalUser);
	}

	public static java.util.List<com.ihg.brandstandards.custom.gem.model.QualityLeadModel> getGEMQlReport(
		java.lang.String query) {
		return getService().getGEMQlReport(query);
	}

	public static boolean saveGEMQlReport(
		java.util.List<com.ihg.brandstandards.custom.gem.model.QualityLeadModel> records,
		long publishDeptId, long parentPublishId, long publishId,
		long regionId, java.lang.String user, boolean isGlobalUser,
		boolean isReSequence) {
		return getService()
				   .saveGEMQlReport(records, publishDeptId, parentPublishId,
			publishId, regionId, user, isGlobalUser, isReSequence);
	}

	public static boolean populateScoringCounts(long puiblishDeptId,
		long parentPublishId, long publishId, long seTemplateId, long regionId,
		java.lang.String screenName) {
		return getService()
				   .populateScoringCounts(puiblishDeptId, parentPublishId,
			publishId, seTemplateId, regionId, screenName);
	}

	public static boolean syncBridgeGEMQlReport(long actvGemDeptId,
		long actvGemPublishDeptId, long brdgPublishId, long actvGemPublishId,
		long regionId, java.lang.String regionCd, java.lang.String brandCd,
		java.lang.String screenName, java.lang.String user,
		java.lang.String seManualType, java.lang.String saManualType,
		java.lang.String wrManualType, boolean isGlobalUser) {
		return getService()
				   .syncBridgeGEMQlReport(actvGemDeptId, actvGemPublishDeptId,
			brdgPublishId, actvGemPublishId, regionId, regionCd, brandCd,
			screenName, user, seManualType, saManualType, wrManualType,
			isGlobalUser);
	}

	public static boolean updateQlWithDataFromLastPublication(
		long curPublishId, long regionId) {
		return getService()
				   .updateQlWithDataFromLastPublication(curPublishId, regionId);
	}

	public static boolean updateQlWithDataFromPublication(long curPublishId,
		long lstPublishId, long regionId) {
		return getService()
				   .updateQlWithDataFromPublication(curPublishId, lstPublishId,
			regionId);
	}

	public static long getQlCountByPublishIdRegionId(long publishId,
		long regionId) {
		return getService().getQlCountByPublishIdRegionId(publishId, regionId);
	}

	public static java.util.List<java.lang.String> getStdOwners(
		long publishId, long regionId, java.lang.String regionCd) {
		return getService().getStdOwners(publishId, regionId, regionCd);
	}

	public static java.util.Map<java.lang.String, java.lang.String> getGemBktSeverityCatgyCounts(
		long seTemplateId) {
		return getService().getGemBktSeverityCatgyCounts(seTemplateId);
	}

	public static java.lang.String getScoringHeaderCounts(long seTemplateId,
		long gemDepartmentId) {
		return getService().getScoringHeaderCounts(seTemplateId, gemDepartmentId);
	}

	public static java.util.Map<java.lang.String, java.lang.String> getGemBktSeverityCatgyTotalCounts(
		long seTemplateId) {
		return getService().getGemBktSeverityCatgyTotalCounts(seTemplateId);
	}

	public static java.util.List<com.ihg.brandstandards.custom.gem.model.GEMScoreModel> getScoringPoints(
		long publishId, long regionId) {
		return getService().getScoringPoints(publishId, regionId);
	}

	public static boolean setScoringPoints(
		java.util.List<com.ihg.brandstandards.custom.gem.model.GEMScoreModel> scorePoints) {
		return getService().setScoringPoints(scorePoints);
	}

	public static boolean isGlobalMustNotSelectedForMeasurement(
		long publishId, long regionId) {
		return getService()
				   .isGlobalMustNotSelectedForMeasurement(publishId, regionId);
	}

	/**
	* @param query
	* @return Map<String,String>
	*/
	public static java.util.Map<java.lang.String, java.lang.String> getReportManualTypes(
		java.lang.String query) {
		return getService().getReportManualTypes(query);
	}

	public static java.util.Map<java.lang.String, java.lang.String> getGemPathFilterData(
		java.lang.String query) {
		return getService().getGemPathFilterData(query);
	}

	public static java.util.List<com.ihg.brandstandards.custom.gem.model.QualityLeadModel> getApplicableBrandsByStdId(
		long deptId, long stdId, long regionId) {
		return getService().getApplicableBrandsByStdId(deptId, stdId, regionId);
	}

	public static java.util.List<com.ihg.brandstandards.db.model.GEMQlReport> getByPrntQlReportId(
		long parentQlReportId)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService().getByPrntQlReportId(parentQlReportId);
	}

	public static java.util.List<com.ihg.brandstandards.db.model.GEMQlReport> getByStdIdDuplicatePublishId(
		long publishId, long regionId, long stdId, java.lang.String duplicate)
		throws com.liferay.portal.kernel.exception.SystemException {
		return getService()
				   .getByStdIdDuplicatePublishId(publishId, regionId, stdId,
			duplicate);
	}

	public static java.util.List<com.ihg.brandstandards.custom.gem.model.QualityLeadModel> getGEMDuplicatesReport(
		java.lang.String query) {
		return getService().getGEMDuplicatesReport(query);
	}

	public static java.util.List<com.ihg.brandstandards.db.model.GEMQlReport> getSpecGdlnByStdIdPublishIdDuplicate(
		long publishId, long regionId, long stdId,
		java.lang.String duplicateInd, java.lang.String stdType) {
		return getService()
				   .getSpecGdlnByStdIdPublishIdDuplicate(publishId, regionId,
			stdId, duplicateInd, stdType);
	}

	public static void clearService() {
		_service = null;
	}

	public static GEMQlReportLocalService getService() {
		if (_service == null) {
			InvokableLocalService invokableLocalService = (InvokableLocalService)PortletBeanLocatorUtil.locate(ClpSerializer.getServletContextName(),
					GEMQlReportLocalService.class.getName());

			if (invokableLocalService instanceof GEMQlReportLocalService) {
				_service = (GEMQlReportLocalService)invokableLocalService;
			}
			else {
				_service = new GEMQlReportLocalServiceClp(invokableLocalService);
			}

			ReferenceRegistry.registerReference(GEMQlReportLocalServiceUtil.class,
				"_service");
		}

		return _service;
	}

	/**
	 * @deprecated As of 6.2.0
	 */
	public void setService(GEMQlReportLocalService service) {
	}

	private static GEMQlReportLocalService _service;
}