/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsHistoricalManual;
import com.ihg.brandstandards.db.model.StandardsHistoricalManualModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsHistoricalManual service. Represents a row in the &quot;STD_MNL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsHistoricalManualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsHistoricalManualImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsHistoricalManualImpl
 * @see com.ihg.brandstandards.db.model.StandardsHistoricalManual
 * @see com.ihg.brandstandards.db.model.StandardsHistoricalManualModel
 * @generated
 */
public class StandardsHistoricalManualModelImpl extends BaseModelImpl<StandardsHistoricalManual>
	implements StandardsHistoricalManualModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards historical manual model instance should use the {@link com.ihg.brandstandards.db.model.StandardsHistoricalManual} interface instead.
	 */
	public static final String TABLE_NAME = "STD_MNL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_MNL_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "HST_MNL_ID", Types.BIGINT },
			{ "MNL_CHNG_DESC", Types.VARCHAR },
			{ "STD_MNL_TITLE", Types.VARCHAR },
			{ "CREATE_BY", Types.VARCHAR },
			{ "CREATE_DATE", Types.TIMESTAMP },
			{ "LAST_UPD_BY", Types.VARCHAR },
			{ "LAST_UPD_DATE", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_MNL (STD_MNL_ID LONG not null primary key,STD_ID LONG,HST_MNL_ID LONG,MNL_CHNG_DESC VARCHAR(75) null,STD_MNL_TITLE VARCHAR(75) null,CREATE_BY VARCHAR(75) null,CREATE_DATE DATE null,LAST_UPD_BY VARCHAR(75) null,LAST_UPD_DATE DATE null)";
	public static final String TABLE_SQL_DROP = "drop table STD_MNL";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsHistoricalManual.stdMnlId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_MNL.STD_MNL_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsHistoricalManual"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsHistoricalManual"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsHistoricalManual"),
			true);
	public static long HISTMANUALID_COLUMN_BITMASK = 1L;
	public static long STDID_COLUMN_BITMASK = 2L;
	public static long STDMNLID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsHistoricalManual"));

	public StandardsHistoricalManualModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stdMnlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStdMnlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stdMnlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsHistoricalManual.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsHistoricalManual.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdMnlId", getStdMnlId());
		attributes.put("stdId", getStdId());
		attributes.put("histManualId", getHistManualId());
		attributes.put("change", getChange());
		attributes.put("title", getTitle());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdMnlId = (Long)attributes.get("stdMnlId");

		if (stdMnlId != null) {
			setStdMnlId(stdMnlId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long histManualId = (Long)attributes.get("histManualId");

		if (histManualId != null) {
			setHistManualId(histManualId);
		}

		String change = (String)attributes.get("change");

		if (change != null) {
			setChange(change);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getStdMnlId() {
		return _stdMnlId;
	}

	@Override
	public void setStdMnlId(long stdMnlId) {
		_stdMnlId = stdMnlId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public long getHistManualId() {
		return _histManualId;
	}

	@Override
	public void setHistManualId(long histManualId) {
		_columnBitmask |= HISTMANUALID_COLUMN_BITMASK;

		if (!_setOriginalHistManualId) {
			_setOriginalHistManualId = true;

			_originalHistManualId = _histManualId;
		}

		_histManualId = histManualId;
	}

	public long getOriginalHistManualId() {
		return _originalHistManualId;
	}

	@Override
	public String getChange() {
		if (_change == null) {
			return StringPool.BLANK;
		}
		else {
			return _change;
		}
	}

	@Override
	public void setChange(String change) {
		_change = change;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StandardsHistoricalManual.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StandardsHistoricalManual toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsHistoricalManual)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsHistoricalManualImpl standardsHistoricalManualImpl = new StandardsHistoricalManualImpl();

		standardsHistoricalManualImpl.setStdMnlId(getStdMnlId());
		standardsHistoricalManualImpl.setStdId(getStdId());
		standardsHistoricalManualImpl.setHistManualId(getHistManualId());
		standardsHistoricalManualImpl.setChange(getChange());
		standardsHistoricalManualImpl.setTitle(getTitle());
		standardsHistoricalManualImpl.setCreatorId(getCreatorId());
		standardsHistoricalManualImpl.setCreatedDate(getCreatedDate());
		standardsHistoricalManualImpl.setUpdatedBy(getUpdatedBy());
		standardsHistoricalManualImpl.setUpdatedDate(getUpdatedDate());

		standardsHistoricalManualImpl.resetOriginalValues();

		return standardsHistoricalManualImpl;
	}

	@Override
	public int compareTo(StandardsHistoricalManual standardsHistoricalManual) {
		long primaryKey = standardsHistoricalManual.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsHistoricalManual)) {
			return false;
		}

		StandardsHistoricalManual standardsHistoricalManual = (StandardsHistoricalManual)obj;

		long primaryKey = standardsHistoricalManual.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StandardsHistoricalManualModelImpl standardsHistoricalManualModelImpl = this;

		standardsHistoricalManualModelImpl._originalStdId = standardsHistoricalManualModelImpl._stdId;

		standardsHistoricalManualModelImpl._setOriginalStdId = false;

		standardsHistoricalManualModelImpl._originalHistManualId = standardsHistoricalManualModelImpl._histManualId;

		standardsHistoricalManualModelImpl._setOriginalHistManualId = false;

		standardsHistoricalManualModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsHistoricalManual> toCacheModel() {
		StandardsHistoricalManualCacheModel standardsHistoricalManualCacheModel = new StandardsHistoricalManualCacheModel();

		standardsHistoricalManualCacheModel.stdMnlId = getStdMnlId();

		standardsHistoricalManualCacheModel.stdId = getStdId();

		standardsHistoricalManualCacheModel.histManualId = getHistManualId();

		standardsHistoricalManualCacheModel.change = getChange();

		String change = standardsHistoricalManualCacheModel.change;

		if ((change != null) && (change.length() == 0)) {
			standardsHistoricalManualCacheModel.change = null;
		}

		standardsHistoricalManualCacheModel.title = getTitle();

		String title = standardsHistoricalManualCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			standardsHistoricalManualCacheModel.title = null;
		}

		standardsHistoricalManualCacheModel.creatorId = getCreatorId();

		String creatorId = standardsHistoricalManualCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsHistoricalManualCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsHistoricalManualCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsHistoricalManualCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsHistoricalManualCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsHistoricalManualCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsHistoricalManualCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsHistoricalManualCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsHistoricalManualCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsHistoricalManualCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{stdMnlId=");
		sb.append(getStdMnlId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", histManualId=");
		sb.append(getHistManualId());
		sb.append(", change=");
		sb.append(getChange());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsHistoricalManual");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdMnlId</column-name><column-value><![CDATA[");
		sb.append(getStdMnlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>histManualId</column-name><column-value><![CDATA[");
		sb.append(getHistManualId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>change</column-name><column-value><![CDATA[");
		sb.append(getChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsHistoricalManual.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsHistoricalManual.class
		};
	private long _stdMnlId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private long _histManualId;
	private long _originalHistManualId;
	private boolean _setOriginalHistManualId;
	private String _change;
	private String _title;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsHistoricalManual _escapedModel;
}