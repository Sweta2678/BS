/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMRole;
import com.ihg.brandstandards.db.model.GEMRoleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMRole service. Represents a row in the &quot;GEM_GRP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMRoleImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMRoleImpl
 * @see com.ihg.brandstandards.db.model.GEMRole
 * @see com.ihg.brandstandards.db.model.GEMRoleModel
 * @generated
 */
public class GEMRoleModelImpl extends BaseModelImpl<GEMRole>
	implements GEMRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m role model instance should use the {@link com.ihg.brandstandards.db.model.GEMRole} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_GRP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_GRP_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "CHAIN_CD", Types.VARCHAR },
			{ "GEM_GRP_CD", Types.VARCHAR },
			{ "OWNER_GRP_ID", Types.VARCHAR },
			{ "OWNER_GRP_NM", Types.VARCHAR },
			{ "BUS_OWNER_NM", Types.VARCHAR },
			{ "DELEGATE_1_NM", Types.VARCHAR },
			{ "DELEGATE_2_NM", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_GRP (GEM_GRP_ID LONG not null primary key,RGN_ID LONG,CHAIN_CD VARCHAR(75) null,GEM_GRP_CD VARCHAR(75) null,OWNER_GRP_ID VARCHAR(75) null,OWNER_GRP_NM VARCHAR(75) null,BUS_OWNER_NM VARCHAR(75) null,DELEGATE_1_NM VARCHAR(75) null,DELEGATE_2_NM VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_GRP";
	public static final String ORDER_BY_JPQL = " ORDER BY gemRole.ownerGrpName ASC, gemRole.gemGrpCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_GRP.OWNER_GRP_NM ASC, GEM_GRP.GEM_GRP_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.GEMRole"),
			true);
	public static long GEMGRPCODE_COLUMN_BITMASK = 1L;
	public static long OWNERGRPNAME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMRole"));

	public GEMRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _gemGrpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGemGrpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _gemGrpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMRole.class;
	}

	@Override
	public String getModelClassName() {
		return GEMRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("gemGrpId", getGemGrpId());
		attributes.put("regionId", getRegionId());
		attributes.put("chainCode", getChainCode());
		attributes.put("gemGrpCode", getGemGrpCode());
		attributes.put("ownerGrpId", getOwnerGrpId());
		attributes.put("ownerGrpName", getOwnerGrpName());
		attributes.put("busOwnerName", getBusOwnerName());
		attributes.put("deligate1Name", getDeligate1Name());
		attributes.put("deligate2Name", getDeligate2Name());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long gemGrpId = (Long)attributes.get("gemGrpId");

		if (gemGrpId != null) {
			setGemGrpId(gemGrpId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String chainCode = (String)attributes.get("chainCode");

		if (chainCode != null) {
			setChainCode(chainCode);
		}

		String gemGrpCode = (String)attributes.get("gemGrpCode");

		if (gemGrpCode != null) {
			setGemGrpCode(gemGrpCode);
		}

		String ownerGrpId = (String)attributes.get("ownerGrpId");

		if (ownerGrpId != null) {
			setOwnerGrpId(ownerGrpId);
		}

		String ownerGrpName = (String)attributes.get("ownerGrpName");

		if (ownerGrpName != null) {
			setOwnerGrpName(ownerGrpName);
		}

		String busOwnerName = (String)attributes.get("busOwnerName");

		if (busOwnerName != null) {
			setBusOwnerName(busOwnerName);
		}

		String deligate1Name = (String)attributes.get("deligate1Name");

		if (deligate1Name != null) {
			setDeligate1Name(deligate1Name);
		}

		String deligate2Name = (String)attributes.get("deligate2Name");

		if (deligate2Name != null) {
			setDeligate2Name(deligate2Name);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getGemGrpId() {
		return _gemGrpId;
	}

	@Override
	public void setGemGrpId(long gemGrpId) {
		_gemGrpId = gemGrpId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public String getChainCode() {
		if (_chainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chainCode;
		}
	}

	@Override
	public void setChainCode(String chainCode) {
		_chainCode = chainCode;
	}

	@Override
	public String getGemGrpCode() {
		if (_gemGrpCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _gemGrpCode;
		}
	}

	@Override
	public void setGemGrpCode(String gemGrpCode) {
		_columnBitmask = -1L;

		if (_originalGemGrpCode == null) {
			_originalGemGrpCode = _gemGrpCode;
		}

		_gemGrpCode = gemGrpCode;
	}

	public String getOriginalGemGrpCode() {
		return GetterUtil.getString(_originalGemGrpCode);
	}

	@Override
	public String getOwnerGrpId() {
		if (_ownerGrpId == null) {
			return StringPool.BLANK;
		}
		else {
			return _ownerGrpId;
		}
	}

	@Override
	public void setOwnerGrpId(String ownerGrpId) {
		_ownerGrpId = ownerGrpId;
	}

	@Override
	public String getOwnerGrpName() {
		if (_ownerGrpName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ownerGrpName;
		}
	}

	@Override
	public void setOwnerGrpName(String ownerGrpName) {
		_columnBitmask = -1L;

		_ownerGrpName = ownerGrpName;
	}

	@Override
	public String getBusOwnerName() {
		if (_busOwnerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _busOwnerName;
		}
	}

	@Override
	public void setBusOwnerName(String busOwnerName) {
		_busOwnerName = busOwnerName;
	}

	@Override
	public String getDeligate1Name() {
		if (_deligate1Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _deligate1Name;
		}
	}

	@Override
	public void setDeligate1Name(String deligate1Name) {
		_deligate1Name = deligate1Name;
	}

	@Override
	public String getDeligate2Name() {
		if (_deligate2Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _deligate2Name;
		}
	}

	@Override
	public void setDeligate2Name(String deligate2Name) {
		_deligate2Name = deligate2Name;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMRoleImpl gemRoleImpl = new GEMRoleImpl();

		gemRoleImpl.setGemGrpId(getGemGrpId());
		gemRoleImpl.setRegionId(getRegionId());
		gemRoleImpl.setChainCode(getChainCode());
		gemRoleImpl.setGemGrpCode(getGemGrpCode());
		gemRoleImpl.setOwnerGrpId(getOwnerGrpId());
		gemRoleImpl.setOwnerGrpName(getOwnerGrpName());
		gemRoleImpl.setBusOwnerName(getBusOwnerName());
		gemRoleImpl.setDeligate1Name(getDeligate1Name());
		gemRoleImpl.setDeligate2Name(getDeligate2Name());
		gemRoleImpl.setCreatorId(getCreatorId());
		gemRoleImpl.setCreatedDate(getCreatedDate());
		gemRoleImpl.setUpdatedBy(getUpdatedBy());
		gemRoleImpl.setUpdatedDate(getUpdatedDate());

		gemRoleImpl.resetOriginalValues();

		return gemRoleImpl;
	}

	@Override
	public int compareTo(GEMRole gemRole) {
		int value = 0;

		value = getOwnerGrpName().compareTo(gemRole.getOwnerGrpName());

		if (value != 0) {
			return value;
		}

		value = getGemGrpCode().compareTo(gemRole.getGemGrpCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMRole)) {
			return false;
		}

		GEMRole gemRole = (GEMRole)obj;

		long primaryKey = gemRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GEMRoleModelImpl gemRoleModelImpl = this;

		gemRoleModelImpl._originalGemGrpCode = gemRoleModelImpl._gemGrpCode;

		gemRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GEMRole> toCacheModel() {
		GEMRoleCacheModel gemRoleCacheModel = new GEMRoleCacheModel();

		gemRoleCacheModel.gemGrpId = getGemGrpId();

		gemRoleCacheModel.regionId = getRegionId();

		gemRoleCacheModel.chainCode = getChainCode();

		String chainCode = gemRoleCacheModel.chainCode;

		if ((chainCode != null) && (chainCode.length() == 0)) {
			gemRoleCacheModel.chainCode = null;
		}

		gemRoleCacheModel.gemGrpCode = getGemGrpCode();

		String gemGrpCode = gemRoleCacheModel.gemGrpCode;

		if ((gemGrpCode != null) && (gemGrpCode.length() == 0)) {
			gemRoleCacheModel.gemGrpCode = null;
		}

		gemRoleCacheModel.ownerGrpId = getOwnerGrpId();

		String ownerGrpId = gemRoleCacheModel.ownerGrpId;

		if ((ownerGrpId != null) && (ownerGrpId.length() == 0)) {
			gemRoleCacheModel.ownerGrpId = null;
		}

		gemRoleCacheModel.ownerGrpName = getOwnerGrpName();

		String ownerGrpName = gemRoleCacheModel.ownerGrpName;

		if ((ownerGrpName != null) && (ownerGrpName.length() == 0)) {
			gemRoleCacheModel.ownerGrpName = null;
		}

		gemRoleCacheModel.busOwnerName = getBusOwnerName();

		String busOwnerName = gemRoleCacheModel.busOwnerName;

		if ((busOwnerName != null) && (busOwnerName.length() == 0)) {
			gemRoleCacheModel.busOwnerName = null;
		}

		gemRoleCacheModel.deligate1Name = getDeligate1Name();

		String deligate1Name = gemRoleCacheModel.deligate1Name;

		if ((deligate1Name != null) && (deligate1Name.length() == 0)) {
			gemRoleCacheModel.deligate1Name = null;
		}

		gemRoleCacheModel.deligate2Name = getDeligate2Name();

		String deligate2Name = gemRoleCacheModel.deligate2Name;

		if ((deligate2Name != null) && (deligate2Name.length() == 0)) {
			gemRoleCacheModel.deligate2Name = null;
		}

		gemRoleCacheModel.creatorId = getCreatorId();

		String creatorId = gemRoleCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemRoleCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemRoleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemRoleCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemRoleCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemRoleCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemRoleCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemRoleCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemRoleCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{gemGrpId=");
		sb.append(getGemGrpId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", chainCode=");
		sb.append(getChainCode());
		sb.append(", gemGrpCode=");
		sb.append(getGemGrpCode());
		sb.append(", ownerGrpId=");
		sb.append(getOwnerGrpId());
		sb.append(", ownerGrpName=");
		sb.append(getOwnerGrpName());
		sb.append(", busOwnerName=");
		sb.append(getBusOwnerName());
		sb.append(", deligate1Name=");
		sb.append(getDeligate1Name());
		sb.append(", deligate2Name=");
		sb.append(getDeligate2Name());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>gemGrpId</column-name><column-value><![CDATA[");
		sb.append(getGemGrpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chainCode</column-name><column-value><![CDATA[");
		sb.append(getChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gemGrpCode</column-name><column-value><![CDATA[");
		sb.append(getGemGrpCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerGrpId</column-name><column-value><![CDATA[");
		sb.append(getOwnerGrpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerGrpName</column-name><column-value><![CDATA[");
		sb.append(getOwnerGrpName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>busOwnerName</column-name><column-value><![CDATA[");
		sb.append(getBusOwnerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deligate1Name</column-name><column-value><![CDATA[");
		sb.append(getDeligate1Name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deligate2Name</column-name><column-value><![CDATA[");
		sb.append(getDeligate2Name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMRole.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMRole.class
		};
	private long _gemGrpId;
	private long _regionId;
	private String _chainCode;
	private String _gemGrpCode;
	private String _originalGemGrpCode;
	private String _ownerGrpId;
	private String _ownerGrpName;
	private String _busOwnerName;
	private String _deligate1Name;
	private String _deligate2Name;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private GEMRole _escapedModel;
}