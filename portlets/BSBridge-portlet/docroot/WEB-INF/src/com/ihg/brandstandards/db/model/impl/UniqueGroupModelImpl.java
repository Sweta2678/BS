/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.UniqueGroup;
import com.ihg.brandstandards.db.model.UniqueGroupModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UniqueGroup service. Represents a row in the &quot;UNIQUE_GRP&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.UniqueGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UniqueGroupImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see UniqueGroupImpl
 * @see com.ihg.brandstandards.db.model.UniqueGroup
 * @see com.ihg.brandstandards.db.model.UniqueGroupModel
 * @generated
 */
public class UniqueGroupModelImpl extends BaseModelImpl<UniqueGroup>
	implements UniqueGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a unique group model instance should use the {@link com.ihg.brandstandards.db.model.UniqueGroup} interface instead.
	 */
	public static final String TABLE_NAME = "UNIQUE_GRP";
	public static final Object[][] TABLE_COLUMNS = {
			{ "UNIQUE_GRP_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "GRP_NM", Types.VARCHAR },
			{ "RGN_ID", Types.BIGINT },
			{ "UNIQUE_GRP_TYP_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table UNIQUE_GRP (UNIQUE_GRP_ID LONG not null primary key,PUBLISH_ID LONG,GRP_NM VARCHAR(75) null,RGN_ID LONG,UNIQUE_GRP_TYP_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table UNIQUE_GRP";
	public static final String ORDER_BY_JPQL = " ORDER BY uniqueGroup.uniqueGroupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UNIQUE_GRP.UNIQUE_GRP_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.UniqueGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.UniqueGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.UniqueGroup"),
			true);
	public static long PUBLISHID_COLUMN_BITMASK = 1L;
	public static long REGIONID_COLUMN_BITMASK = 2L;
	public static long UNIQUEGROUPID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.UniqueGroup"));

	public UniqueGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uniqueGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUniqueGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uniqueGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UniqueGroup.class;
	}

	@Override
	public String getModelClassName() {
		return UniqueGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uniqueGroupId", getUniqueGroupId());
		attributes.put("publishId", getPublishId());
		attributes.put("groupName", getGroupName());
		attributes.put("regionId", getRegionId());
		attributes.put("groupType", getGroupType());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long uniqueGroupId = (Long)attributes.get("uniqueGroupId");

		if (uniqueGroupId != null) {
			setUniqueGroupId(uniqueGroupId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		String groupName = (String)attributes.get("groupName");

		if (groupName != null) {
			setGroupName(groupName);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String groupType = (String)attributes.get("groupType");

		if (groupType != null) {
			setGroupType(groupType);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getUniqueGroupId() {
		return _uniqueGroupId;
	}

	@Override
	public void setUniqueGroupId(long uniqueGroupId) {
		_uniqueGroupId = uniqueGroupId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_groupName = groupName;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getGroupType() {
		if (_groupType == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupType;
		}
	}

	@Override
	public void setGroupType(String groupType) {
		_groupType = groupType;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UniqueGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UniqueGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UniqueGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UniqueGroupImpl uniqueGroupImpl = new UniqueGroupImpl();

		uniqueGroupImpl.setUniqueGroupId(getUniqueGroupId());
		uniqueGroupImpl.setPublishId(getPublishId());
		uniqueGroupImpl.setGroupName(getGroupName());
		uniqueGroupImpl.setRegionId(getRegionId());
		uniqueGroupImpl.setGroupType(getGroupType());
		uniqueGroupImpl.setCreatorId(getCreatorId());
		uniqueGroupImpl.setCreatedDate(getCreatedDate());
		uniqueGroupImpl.setUpdatedBy(getUpdatedBy());
		uniqueGroupImpl.setUpdatedDate(getUpdatedDate());

		uniqueGroupImpl.resetOriginalValues();

		return uniqueGroupImpl;
	}

	@Override
	public int compareTo(UniqueGroup uniqueGroup) {
		long primaryKey = uniqueGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UniqueGroup)) {
			return false;
		}

		UniqueGroup uniqueGroup = (UniqueGroup)obj;

		long primaryKey = uniqueGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UniqueGroupModelImpl uniqueGroupModelImpl = this;

		uniqueGroupModelImpl._originalPublishId = uniqueGroupModelImpl._publishId;

		uniqueGroupModelImpl._setOriginalPublishId = false;

		uniqueGroupModelImpl._originalRegionId = uniqueGroupModelImpl._regionId;

		uniqueGroupModelImpl._setOriginalRegionId = false;

		uniqueGroupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UniqueGroup> toCacheModel() {
		UniqueGroupCacheModel uniqueGroupCacheModel = new UniqueGroupCacheModel();

		uniqueGroupCacheModel.uniqueGroupId = getUniqueGroupId();

		uniqueGroupCacheModel.publishId = getPublishId();

		uniqueGroupCacheModel.groupName = getGroupName();

		String groupName = uniqueGroupCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			uniqueGroupCacheModel.groupName = null;
		}

		uniqueGroupCacheModel.regionId = getRegionId();

		uniqueGroupCacheModel.groupType = getGroupType();

		String groupType = uniqueGroupCacheModel.groupType;

		if ((groupType != null) && (groupType.length() == 0)) {
			uniqueGroupCacheModel.groupType = null;
		}

		uniqueGroupCacheModel.creatorId = getCreatorId();

		String creatorId = uniqueGroupCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			uniqueGroupCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			uniqueGroupCacheModel.createdDate = createdDate.getTime();
		}
		else {
			uniqueGroupCacheModel.createdDate = Long.MIN_VALUE;
		}

		uniqueGroupCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = uniqueGroupCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			uniqueGroupCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			uniqueGroupCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			uniqueGroupCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return uniqueGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uniqueGroupId=");
		sb.append(getUniqueGroupId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", groupName=");
		sb.append(getGroupName());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", groupType=");
		sb.append(getGroupType());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.UniqueGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uniqueGroupId</column-name><column-value><![CDATA[");
		sb.append(getUniqueGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupName</column-name><column-value><![CDATA[");
		sb.append(getGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupType</column-name><column-value><![CDATA[");
		sb.append(getGroupType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UniqueGroup.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UniqueGroup.class
		};
	private long _uniqueGroupId;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private String _groupName;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _groupType;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private UniqueGroup _escapedModel;
}