/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMChainMeasurement;
import com.ihg.brandstandards.db.model.GEMChainMeasurementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMChainMeasurement service. Represents a row in the &quot;GEM_CHAIN_MSRMNT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMChainMeasurementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMChainMeasurementImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMChainMeasurementImpl
 * @see com.ihg.brandstandards.db.model.GEMChainMeasurement
 * @see com.ihg.brandstandards.db.model.GEMChainMeasurementModel
 * @generated
 */
public class GEMChainMeasurementModelImpl extends BaseModelImpl<GEMChainMeasurement>
	implements GEMChainMeasurementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m chain measurement model instance should use the {@link com.ihg.brandstandards.db.model.GEMChainMeasurement} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_CHAIN_MSRMNT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_CHAIN_MSRMNT_ID", Types.BIGINT },
			{ "GEM_MSRMNT_ID", Types.BIGINT },
			{ "GEM_PUBLISH_DEPT_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "GEM_UNIQUE_GRP_ID", Types.BIGINT },
			{ "MSRMNT_ITEM_QTY", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_CHAIN_MSRMNT (GEM_CHAIN_MSRMNT_ID LONG not null primary key,GEM_MSRMNT_ID LONG,GEM_PUBLISH_DEPT_ID LONG,PUBLISH_ID LONG,RGN_ID LONG,GEM_UNIQUE_GRP_ID LONG,MSRMNT_ITEM_QTY LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_CHAIN_MSRMNT";
	public static final String ORDER_BY_JPQL = " ORDER BY gemChainMeasurement.chainMeasurementId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_CHAIN_MSRMNT.GEM_CHAIN_MSRMNT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMChainMeasurement"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMChainMeasurement"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMChainMeasurement"));

	public GEMChainMeasurementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _chainMeasurementId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChainMeasurementId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _chainMeasurementId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMChainMeasurement.class;
	}

	@Override
	public String getModelClassName() {
		return GEMChainMeasurement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("chainMeasurementId", getChainMeasurementId());
		attributes.put("measurementId", getMeasurementId());
		attributes.put("publishDeptId", getPublishDeptId());
		attributes.put("publishId", getPublishId());
		attributes.put("regionId", getRegionId());
		attributes.put("uniqueGroupId", getUniqueGroupId());
		attributes.put("measurementItemCount", getMeasurementItemCount());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long chainMeasurementId = (Long)attributes.get("chainMeasurementId");

		if (chainMeasurementId != null) {
			setChainMeasurementId(chainMeasurementId);
		}

		Long measurementId = (Long)attributes.get("measurementId");

		if (measurementId != null) {
			setMeasurementId(measurementId);
		}

		Long publishDeptId = (Long)attributes.get("publishDeptId");

		if (publishDeptId != null) {
			setPublishDeptId(publishDeptId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		Long uniqueGroupId = (Long)attributes.get("uniqueGroupId");

		if (uniqueGroupId != null) {
			setUniqueGroupId(uniqueGroupId);
		}

		Long measurementItemCount = (Long)attributes.get("measurementItemCount");

		if (measurementItemCount != null) {
			setMeasurementItemCount(measurementItemCount);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getChainMeasurementId() {
		return _chainMeasurementId;
	}

	@Override
	public void setChainMeasurementId(long chainMeasurementId) {
		_chainMeasurementId = chainMeasurementId;
	}

	@Override
	public long getMeasurementId() {
		return _measurementId;
	}

	@Override
	public void setMeasurementId(long measurementId) {
		_measurementId = measurementId;
	}

	@Override
	public long getPublishDeptId() {
		return _publishDeptId;
	}

	@Override
	public void setPublishDeptId(long publishDeptId) {
		_publishDeptId = publishDeptId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_publishId = publishId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public long getUniqueGroupId() {
		return _uniqueGroupId;
	}

	@Override
	public void setUniqueGroupId(long uniqueGroupId) {
		_uniqueGroupId = uniqueGroupId;
	}

	@Override
	public long getMeasurementItemCount() {
		return _measurementItemCount;
	}

	@Override
	public void setMeasurementItemCount(long measurementItemCount) {
		_measurementItemCount = measurementItemCount;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMChainMeasurement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMChainMeasurement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMChainMeasurement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMChainMeasurementImpl gemChainMeasurementImpl = new GEMChainMeasurementImpl();

		gemChainMeasurementImpl.setChainMeasurementId(getChainMeasurementId());
		gemChainMeasurementImpl.setMeasurementId(getMeasurementId());
		gemChainMeasurementImpl.setPublishDeptId(getPublishDeptId());
		gemChainMeasurementImpl.setPublishId(getPublishId());
		gemChainMeasurementImpl.setRegionId(getRegionId());
		gemChainMeasurementImpl.setUniqueGroupId(getUniqueGroupId());
		gemChainMeasurementImpl.setMeasurementItemCount(getMeasurementItemCount());
		gemChainMeasurementImpl.setCreatorId(getCreatorId());
		gemChainMeasurementImpl.setCreatedDate(getCreatedDate());
		gemChainMeasurementImpl.setUpdatedBy(getUpdatedBy());
		gemChainMeasurementImpl.setUpdatedDate(getUpdatedDate());

		gemChainMeasurementImpl.resetOriginalValues();

		return gemChainMeasurementImpl;
	}

	@Override
	public int compareTo(GEMChainMeasurement gemChainMeasurement) {
		long primaryKey = gemChainMeasurement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMChainMeasurement)) {
			return false;
		}

		GEMChainMeasurement gemChainMeasurement = (GEMChainMeasurement)obj;

		long primaryKey = gemChainMeasurement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMChainMeasurement> toCacheModel() {
		GEMChainMeasurementCacheModel gemChainMeasurementCacheModel = new GEMChainMeasurementCacheModel();

		gemChainMeasurementCacheModel.chainMeasurementId = getChainMeasurementId();

		gemChainMeasurementCacheModel.measurementId = getMeasurementId();

		gemChainMeasurementCacheModel.publishDeptId = getPublishDeptId();

		gemChainMeasurementCacheModel.publishId = getPublishId();

		gemChainMeasurementCacheModel.regionId = getRegionId();

		gemChainMeasurementCacheModel.uniqueGroupId = getUniqueGroupId();

		gemChainMeasurementCacheModel.measurementItemCount = getMeasurementItemCount();

		gemChainMeasurementCacheModel.creatorId = getCreatorId();

		String creatorId = gemChainMeasurementCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemChainMeasurementCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemChainMeasurementCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemChainMeasurementCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemChainMeasurementCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemChainMeasurementCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemChainMeasurementCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemChainMeasurementCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemChainMeasurementCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemChainMeasurementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{chainMeasurementId=");
		sb.append(getChainMeasurementId());
		sb.append(", measurementId=");
		sb.append(getMeasurementId());
		sb.append(", publishDeptId=");
		sb.append(getPublishDeptId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", uniqueGroupId=");
		sb.append(getUniqueGroupId());
		sb.append(", measurementItemCount=");
		sb.append(getMeasurementItemCount());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMChainMeasurement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>chainMeasurementId</column-name><column-value><![CDATA[");
		sb.append(getChainMeasurementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>measurementId</column-name><column-value><![CDATA[");
		sb.append(getMeasurementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDeptId</column-name><column-value><![CDATA[");
		sb.append(getPublishDeptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uniqueGroupId</column-name><column-value><![CDATA[");
		sb.append(getUniqueGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>measurementItemCount</column-name><column-value><![CDATA[");
		sb.append(getMeasurementItemCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMChainMeasurement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMChainMeasurement.class
		};
	private long _chainMeasurementId;
	private long _measurementId;
	private long _publishDeptId;
	private long _publishId;
	private long _regionId;
	private long _uniqueGroupId;
	private long _measurementItemCount;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMChainMeasurement _escapedModel;
}