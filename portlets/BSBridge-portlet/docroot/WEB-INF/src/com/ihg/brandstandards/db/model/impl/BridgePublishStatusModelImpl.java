/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgePublishStatus;
import com.ihg.brandstandards.db.model.BridgePublishStatusModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgePublishStatus service. Represents a row in the &quot;BRIDGE_PUBLISH_STAT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgePublishStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgePublishStatusImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgePublishStatusImpl
 * @see com.ihg.brandstandards.db.model.BridgePublishStatus
 * @see com.ihg.brandstandards.db.model.BridgePublishStatusModel
 * @generated
 */
public class BridgePublishStatusModelImpl extends BaseModelImpl<BridgePublishStatus>
	implements BridgePublishStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge publish status model instance should use the {@link com.ihg.brandstandards.db.model.BridgePublishStatus} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH_STAT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUBLISH_STAT_CD", Types.VARCHAR },
			{ "BRIDGE_PUBLISH_STAT_NM", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH_STAT (BRIDGE_PUBLISH_STAT_CD VARCHAR(75) not null primary key,BRIDGE_PUBLISH_STAT_NM VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH_STAT";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgePublishStatus.publishStatusCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH_STAT.BRIDGE_PUBLISH_STAT_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgePublishStatus"));

	public BridgePublishStatusModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _publishStatusCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPublishStatusCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishStatusCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return BridgePublishStatus.class;
	}

	@Override
	public String getModelClassName() {
		return BridgePublishStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishStatusCode", getPublishStatusCode());
		attributes.put("publishStatusName", getPublishStatusName());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String publishStatusCode = (String)attributes.get("publishStatusCode");

		if (publishStatusCode != null) {
			setPublishStatusCode(publishStatusCode);
		}

		String publishStatusName = (String)attributes.get("publishStatusName");

		if (publishStatusName != null) {
			setPublishStatusName(publishStatusName);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public String getPublishStatusCode() {
		if (_publishStatusCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishStatusCode;
		}
	}

	@Override
	public void setPublishStatusCode(String publishStatusCode) {
		_publishStatusCode = publishStatusCode;
	}

	@Override
	public String getPublishStatusName() {
		if (_publishStatusName == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishStatusName;
		}
	}

	@Override
	public void setPublishStatusName(String publishStatusName) {
		_publishStatusName = publishStatusName;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public BridgePublishStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgePublishStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgePublishStatusImpl bridgePublishStatusImpl = new BridgePublishStatusImpl();

		bridgePublishStatusImpl.setPublishStatusCode(getPublishStatusCode());
		bridgePublishStatusImpl.setPublishStatusName(getPublishStatusName());
		bridgePublishStatusImpl.setCreatorId(getCreatorId());
		bridgePublishStatusImpl.setCreatedDate(getCreatedDate());
		bridgePublishStatusImpl.setUpdatedBy(getUpdatedBy());
		bridgePublishStatusImpl.setUpdatedDate(getUpdatedDate());

		bridgePublishStatusImpl.resetOriginalValues();

		return bridgePublishStatusImpl;
	}

	@Override
	public int compareTo(BridgePublishStatus bridgePublishStatus) {
		int value = 0;

		value = getPublishStatusCode()
					.compareTo(bridgePublishStatus.getPublishStatusCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgePublishStatus)) {
			return false;
		}

		BridgePublishStatus bridgePublishStatus = (BridgePublishStatus)obj;

		String primaryKey = bridgePublishStatus.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BridgePublishStatus> toCacheModel() {
		BridgePublishStatusCacheModel bridgePublishStatusCacheModel = new BridgePublishStatusCacheModel();

		bridgePublishStatusCacheModel.publishStatusCode = getPublishStatusCode();

		String publishStatusCode = bridgePublishStatusCacheModel.publishStatusCode;

		if ((publishStatusCode != null) && (publishStatusCode.length() == 0)) {
			bridgePublishStatusCacheModel.publishStatusCode = null;
		}

		bridgePublishStatusCacheModel.publishStatusName = getPublishStatusName();

		String publishStatusName = bridgePublishStatusCacheModel.publishStatusName;

		if ((publishStatusName != null) && (publishStatusName.length() == 0)) {
			bridgePublishStatusCacheModel.publishStatusName = null;
		}

		bridgePublishStatusCacheModel.creatorId = getCreatorId();

		String creatorId = bridgePublishStatusCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			bridgePublishStatusCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bridgePublishStatusCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bridgePublishStatusCacheModel.createdDate = Long.MIN_VALUE;
		}

		bridgePublishStatusCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bridgePublishStatusCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bridgePublishStatusCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			bridgePublishStatusCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			bridgePublishStatusCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return bridgePublishStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{publishStatusCode=");
		sb.append(getPublishStatusCode());
		sb.append(", publishStatusName=");
		sb.append(getPublishStatusName());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgePublishStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishStatusCode</column-name><column-value><![CDATA[");
		sb.append(getPublishStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishStatusName</column-name><column-value><![CDATA[");
		sb.append(getPublishStatusName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgePublishStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgePublishStatus.class
		};
	private String _publishStatusCode;
	private String _publishStatusName;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private BridgePublishStatus _escapedModel;
}