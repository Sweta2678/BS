/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsRegionLocale;
import com.ihg.brandstandards.db.model.StandardsRegionLocaleModel;
import com.ihg.brandstandards.db.service.persistence.StandardsRegionLocalePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsRegionLocale service. Represents a row in the &quot;BRNDSTND_RGN_LOCALE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsRegionLocaleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsRegionLocaleImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsRegionLocaleImpl
 * @see com.ihg.brandstandards.db.model.StandardsRegionLocale
 * @see com.ihg.brandstandards.db.model.StandardsRegionLocaleModel
 * @generated
 */
public class StandardsRegionLocaleModelImpl extends BaseModelImpl<StandardsRegionLocale>
	implements StandardsRegionLocaleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards region locale model instance should use the {@link com.ihg.brandstandards.db.model.StandardsRegionLocale} interface instead.
	 */
	public static final String TABLE_NAME = "BRNDSTND_RGN_LOCALE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "RGN_ID", Types.BIGINT },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "DFLT_LANG_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRNDSTND_RGN_LOCALE (RGN_ID LONG not null,LOCALE_CD VARCHAR(75) not null,DFLT_LANG_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (RGN_ID, LOCALE_CD))";
	public static final String TABLE_SQL_DROP = "drop table BRNDSTND_RGN_LOCALE";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsRegionLocale.id.regionId ASC, standardsRegionLocale.id.localeCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRNDSTND_RGN_LOCALE.RGN_ID ASC, BRNDSTND_RGN_LOCALE.LOCALE_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsRegionLocale"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsRegionLocale"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsRegionLocale"),
			true);
	public static long ISDEFAULT_COLUMN_BITMASK = 1L;
	public static long LOCALECODE_COLUMN_BITMASK = 2L;
	public static long REGIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsRegionLocale"));

	public StandardsRegionLocaleModelImpl() {
	}

	@Override
	public StandardsRegionLocalePK getPrimaryKey() {
		return new StandardsRegionLocalePK(_regionId, _localeCode);
	}

	@Override
	public void setPrimaryKey(StandardsRegionLocalePK primaryKey) {
		setRegionId(primaryKey.regionId);
		setLocaleCode(primaryKey.localeCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StandardsRegionLocalePK(_regionId, _localeCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StandardsRegionLocalePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsRegionLocale.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsRegionLocale.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("regionId", getRegionId());
		attributes.put("localeCode", getLocaleCode());
		attributes.put("isDefault", getIsDefault());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		String isDefault = (String)attributes.get("isDefault");

		if (isDefault != null) {
			setIsDefault(isDefault);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_columnBitmask |= LOCALECODE_COLUMN_BITMASK;

		if (_originalLocaleCode == null) {
			_originalLocaleCode = _localeCode;
		}

		_localeCode = localeCode;
	}

	public String getOriginalLocaleCode() {
		return GetterUtil.getString(_originalLocaleCode);
	}

	@Override
	public String getIsDefault() {
		if (_isDefault == null) {
			return StringPool.BLANK;
		}
		else {
			return _isDefault;
		}
	}

	@Override
	public void setIsDefault(String isDefault) {
		_columnBitmask |= ISDEFAULT_COLUMN_BITMASK;

		if (_originalIsDefault == null) {
			_originalIsDefault = _isDefault;
		}

		_isDefault = isDefault;
	}

	public String getOriginalIsDefault() {
		return GetterUtil.getString(_originalIsDefault);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsRegionLocale toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsRegionLocale)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsRegionLocaleImpl standardsRegionLocaleImpl = new StandardsRegionLocaleImpl();

		standardsRegionLocaleImpl.setRegionId(getRegionId());
		standardsRegionLocaleImpl.setLocaleCode(getLocaleCode());
		standardsRegionLocaleImpl.setIsDefault(getIsDefault());
		standardsRegionLocaleImpl.setCreatorId(getCreatorId());
		standardsRegionLocaleImpl.setCreatedDate(getCreatedDate());
		standardsRegionLocaleImpl.setUpdatedBy(getUpdatedBy());
		standardsRegionLocaleImpl.setUpdatedDate(getUpdatedDate());

		standardsRegionLocaleImpl.resetOriginalValues();

		return standardsRegionLocaleImpl;
	}

	@Override
	public int compareTo(StandardsRegionLocale standardsRegionLocale) {
		StandardsRegionLocalePK primaryKey = standardsRegionLocale.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsRegionLocale)) {
			return false;
		}

		StandardsRegionLocale standardsRegionLocale = (StandardsRegionLocale)obj;

		StandardsRegionLocalePK primaryKey = standardsRegionLocale.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsRegionLocaleModelImpl standardsRegionLocaleModelImpl = this;

		standardsRegionLocaleModelImpl._originalRegionId = standardsRegionLocaleModelImpl._regionId;

		standardsRegionLocaleModelImpl._setOriginalRegionId = false;

		standardsRegionLocaleModelImpl._originalLocaleCode = standardsRegionLocaleModelImpl._localeCode;

		standardsRegionLocaleModelImpl._originalIsDefault = standardsRegionLocaleModelImpl._isDefault;

		standardsRegionLocaleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsRegionLocale> toCacheModel() {
		StandardsRegionLocaleCacheModel standardsRegionLocaleCacheModel = new StandardsRegionLocaleCacheModel();

		standardsRegionLocaleCacheModel.regionId = getRegionId();

		standardsRegionLocaleCacheModel.localeCode = getLocaleCode();

		String localeCode = standardsRegionLocaleCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			standardsRegionLocaleCacheModel.localeCode = null;
		}

		standardsRegionLocaleCacheModel.isDefault = getIsDefault();

		String isDefault = standardsRegionLocaleCacheModel.isDefault;

		if ((isDefault != null) && (isDefault.length() == 0)) {
			standardsRegionLocaleCacheModel.isDefault = null;
		}

		standardsRegionLocaleCacheModel.creatorId = getCreatorId();

		String creatorId = standardsRegionLocaleCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsRegionLocaleCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsRegionLocaleCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsRegionLocaleCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsRegionLocaleCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsRegionLocaleCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsRegionLocaleCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsRegionLocaleCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsRegionLocaleCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsRegionLocaleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{regionId=");
		sb.append(getRegionId());
		sb.append(", localeCode=");
		sb.append(getLocaleCode());
		sb.append(", isDefault=");
		sb.append(getIsDefault());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsRegionLocale");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDefault</column-name><column-value><![CDATA[");
		sb.append(getIsDefault());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsRegionLocale.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsRegionLocale.class
		};
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _localeCode;
	private String _originalLocaleCode;
	private String _isDefault;
	private String _originalIsDefault;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsRegionLocale _escapedModel;
}