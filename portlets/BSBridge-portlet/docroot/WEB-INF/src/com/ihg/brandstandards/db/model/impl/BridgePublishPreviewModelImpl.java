/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgePublishPreview;
import com.ihg.brandstandards.db.model.BridgePublishPreviewModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgePublishPreview service. Represents a row in the &quot;BRIDGE_PUBLISH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgePublishPreviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgePublishPreviewImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgePublishPreviewImpl
 * @see com.ihg.brandstandards.db.model.BridgePublishPreview
 * @see com.ihg.brandstandards.db.model.BridgePublishPreviewModel
 * @generated
 */
public class BridgePublishPreviewModelImpl extends BaseModelImpl<BridgePublishPreview>
	implements BridgePublishPreviewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge publish preview model instance should use the {@link com.ihg.brandstandards.db.model.BridgePublishPreview} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_ID", Types.BIGINT },
			{ "TAX_TITLE_TXT", Types.VARCHAR },
			{ "TITLE", Types.VARCHAR },
			{ "PATH", Types.VARCHAR },
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "CURR_TITLE", Types.VARCHAR },
			{ "STD_TYP", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "INDX_ORDER", Types.BIGINT },
			{ "LVL", Types.BIGINT },
			{ "HIER_LVL_NBR", Types.BIGINT },
			{ "STATUS", Types.VARCHAR },
			{ "IMG_ATCH", Types.BIGINT },
			{ "STD_ATCH", Types.BIGINT },
			{ "STD_XREF", Types.BIGINT },
			{ "HTL_LFCCL", Types.BIGINT },
			{ "STD_CMPLY", Types.BIGINT },
			{ "HTL_ATTR", Types.VARCHAR },
			{ "STD_CMPLY_DATE", Types.VARCHAR },
			{ "STD_REFERENCE", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH (STD_ID LONG not null primary key,TAX_TITLE_TXT VARCHAR(75) null,TITLE VARCHAR(75) null,PATH VARCHAR(75) null,PRNT_STD_ID LONG,CURR_TITLE VARCHAR(75) null,STD_TYP VARCHAR(75) null,DISP_ORDER_NBR LONG,TAXONOMY_ID LONG,PRNT_TAXONOMY_ID LONG,INDX_ORDER LONG,LVL LONG,HIER_LVL_NBR LONG,STATUS VARCHAR(75) null,IMG_ATCH LONG,STD_ATCH LONG,STD_XREF LONG,HTL_LFCCL LONG,STD_CMPLY LONG,HTL_ATTR VARCHAR(75) null,STD_CMPLY_DATE VARCHAR(75) null,STD_REFERENCE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgePublishPreview.stdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH.STD_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishPreview"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishPreview"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgePublishPreview"));

	public BridgePublishPreviewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BridgePublishPreview.class;
	}

	@Override
	public String getModelClassName() {
		return BridgePublishPreview.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdId", getStdId());
		attributes.put("taxonomyTitle", getTaxonomyTitle());
		attributes.put("title", getTitle());
		attributes.put("path", getPath());
		attributes.put("parentStdId", getParentStdId());
		attributes.put("currentTitle", getCurrentTitle());
		attributes.put("type", getType());
		attributes.put("displayOrder", getDisplayOrder());
		attributes.put("taxonomyId", getTaxonomyId());
		attributes.put("parentTaxonomyId", getParentTaxonomyId());
		attributes.put("indexOrder", getIndexOrder());
		attributes.put("level", getLevel());
		attributes.put("levelSortOrder", getLevelSortOrder());
		attributes.put("status", getStatus());
		attributes.put("imageCount", getImageCount());
		attributes.put("attachmentCount", getAttachmentCount());
		attributes.put("xRefCount", getXRefCount());
		attributes.put("hotelLifeCycle", getHotelLifeCycle());
		attributes.put("complianceCount", getComplianceCount());
		attributes.put("hotelAttributes", getHotelAttributes());
		attributes.put("complianceDate", getComplianceDate());
		attributes.put("stdReference", getStdReference());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String taxonomyTitle = (String)attributes.get("taxonomyTitle");

		if (taxonomyTitle != null) {
			setTaxonomyTitle(taxonomyTitle);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Long parentStdId = (Long)attributes.get("parentStdId");

		if (parentStdId != null) {
			setParentStdId(parentStdId);
		}

		String currentTitle = (String)attributes.get("currentTitle");

		if (currentTitle != null) {
			setCurrentTitle(currentTitle);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Long displayOrder = (Long)attributes.get("displayOrder");

		if (displayOrder != null) {
			setDisplayOrder(displayOrder);
		}

		Long taxonomyId = (Long)attributes.get("taxonomyId");

		if (taxonomyId != null) {
			setTaxonomyId(taxonomyId);
		}

		Long parentTaxonomyId = (Long)attributes.get("parentTaxonomyId");

		if (parentTaxonomyId != null) {
			setParentTaxonomyId(parentTaxonomyId);
		}

		Long indexOrder = (Long)attributes.get("indexOrder");

		if (indexOrder != null) {
			setIndexOrder(indexOrder);
		}

		Long level = (Long)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Long levelSortOrder = (Long)attributes.get("levelSortOrder");

		if (levelSortOrder != null) {
			setLevelSortOrder(levelSortOrder);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long imageCount = (Long)attributes.get("imageCount");

		if (imageCount != null) {
			setImageCount(imageCount);
		}

		Long attachmentCount = (Long)attributes.get("attachmentCount");

		if (attachmentCount != null) {
			setAttachmentCount(attachmentCount);
		}

		Long xRefCount = (Long)attributes.get("xRefCount");

		if (xRefCount != null) {
			setXRefCount(xRefCount);
		}

		Long hotelLifeCycle = (Long)attributes.get("hotelLifeCycle");

		if (hotelLifeCycle != null) {
			setHotelLifeCycle(hotelLifeCycle);
		}

		Long complianceCount = (Long)attributes.get("complianceCount");

		if (complianceCount != null) {
			setComplianceCount(complianceCount);
		}

		String hotelAttributes = (String)attributes.get("hotelAttributes");

		if (hotelAttributes != null) {
			setHotelAttributes(hotelAttributes);
		}

		String complianceDate = (String)attributes.get("complianceDate");

		if (complianceDate != null) {
			setComplianceDate(complianceDate);
		}

		String stdReference = (String)attributes.get("stdReference");

		if (stdReference != null) {
			setStdReference(stdReference);
		}
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public String getTaxonomyTitle() {
		if (_taxonomyTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxonomyTitle;
		}
	}

	@Override
	public void setTaxonomyTitle(String taxonomyTitle) {
		_taxonomyTitle = taxonomyTitle;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@Override
	public long getParentStdId() {
		return _parentStdId;
	}

	@Override
	public void setParentStdId(long parentStdId) {
		_parentStdId = parentStdId;
	}

	@Override
	public String getCurrentTitle() {
		if (_currentTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentTitle;
		}
	}

	@Override
	public void setCurrentTitle(String currentTitle) {
		_currentTitle = currentTitle;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public long getDisplayOrder() {
		return _displayOrder;
	}

	@Override
	public void setDisplayOrder(long displayOrder) {
		_displayOrder = displayOrder;
	}

	@Override
	public long getTaxonomyId() {
		return _taxonomyId;
	}

	@Override
	public void setTaxonomyId(long taxonomyId) {
		_taxonomyId = taxonomyId;
	}

	@Override
	public long getParentTaxonomyId() {
		return _parentTaxonomyId;
	}

	@Override
	public void setParentTaxonomyId(long parentTaxonomyId) {
		_parentTaxonomyId = parentTaxonomyId;
	}

	@Override
	public long getIndexOrder() {
		return _indexOrder;
	}

	@Override
	public void setIndexOrder(long indexOrder) {
		_indexOrder = indexOrder;
	}

	@Override
	public long getLevel() {
		return _level;
	}

	@Override
	public void setLevel(long level) {
		_level = level;
	}

	@Override
	public long getLevelSortOrder() {
		return _levelSortOrder;
	}

	@Override
	public void setLevelSortOrder(long levelSortOrder) {
		_levelSortOrder = levelSortOrder;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public long getImageCount() {
		return _imageCount;
	}

	@Override
	public void setImageCount(long imageCount) {
		_imageCount = imageCount;
	}

	@Override
	public long getAttachmentCount() {
		return _attachmentCount;
	}

	@Override
	public void setAttachmentCount(long attachmentCount) {
		_attachmentCount = attachmentCount;
	}

	@Override
	public long getXRefCount() {
		return _xRefCount;
	}

	@Override
	public void setXRefCount(long xRefCount) {
		_xRefCount = xRefCount;
	}

	@Override
	public long getHotelLifeCycle() {
		return _hotelLifeCycle;
	}

	@Override
	public void setHotelLifeCycle(long hotelLifeCycle) {
		_hotelLifeCycle = hotelLifeCycle;
	}

	@Override
	public long getComplianceCount() {
		return _complianceCount;
	}

	@Override
	public void setComplianceCount(long complianceCount) {
		_complianceCount = complianceCount;
	}

	@Override
	public String getHotelAttributes() {
		if (_hotelAttributes == null) {
			return StringPool.BLANK;
		}
		else {
			return _hotelAttributes;
		}
	}

	@Override
	public void setHotelAttributes(String hotelAttributes) {
		_hotelAttributes = hotelAttributes;
	}

	@Override
	public String getComplianceDate() {
		if (_complianceDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _complianceDate;
		}
	}

	@Override
	public void setComplianceDate(String complianceDate) {
		_complianceDate = complianceDate;
	}

	@Override
	public String getStdReference() {
		if (_stdReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdReference;
		}
	}

	@Override
	public void setStdReference(String stdReference) {
		_stdReference = stdReference;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BridgePublishPreview.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BridgePublishPreview toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgePublishPreview)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgePublishPreviewImpl bridgePublishPreviewImpl = new BridgePublishPreviewImpl();

		bridgePublishPreviewImpl.setStdId(getStdId());
		bridgePublishPreviewImpl.setTaxonomyTitle(getTaxonomyTitle());
		bridgePublishPreviewImpl.setTitle(getTitle());
		bridgePublishPreviewImpl.setPath(getPath());
		bridgePublishPreviewImpl.setParentStdId(getParentStdId());
		bridgePublishPreviewImpl.setCurrentTitle(getCurrentTitle());
		bridgePublishPreviewImpl.setType(getType());
		bridgePublishPreviewImpl.setDisplayOrder(getDisplayOrder());
		bridgePublishPreviewImpl.setTaxonomyId(getTaxonomyId());
		bridgePublishPreviewImpl.setParentTaxonomyId(getParentTaxonomyId());
		bridgePublishPreviewImpl.setIndexOrder(getIndexOrder());
		bridgePublishPreviewImpl.setLevel(getLevel());
		bridgePublishPreviewImpl.setLevelSortOrder(getLevelSortOrder());
		bridgePublishPreviewImpl.setStatus(getStatus());
		bridgePublishPreviewImpl.setImageCount(getImageCount());
		bridgePublishPreviewImpl.setAttachmentCount(getAttachmentCount());
		bridgePublishPreviewImpl.setXRefCount(getXRefCount());
		bridgePublishPreviewImpl.setHotelLifeCycle(getHotelLifeCycle());
		bridgePublishPreviewImpl.setComplianceCount(getComplianceCount());
		bridgePublishPreviewImpl.setHotelAttributes(getHotelAttributes());
		bridgePublishPreviewImpl.setComplianceDate(getComplianceDate());
		bridgePublishPreviewImpl.setStdReference(getStdReference());

		bridgePublishPreviewImpl.resetOriginalValues();

		return bridgePublishPreviewImpl;
	}

	@Override
	public int compareTo(BridgePublishPreview bridgePublishPreview) {
		long primaryKey = bridgePublishPreview.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgePublishPreview)) {
			return false;
		}

		BridgePublishPreview bridgePublishPreview = (BridgePublishPreview)obj;

		long primaryKey = bridgePublishPreview.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BridgePublishPreview> toCacheModel() {
		BridgePublishPreviewCacheModel bridgePublishPreviewCacheModel = new BridgePublishPreviewCacheModel();

		bridgePublishPreviewCacheModel.stdId = getStdId();

		bridgePublishPreviewCacheModel.taxonomyTitle = getTaxonomyTitle();

		String taxonomyTitle = bridgePublishPreviewCacheModel.taxonomyTitle;

		if ((taxonomyTitle != null) && (taxonomyTitle.length() == 0)) {
			bridgePublishPreviewCacheModel.taxonomyTitle = null;
		}

		bridgePublishPreviewCacheModel.title = getTitle();

		String title = bridgePublishPreviewCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bridgePublishPreviewCacheModel.title = null;
		}

		bridgePublishPreviewCacheModel.path = getPath();

		String path = bridgePublishPreviewCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			bridgePublishPreviewCacheModel.path = null;
		}

		bridgePublishPreviewCacheModel.parentStdId = getParentStdId();

		bridgePublishPreviewCacheModel.currentTitle = getCurrentTitle();

		String currentTitle = bridgePublishPreviewCacheModel.currentTitle;

		if ((currentTitle != null) && (currentTitle.length() == 0)) {
			bridgePublishPreviewCacheModel.currentTitle = null;
		}

		bridgePublishPreviewCacheModel.type = getType();

		String type = bridgePublishPreviewCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			bridgePublishPreviewCacheModel.type = null;
		}

		bridgePublishPreviewCacheModel.displayOrder = getDisplayOrder();

		bridgePublishPreviewCacheModel.taxonomyId = getTaxonomyId();

		bridgePublishPreviewCacheModel.parentTaxonomyId = getParentTaxonomyId();

		bridgePublishPreviewCacheModel.indexOrder = getIndexOrder();

		bridgePublishPreviewCacheModel.level = getLevel();

		bridgePublishPreviewCacheModel.levelSortOrder = getLevelSortOrder();

		bridgePublishPreviewCacheModel.status = getStatus();

		String status = bridgePublishPreviewCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			bridgePublishPreviewCacheModel.status = null;
		}

		bridgePublishPreviewCacheModel.imageCount = getImageCount();

		bridgePublishPreviewCacheModel.attachmentCount = getAttachmentCount();

		bridgePublishPreviewCacheModel.xRefCount = getXRefCount();

		bridgePublishPreviewCacheModel.hotelLifeCycle = getHotelLifeCycle();

		bridgePublishPreviewCacheModel.complianceCount = getComplianceCount();

		bridgePublishPreviewCacheModel.hotelAttributes = getHotelAttributes();

		String hotelAttributes = bridgePublishPreviewCacheModel.hotelAttributes;

		if ((hotelAttributes != null) && (hotelAttributes.length() == 0)) {
			bridgePublishPreviewCacheModel.hotelAttributes = null;
		}

		bridgePublishPreviewCacheModel.complianceDate = getComplianceDate();

		String complianceDate = bridgePublishPreviewCacheModel.complianceDate;

		if ((complianceDate != null) && (complianceDate.length() == 0)) {
			bridgePublishPreviewCacheModel.complianceDate = null;
		}

		bridgePublishPreviewCacheModel.stdReference = getStdReference();

		String stdReference = bridgePublishPreviewCacheModel.stdReference;

		if ((stdReference != null) && (stdReference.length() == 0)) {
			bridgePublishPreviewCacheModel.stdReference = null;
		}

		return bridgePublishPreviewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{stdId=");
		sb.append(getStdId());
		sb.append(", taxonomyTitle=");
		sb.append(getTaxonomyTitle());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", parentStdId=");
		sb.append(getParentStdId());
		sb.append(", currentTitle=");
		sb.append(getCurrentTitle());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", displayOrder=");
		sb.append(getDisplayOrder());
		sb.append(", taxonomyId=");
		sb.append(getTaxonomyId());
		sb.append(", parentTaxonomyId=");
		sb.append(getParentTaxonomyId());
		sb.append(", indexOrder=");
		sb.append(getIndexOrder());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", levelSortOrder=");
		sb.append(getLevelSortOrder());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", imageCount=");
		sb.append(getImageCount());
		sb.append(", attachmentCount=");
		sb.append(getAttachmentCount());
		sb.append(", xRefCount=");
		sb.append(getXRefCount());
		sb.append(", hotelLifeCycle=");
		sb.append(getHotelLifeCycle());
		sb.append(", complianceCount=");
		sb.append(getComplianceCount());
		sb.append(", hotelAttributes=");
		sb.append(getHotelAttributes());
		sb.append(", complianceDate=");
		sb.append(getComplianceDate());
		sb.append(", stdReference=");
		sb.append(getStdReference());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgePublishPreview");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyTitle</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentStdId</column-name><column-value><![CDATA[");
		sb.append(getParentStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentTitle</column-name><column-value><![CDATA[");
		sb.append(getCurrentTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrder</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyId</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getParentTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexOrder</column-name><column-value><![CDATA[");
		sb.append(getIndexOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelSortOrder</column-name><column-value><![CDATA[");
		sb.append(getLevelSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageCount</column-name><column-value><![CDATA[");
		sb.append(getImageCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentCount</column-name><column-value><![CDATA[");
		sb.append(getAttachmentCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xRefCount</column-name><column-value><![CDATA[");
		sb.append(getXRefCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotelLifeCycle</column-name><column-value><![CDATA[");
		sb.append(getHotelLifeCycle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complianceCount</column-name><column-value><![CDATA[");
		sb.append(getComplianceCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hotelAttributes</column-name><column-value><![CDATA[");
		sb.append(getHotelAttributes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complianceDate</column-name><column-value><![CDATA[");
		sb.append(getComplianceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdReference</column-name><column-value><![CDATA[");
		sb.append(getStdReference());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgePublishPreview.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgePublishPreview.class
		};
	private long _stdId;
	private String _taxonomyTitle;
	private String _title;
	private String _path;
	private long _parentStdId;
	private String _currentTitle;
	private String _type;
	private long _displayOrder;
	private long _taxonomyId;
	private long _parentTaxonomyId;
	private long _indexOrder;
	private long _level;
	private long _levelSortOrder;
	private String _status;
	private long _imageCount;
	private long _attachmentCount;
	private long _xRefCount;
	private long _hotelLifeCycle;
	private long _complianceCount;
	private String _hotelAttributes;
	private String _complianceDate;
	private String _stdReference;
	private BridgePublishPreview _escapedModel;
}