/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMCode;
import com.ihg.brandstandards.db.model.GEMCodeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMCode service. Represents a row in the &quot;GEM_CD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMCodeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMCodeImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMCodeImpl
 * @see com.ihg.brandstandards.db.model.GEMCode
 * @see com.ihg.brandstandards.db.model.GEMCodeModel
 * @generated
 */
public class GEMCodeModelImpl extends BaseModelImpl<GEMCode>
	implements GEMCodeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m code model instance should use the {@link com.ihg.brandstandards.db.model.GEMCode} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_CD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_CD", Types.VARCHAR },
			{ "GEM_CD_DESC", Types.VARCHAR },
			{ "GEM_CD_VAL", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_CD (GEM_CD VARCHAR(75) not null primary key,GEM_CD_DESC VARCHAR(75) null,GEM_CD_VAL VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_CD";
	public static final String ORDER_BY_JPQL = " ORDER BY gemCode.createdDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_CD.CREAT_TS ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMCode"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMCode"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMCode"));

	public GEMCodeModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _code;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _code;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GEMCode.class;
	}

	@Override
	public String getModelClassName() {
		return GEMCode.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("code", getCode());
		attributes.put("codeDesc", getCodeDesc());
		attributes.put("codeVal", getCodeVal());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String codeDesc = (String)attributes.get("codeDesc");

		if (codeDesc != null) {
			setCodeDesc(codeDesc);
		}

		String codeVal = (String)attributes.get("codeVal");

		if (codeVal != null) {
			setCodeVal(codeVal);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@Override
	public String getCodeDesc() {
		if (_codeDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeDesc;
		}
	}

	@Override
	public void setCodeDesc(String codeDesc) {
		_codeDesc = codeDesc;
	}

	@Override
	public String getCodeVal() {
		if (_codeVal == null) {
			return StringPool.BLANK;
		}
		else {
			return _codeVal;
		}
	}

	@Override
	public void setCodeVal(String codeVal) {
		_codeVal = codeVal;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public GEMCode toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMCode)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMCodeImpl gemCodeImpl = new GEMCodeImpl();

		gemCodeImpl.setCode(getCode());
		gemCodeImpl.setCodeDesc(getCodeDesc());
		gemCodeImpl.setCodeVal(getCodeVal());
		gemCodeImpl.setCreatorId(getCreatorId());
		gemCodeImpl.setCreatedDate(getCreatedDate());
		gemCodeImpl.setUpdatedBy(getUpdatedBy());
		gemCodeImpl.setUpdatedDate(getUpdatedDate());

		gemCodeImpl.resetOriginalValues();

		return gemCodeImpl;
	}

	@Override
	public int compareTo(GEMCode gemCode) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(), gemCode.getCreatedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMCode)) {
			return false;
		}

		GEMCode gemCode = (GEMCode)obj;

		String primaryKey = gemCode.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMCode> toCacheModel() {
		GEMCodeCacheModel gemCodeCacheModel = new GEMCodeCacheModel();

		gemCodeCacheModel.code = getCode();

		String code = gemCodeCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			gemCodeCacheModel.code = null;
		}

		gemCodeCacheModel.codeDesc = getCodeDesc();

		String codeDesc = gemCodeCacheModel.codeDesc;

		if ((codeDesc != null) && (codeDesc.length() == 0)) {
			gemCodeCacheModel.codeDesc = null;
		}

		gemCodeCacheModel.codeVal = getCodeVal();

		String codeVal = gemCodeCacheModel.codeVal;

		if ((codeVal != null) && (codeVal.length() == 0)) {
			gemCodeCacheModel.codeVal = null;
		}

		gemCodeCacheModel.creatorId = getCreatorId();

		String creatorId = gemCodeCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemCodeCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemCodeCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemCodeCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemCodeCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemCodeCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemCodeCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemCodeCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemCodeCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemCodeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{code=");
		sb.append(getCode());
		sb.append(", codeDesc=");
		sb.append(getCodeDesc());
		sb.append(", codeVal=");
		sb.append(getCodeVal());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMCode");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDesc</column-name><column-value><![CDATA[");
		sb.append(getCodeDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeVal</column-name><column-value><![CDATA[");
		sb.append(getCodeVal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMCode.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMCode.class
		};
	private String _code;
	private String _codeDesc;
	private String _codeVal;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMCode _escapedModel;
}