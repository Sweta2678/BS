/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgeProgressCategory;
import com.ihg.brandstandards.db.model.BridgeProgressCategoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgeProgressCategory service. Represents a row in the &quot;BRIDGE_PUBLISH_PROGRESS_CATGY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgeProgressCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgeProgressCategoryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgeProgressCategoryImpl
 * @see com.ihg.brandstandards.db.model.BridgeProgressCategory
 * @see com.ihg.brandstandards.db.model.BridgeProgressCategoryModel
 * @generated
 */
public class BridgeProgressCategoryModelImpl extends BaseModelImpl<BridgeProgressCategory>
	implements BridgeProgressCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge progress category model instance should use the {@link com.ihg.brandstandards.db.model.BridgeProgressCategory} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH_PROGRESS_CATGY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUB_PROGRESS_CATGY_ID", Types.BIGINT },
			{ "BRIDGE_PUB_PROGRESS_CATGY_NM", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH_PROGRESS_CATGY (BRIDGE_PUB_PROGRESS_CATGY_ID LONG not null primary key,BRIDGE_PUB_PROGRESS_CATGY_NM VARCHAR(75) null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH_PROGRESS_CATGY";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgeProgressCategory.progressCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH_PROGRESS_CATGY.BRIDGE_PUB_PROGRESS_CATGY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgeProgressCategory"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgeProgressCategory"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.BridgeProgressCategory"),
			true);
	public static long PROGRESSCATEGORYNAME_COLUMN_BITMASK = 1L;
	public static long PROGRESSCATEGORYID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgeProgressCategory"));

	public BridgeProgressCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _progressCategoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProgressCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _progressCategoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BridgeProgressCategory.class;
	}

	@Override
	public String getModelClassName() {
		return BridgeProgressCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("progressCategoryId", getProgressCategoryId());
		attributes.put("progressCategoryName", getProgressCategoryName());
		attributes.put("displayOrderNumber", getDisplayOrderNumber());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long progressCategoryId = (Long)attributes.get("progressCategoryId");

		if (progressCategoryId != null) {
			setProgressCategoryId(progressCategoryId);
		}

		String progressCategoryName = (String)attributes.get(
				"progressCategoryName");

		if (progressCategoryName != null) {
			setProgressCategoryName(progressCategoryName);
		}

		Long displayOrderNumber = (Long)attributes.get("displayOrderNumber");

		if (displayOrderNumber != null) {
			setDisplayOrderNumber(displayOrderNumber);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getProgressCategoryId() {
		return _progressCategoryId;
	}

	@Override
	public void setProgressCategoryId(long progressCategoryId) {
		_progressCategoryId = progressCategoryId;
	}

	@Override
	public String getProgressCategoryName() {
		if (_progressCategoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _progressCategoryName;
		}
	}

	@Override
	public void setProgressCategoryName(String progressCategoryName) {
		_columnBitmask |= PROGRESSCATEGORYNAME_COLUMN_BITMASK;

		if (_originalProgressCategoryName == null) {
			_originalProgressCategoryName = _progressCategoryName;
		}

		_progressCategoryName = progressCategoryName;
	}

	public String getOriginalProgressCategoryName() {
		return GetterUtil.getString(_originalProgressCategoryName);
	}

	@Override
	public long getDisplayOrderNumber() {
		return _displayOrderNumber;
	}

	@Override
	public void setDisplayOrderNumber(long displayOrderNumber) {
		_displayOrderNumber = displayOrderNumber;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BridgeProgressCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BridgeProgressCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgeProgressCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgeProgressCategoryImpl bridgeProgressCategoryImpl = new BridgeProgressCategoryImpl();

		bridgeProgressCategoryImpl.setProgressCategoryId(getProgressCategoryId());
		bridgeProgressCategoryImpl.setProgressCategoryName(getProgressCategoryName());
		bridgeProgressCategoryImpl.setDisplayOrderNumber(getDisplayOrderNumber());
		bridgeProgressCategoryImpl.setCreatorId(getCreatorId());
		bridgeProgressCategoryImpl.setCreatedDate(getCreatedDate());
		bridgeProgressCategoryImpl.setUpdatedBy(getUpdatedBy());
		bridgeProgressCategoryImpl.setUpdatedDate(getUpdatedDate());

		bridgeProgressCategoryImpl.resetOriginalValues();

		return bridgeProgressCategoryImpl;
	}

	@Override
	public int compareTo(BridgeProgressCategory bridgeProgressCategory) {
		long primaryKey = bridgeProgressCategory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgeProgressCategory)) {
			return false;
		}

		BridgeProgressCategory bridgeProgressCategory = (BridgeProgressCategory)obj;

		long primaryKey = bridgeProgressCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BridgeProgressCategoryModelImpl bridgeProgressCategoryModelImpl = this;

		bridgeProgressCategoryModelImpl._originalProgressCategoryName = bridgeProgressCategoryModelImpl._progressCategoryName;

		bridgeProgressCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BridgeProgressCategory> toCacheModel() {
		BridgeProgressCategoryCacheModel bridgeProgressCategoryCacheModel = new BridgeProgressCategoryCacheModel();

		bridgeProgressCategoryCacheModel.progressCategoryId = getProgressCategoryId();

		bridgeProgressCategoryCacheModel.progressCategoryName = getProgressCategoryName();

		String progressCategoryName = bridgeProgressCategoryCacheModel.progressCategoryName;

		if ((progressCategoryName != null) &&
				(progressCategoryName.length() == 0)) {
			bridgeProgressCategoryCacheModel.progressCategoryName = null;
		}

		bridgeProgressCategoryCacheModel.displayOrderNumber = getDisplayOrderNumber();

		bridgeProgressCategoryCacheModel.creatorId = getCreatorId();

		String creatorId = bridgeProgressCategoryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			bridgeProgressCategoryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bridgeProgressCategoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bridgeProgressCategoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		bridgeProgressCategoryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bridgeProgressCategoryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bridgeProgressCategoryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			bridgeProgressCategoryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			bridgeProgressCategoryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return bridgeProgressCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{progressCategoryId=");
		sb.append(getProgressCategoryId());
		sb.append(", progressCategoryName=");
		sb.append(getProgressCategoryName());
		sb.append(", displayOrderNumber=");
		sb.append(getDisplayOrderNumber());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgeProgressCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>progressCategoryId</column-name><column-value><![CDATA[");
		sb.append(getProgressCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>progressCategoryName</column-name><column-value><![CDATA[");
		sb.append(getProgressCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgeProgressCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgeProgressCategory.class
		};
	private long _progressCategoryId;
	private String _progressCategoryName;
	private String _originalProgressCategoryName;
	private long _displayOrderNumber;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private BridgeProgressCategory _escapedModel;
}