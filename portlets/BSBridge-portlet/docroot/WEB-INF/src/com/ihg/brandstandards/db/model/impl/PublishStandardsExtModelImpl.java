/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.PublishStandardsExt;
import com.ihg.brandstandards.db.model.PublishStandardsExtModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PublishStandardsExt service. Represents a row in the &quot;PUBLISH_STD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.PublishStandardsExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublishStandardsExtImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see PublishStandardsExtImpl
 * @see com.ihg.brandstandards.db.model.PublishStandardsExt
 * @see com.ihg.brandstandards.db.model.PublishStandardsExtModel
 * @generated
 */
public class PublishStandardsExtModelImpl extends BaseModelImpl<PublishStandardsExt>
	implements PublishStandardsExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Custom Query mapping to createlist of standards with translations. model instance should use the {@link com.ihg.brandstandards.db.model.PublishStandardsExt} interface instead.
	 */
	public static final String TABLE_NAME = "PUBLISH_STD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PUBLISH_STD_VER_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "STD_TYP", Types.VARCHAR },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "PREV_PUBLISH_TITLE_TXT", Types.VARCHAR },
			{ "STD_DESC", Types.VARCHAR },
			{ "PREV_PUBLISH_STD_DESC", Types.VARCHAR },
			{ "AUTHOR_NM_TXT", Types.VARCHAR },
			{ "BUS_OWNER_NM", Types.VARCHAR },
			{ "EFF_DT", Types.TIMESTAMP },
			{ "CMPLY_DT", Types.TIMESTAMP },
			{ "PREV_CMPLY_DT", Types.TIMESTAMP },
			{ "WAIVER_IND", Types.VARCHAR },
			{ "STAT_DESC", Types.VARCHAR },
			{ "AREA_CATGY_CD", Types.VARCHAR },
			{ "CREATOR_SCRN_NM", Types.VARCHAR },
			{ "CHNG_DESC", Types.VARCHAR },
			{ "GBL_RGN_IND", Types.VARCHAR },
			{ "RGN_CD", Types.VARCHAR },
			{ "NOTE_TXT", Types.VARCHAR },
			{ "FRAMEWORK_STD_IND", Types.VARCHAR },
			{ "STD_MGR_ID", Types.VARCHAR },
			{ "REGION_IDENTIFIER", Types.VARCHAR },
			{ "STATUS_IDENTIFIER", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "ATTACHMENT_EXISTS", Types.VARCHAR },
			{ "ATTACH_LST", Types.VARCHAR },
			{ "LINK_EXISTS", Types.VARCHAR },
			{ "LINK_LST", Types.VARCHAR },
			{ "IMG_EXISTS", Types.VARCHAR },
			{ "XREF_LST_STD_ID", Types.VARCHAR },
			{ "attch_Stat_cd", Types.VARCHAR },
			{ "link_stat_cd", Types.VARCHAR },
			{ "img_stat_cd", Types.VARCHAR },
			{ "IMG_LST_ID", Types.VARCHAR },
			{ "INDEX_ORDER", Types.BIGINT },
			{ "PUBLISH_TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_PUBLISH_TAXONOMY_ID", Types.BIGINT },
			{ "INDEX_TITLE", Types.VARCHAR },
			{ "LVL", Types.BIGINT },
			{ "PATH", Types.VARCHAR },
			{ "HIER_LVL_NBR", Types.BIGINT },
			{ "TAXONOMY_DESC", Types.VARCHAR },
			{ "matched_Id", Types.VARCHAR },
			{ "EXPR_DT", Types.TIMESTAMP },
			{ "PREV_EXPR_DT", Types.TIMESTAMP },
			{ "EXPIRED_BY_REF", Types.VARCHAR },
			{ "FLAG_ID", Types.VARCHAR },
			{ "PREV_FLAG_ID", Types.VARCHAR },
			{ "TITLE_CHANGE", Types.VARCHAR },
			{ "CMPLY_CHANGE", Types.VARCHAR },
			{ "EXPR_CHANGE", Types.VARCHAR },
			{ "HCL_CHANGE", Types.VARCHAR },
			{ "CHANGED_STAT", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PUBLISH_STD (PUBLISH_STD_VER_ID LONG not null primary key,PUBLISH_ID LONG,STD_ID LONG,PRNT_STD_ID LONG,STD_TYP VARCHAR(75) null,TITLE_TXT VARCHAR(75) null,PREV_PUBLISH_TITLE_TXT VARCHAR(75) null,STD_DESC VARCHAR(75) null,PREV_PUBLISH_STD_DESC VARCHAR(75) null,AUTHOR_NM_TXT VARCHAR(75) null,BUS_OWNER_NM VARCHAR(75) null,EFF_DT DATE null,CMPLY_DT DATE null,PREV_CMPLY_DT DATE null,WAIVER_IND VARCHAR(75) null,STAT_DESC VARCHAR(75) null,AREA_CATGY_CD VARCHAR(75) null,CREATOR_SCRN_NM VARCHAR(75) null,CHNG_DESC VARCHAR(75) null,GBL_RGN_IND VARCHAR(75) null,RGN_CD VARCHAR(75) null,NOTE_TXT VARCHAR(75) null,FRAMEWORK_STD_IND VARCHAR(75) null,STD_MGR_ID VARCHAR(75) null,REGION_IDENTIFIER VARCHAR(75) null,STATUS_IDENTIFIER VARCHAR(75) null,DISP_ORDER_NBR LONG,LOCALE_CD VARCHAR(75) null,TAXONOMY_ID LONG,PRNT_TAXONOMY_ID LONG,ATTACHMENT_EXISTS VARCHAR(75) null,ATTACH_LST VARCHAR(75) null,LINK_EXISTS VARCHAR(75) null,LINK_LST VARCHAR(75) null,IMG_EXISTS VARCHAR(75) null,XREF_LST_STD_ID VARCHAR(75) null,attch_Stat_cd VARCHAR(75) null,link_stat_cd VARCHAR(75) null,img_stat_cd VARCHAR(75) null,IMG_LST_ID VARCHAR(75) null,INDEX_ORDER LONG,PUBLISH_TAXONOMY_ID LONG,PRNT_PUBLISH_TAXONOMY_ID LONG,INDEX_TITLE VARCHAR(75) null,LVL LONG,PATH VARCHAR(75) null,HIER_LVL_NBR LONG,TAXONOMY_DESC VARCHAR(75) null,matched_Id VARCHAR(75) null,EXPR_DT DATE null,PREV_EXPR_DT DATE null,EXPIRED_BY_REF VARCHAR(75) null,FLAG_ID VARCHAR(75) null,PREV_FLAG_ID VARCHAR(75) null,TITLE_CHANGE VARCHAR(75) null,CMPLY_CHANGE VARCHAR(75) null,EXPR_CHANGE VARCHAR(75) null,HCL_CHANGE VARCHAR(75) null,CHANGED_STAT VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PUBLISH_STD";
	public static final String ORDER_BY_JPQL = " ORDER BY publishStandardsExt.publishStdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PUBLISH_STD.PUBLISH_STD_VER_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.PublishStandardsExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.PublishStandardsExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.PublishStandardsExt"));

	public PublishStandardsExtModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publishStdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublishStdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishStdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublishStandardsExt.class;
	}

	@Override
	public String getModelClassName() {
		return PublishStandardsExt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishStdId", getPublishStdId());
		attributes.put("publishId", getPublishId());
		attributes.put("stdId", getStdId());
		attributes.put("parentPublishId", getParentPublishId());
		attributes.put("stdTyp", getStdTyp());
		attributes.put("title", getTitle());
		attributes.put("prevPublishTitle", getPrevPublishTitle());
		attributes.put("description", getDescription());
		attributes.put("prevDescription", getPrevDescription());
		attributes.put("author", getAuthor());
		attributes.put("businessOwner", getBusinessOwner());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("implDate", getImplDate());
		attributes.put("prevCmplyDate", getPrevCmplyDate());
		attributes.put("waiver", getWaiver());
		attributes.put("status", getStatus());
		attributes.put("category", getCategory());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("change", getChange());
		attributes.put("isGlobal", getIsGlobal());
		attributes.put("regionCode", getRegionCode());
		attributes.put("notes", getNotes());
		attributes.put("framework", getFramework());
		attributes.put("internalReference", getInternalReference());
		attributes.put("region", getRegion());
		attributes.put("statusIdentifier", getStatusIdentifier());
		attributes.put("sortOrder", getSortOrder());
		attributes.put("localeCode", getLocaleCode());
		attributes.put("taxonomyId", getTaxonomyId());
		attributes.put("prntTaxonomyId", getPrntTaxonomyId());
		attributes.put("attachmentExists", getAttachmentExists());
		attributes.put("attachmentList", getAttachmentList());
		attributes.put("linkExists", getLinkExists());
		attributes.put("linkList", getLinkList());
		attributes.put("imageExists", getImageExists());
		attributes.put("stdXrefListStdId", getStdXrefListStdId());
		attributes.put("attachmentStatus", getAttachmentStatus());
		attributes.put("linkStatus", getLinkStatus());
		attributes.put("imageStatus", getImageStatus());
		attributes.put("imageIdList", getImageIdList());
		attributes.put("indexOrder", getIndexOrder());
		attributes.put("publishTaxonomyId", getPublishTaxonomyId());
		attributes.put("parentTaxonomyId", getParentTaxonomyId());
		attributes.put("indexTitle", getIndexTitle());
		attributes.put("indexLvl", getIndexLvl());
		attributes.put("taxonomyPath", getTaxonomyPath());
		attributes.put("levelSortOrder", getLevelSortOrder());
		attributes.put("indexDescription", getIndexDescription());
		attributes.put("matchedId", getMatchedId());
		attributes.put("expiryDate", getExpiryDate());
		attributes.put("prevExpiryDate", getPrevExpiryDate());
		attributes.put("expiredStdId", getExpiredStdId());
		attributes.put("flagStdId", getFlagStdId());
		attributes.put("prevFlagStdId", getPrevFlagStdId());
		attributes.put("titleChange", getTitleChange());
		attributes.put("cmplyChange", getCmplyChange());
		attributes.put("exprChange", getExprChange());
		attributes.put("hlcChange", getHlcChange());
		attributes.put("changedStatus", getChangedStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishStdId = (Long)attributes.get("publishStdId");

		if (publishStdId != null) {
			setPublishStdId(publishStdId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long parentPublishId = (Long)attributes.get("parentPublishId");

		if (parentPublishId != null) {
			setParentPublishId(parentPublishId);
		}

		String stdTyp = (String)attributes.get("stdTyp");

		if (stdTyp != null) {
			setStdTyp(stdTyp);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String prevPublishTitle = (String)attributes.get("prevPublishTitle");

		if (prevPublishTitle != null) {
			setPrevPublishTitle(prevPublishTitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String prevDescription = (String)attributes.get("prevDescription");

		if (prevDescription != null) {
			setPrevDescription(prevDescription);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String businessOwner = (String)attributes.get("businessOwner");

		if (businessOwner != null) {
			setBusinessOwner(businessOwner);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Date implDate = (Date)attributes.get("implDate");

		if (implDate != null) {
			setImplDate(implDate);
		}

		Date prevCmplyDate = (Date)attributes.get("prevCmplyDate");

		if (prevCmplyDate != null) {
			setPrevCmplyDate(prevCmplyDate);
		}

		String waiver = (String)attributes.get("waiver");

		if (waiver != null) {
			setWaiver(waiver);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String change = (String)attributes.get("change");

		if (change != null) {
			setChange(change);
		}

		String isGlobal = (String)attributes.get("isGlobal");

		if (isGlobal != null) {
			setIsGlobal(isGlobal);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		String framework = (String)attributes.get("framework");

		if (framework != null) {
			setFramework(framework);
		}

		String internalReference = (String)attributes.get("internalReference");

		if (internalReference != null) {
			setInternalReference(internalReference);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		String statusIdentifier = (String)attributes.get("statusIdentifier");

		if (statusIdentifier != null) {
			setStatusIdentifier(statusIdentifier);
		}

		Long sortOrder = (Long)attributes.get("sortOrder");

		if (sortOrder != null) {
			setSortOrder(sortOrder);
		}

		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		Long taxonomyId = (Long)attributes.get("taxonomyId");

		if (taxonomyId != null) {
			setTaxonomyId(taxonomyId);
		}

		Long prntTaxonomyId = (Long)attributes.get("prntTaxonomyId");

		if (prntTaxonomyId != null) {
			setPrntTaxonomyId(prntTaxonomyId);
		}

		String attachmentExists = (String)attributes.get("attachmentExists");

		if (attachmentExists != null) {
			setAttachmentExists(attachmentExists);
		}

		String attachmentList = (String)attributes.get("attachmentList");

		if (attachmentList != null) {
			setAttachmentList(attachmentList);
		}

		String linkExists = (String)attributes.get("linkExists");

		if (linkExists != null) {
			setLinkExists(linkExists);
		}

		String linkList = (String)attributes.get("linkList");

		if (linkList != null) {
			setLinkList(linkList);
		}

		String imageExists = (String)attributes.get("imageExists");

		if (imageExists != null) {
			setImageExists(imageExists);
		}

		String stdXrefListStdId = (String)attributes.get("stdXrefListStdId");

		if (stdXrefListStdId != null) {
			setStdXrefListStdId(stdXrefListStdId);
		}

		String attachmentStatus = (String)attributes.get("attachmentStatus");

		if (attachmentStatus != null) {
			setAttachmentStatus(attachmentStatus);
		}

		String linkStatus = (String)attributes.get("linkStatus");

		if (linkStatus != null) {
			setLinkStatus(linkStatus);
		}

		String imageStatus = (String)attributes.get("imageStatus");

		if (imageStatus != null) {
			setImageStatus(imageStatus);
		}

		String imageIdList = (String)attributes.get("imageIdList");

		if (imageIdList != null) {
			setImageIdList(imageIdList);
		}

		Long indexOrder = (Long)attributes.get("indexOrder");

		if (indexOrder != null) {
			setIndexOrder(indexOrder);
		}

		Long publishTaxonomyId = (Long)attributes.get("publishTaxonomyId");

		if (publishTaxonomyId != null) {
			setPublishTaxonomyId(publishTaxonomyId);
		}

		Long parentTaxonomyId = (Long)attributes.get("parentTaxonomyId");

		if (parentTaxonomyId != null) {
			setParentTaxonomyId(parentTaxonomyId);
		}

		String indexTitle = (String)attributes.get("indexTitle");

		if (indexTitle != null) {
			setIndexTitle(indexTitle);
		}

		Long indexLvl = (Long)attributes.get("indexLvl");

		if (indexLvl != null) {
			setIndexLvl(indexLvl);
		}

		String taxonomyPath = (String)attributes.get("taxonomyPath");

		if (taxonomyPath != null) {
			setTaxonomyPath(taxonomyPath);
		}

		Long levelSortOrder = (Long)attributes.get("levelSortOrder");

		if (levelSortOrder != null) {
			setLevelSortOrder(levelSortOrder);
		}

		String indexDescription = (String)attributes.get("indexDescription");

		if (indexDescription != null) {
			setIndexDescription(indexDescription);
		}

		String matchedId = (String)attributes.get("matchedId");

		if (matchedId != null) {
			setMatchedId(matchedId);
		}

		Date expiryDate = (Date)attributes.get("expiryDate");

		if (expiryDate != null) {
			setExpiryDate(expiryDate);
		}

		Date prevExpiryDate = (Date)attributes.get("prevExpiryDate");

		if (prevExpiryDate != null) {
			setPrevExpiryDate(prevExpiryDate);
		}

		String expiredStdId = (String)attributes.get("expiredStdId");

		if (expiredStdId != null) {
			setExpiredStdId(expiredStdId);
		}

		String flagStdId = (String)attributes.get("flagStdId");

		if (flagStdId != null) {
			setFlagStdId(flagStdId);
		}

		String prevFlagStdId = (String)attributes.get("prevFlagStdId");

		if (prevFlagStdId != null) {
			setPrevFlagStdId(prevFlagStdId);
		}

		String titleChange = (String)attributes.get("titleChange");

		if (titleChange != null) {
			setTitleChange(titleChange);
		}

		String cmplyChange = (String)attributes.get("cmplyChange");

		if (cmplyChange != null) {
			setCmplyChange(cmplyChange);
		}

		String exprChange = (String)attributes.get("exprChange");

		if (exprChange != null) {
			setExprChange(exprChange);
		}

		String hlcChange = (String)attributes.get("hlcChange");

		if (hlcChange != null) {
			setHlcChange(hlcChange);
		}

		String changedStatus = (String)attributes.get("changedStatus");

		if (changedStatus != null) {
			setChangedStatus(changedStatus);
		}
	}

	@Override
	public long getPublishStdId() {
		return _publishStdId;
	}

	@Override
	public void setPublishStdId(long publishStdId) {
		_publishStdId = publishStdId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_publishId = publishId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public long getParentPublishId() {
		return _parentPublishId;
	}

	@Override
	public void setParentPublishId(long parentPublishId) {
		_parentPublishId = parentPublishId;
	}

	@Override
	public String getStdTyp() {
		if (_stdTyp == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdTyp;
		}
	}

	@Override
	public void setStdTyp(String stdTyp) {
		_stdTyp = stdTyp;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getPrevPublishTitle() {
		if (_prevPublishTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _prevPublishTitle;
		}
	}

	@Override
	public void setPrevPublishTitle(String prevPublishTitle) {
		_prevPublishTitle = prevPublishTitle;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getPrevDescription() {
		if (_prevDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _prevDescription;
		}
	}

	@Override
	public void setPrevDescription(String prevDescription) {
		_prevDescription = prevDescription;
	}

	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@Override
	public String getBusinessOwner() {
		if (_businessOwner == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessOwner;
		}
	}

	@Override
	public void setBusinessOwner(String businessOwner) {
		_businessOwner = businessOwner;
	}

	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@Override
	public Date getImplDate() {
		return _implDate;
	}

	@Override
	public void setImplDate(Date implDate) {
		_implDate = implDate;
	}

	@Override
	public Date getPrevCmplyDate() {
		return _prevCmplyDate;
	}

	@Override
	public void setPrevCmplyDate(Date prevCmplyDate) {
		_prevCmplyDate = prevCmplyDate;
	}

	@Override
	public String getWaiver() {
		if (_waiver == null) {
			return StringPool.BLANK;
		}
		else {
			return _waiver;
		}
	}

	@Override
	public void setWaiver(String waiver) {
		_waiver = waiver;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getChange() {
		if (_change == null) {
			return StringPool.BLANK;
		}
		else {
			return _change;
		}
	}

	@Override
	public void setChange(String change) {
		_change = change;
	}

	@Override
	public String getIsGlobal() {
		if (_isGlobal == null) {
			return StringPool.BLANK;
		}
		else {
			return _isGlobal;
		}
	}

	@Override
	public void setIsGlobal(String isGlobal) {
		_isGlobal = isGlobal;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_regionCode = regionCode;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public String getFramework() {
		if (_framework == null) {
			return StringPool.BLANK;
		}
		else {
			return _framework;
		}
	}

	@Override
	public void setFramework(String framework) {
		_framework = framework;
	}

	@Override
	public String getInternalReference() {
		if (_internalReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _internalReference;
		}
	}

	@Override
	public void setInternalReference(String internalReference) {
		_internalReference = internalReference;
	}

	@Override
	public String getRegion() {
		if (_region == null) {
			return StringPool.BLANK;
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@Override
	public String getStatusIdentifier() {
		if (_statusIdentifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusIdentifier;
		}
	}

	@Override
	public void setStatusIdentifier(String statusIdentifier) {
		_statusIdentifier = statusIdentifier;
	}

	@Override
	public long getSortOrder() {
		return _sortOrder;
	}

	@Override
	public void setSortOrder(long sortOrder) {
		_sortOrder = sortOrder;
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_localeCode = localeCode;
	}

	@Override
	public long getTaxonomyId() {
		return _taxonomyId;
	}

	@Override
	public void setTaxonomyId(long taxonomyId) {
		_taxonomyId = taxonomyId;
	}

	@Override
	public long getPrntTaxonomyId() {
		return _prntTaxonomyId;
	}

	@Override
	public void setPrntTaxonomyId(long prntTaxonomyId) {
		_prntTaxonomyId = prntTaxonomyId;
	}

	@Override
	public String getAttachmentExists() {
		if (_attachmentExists == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentExists;
		}
	}

	@Override
	public void setAttachmentExists(String attachmentExists) {
		_attachmentExists = attachmentExists;
	}

	@Override
	public String getAttachmentList() {
		if (_attachmentList == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentList;
		}
	}

	@Override
	public void setAttachmentList(String attachmentList) {
		_attachmentList = attachmentList;
	}

	@Override
	public String getLinkExists() {
		if (_linkExists == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkExists;
		}
	}

	@Override
	public void setLinkExists(String linkExists) {
		_linkExists = linkExists;
	}

	@Override
	public String getLinkList() {
		if (_linkList == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkList;
		}
	}

	@Override
	public void setLinkList(String linkList) {
		_linkList = linkList;
	}

	@Override
	public String getImageExists() {
		if (_imageExists == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageExists;
		}
	}

	@Override
	public void setImageExists(String imageExists) {
		_imageExists = imageExists;
	}

	@Override
	public String getStdXrefListStdId() {
		if (_stdXrefListStdId == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdXrefListStdId;
		}
	}

	@Override
	public void setStdXrefListStdId(String stdXrefListStdId) {
		_stdXrefListStdId = stdXrefListStdId;
	}

	@Override
	public String getAttachmentStatus() {
		if (_attachmentStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentStatus;
		}
	}

	@Override
	public void setAttachmentStatus(String attachmentStatus) {
		_attachmentStatus = attachmentStatus;
	}

	@Override
	public String getLinkStatus() {
		if (_linkStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkStatus;
		}
	}

	@Override
	public void setLinkStatus(String linkStatus) {
		_linkStatus = linkStatus;
	}

	@Override
	public String getImageStatus() {
		if (_imageStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageStatus;
		}
	}

	@Override
	public void setImageStatus(String imageStatus) {
		_imageStatus = imageStatus;
	}

	@Override
	public String getImageIdList() {
		if (_imageIdList == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageIdList;
		}
	}

	@Override
	public void setImageIdList(String imageIdList) {
		_imageIdList = imageIdList;
	}

	@Override
	public long getIndexOrder() {
		return _indexOrder;
	}

	@Override
	public void setIndexOrder(long indexOrder) {
		_indexOrder = indexOrder;
	}

	@Override
	public long getPublishTaxonomyId() {
		return _publishTaxonomyId;
	}

	@Override
	public void setPublishTaxonomyId(long publishTaxonomyId) {
		_publishTaxonomyId = publishTaxonomyId;
	}

	@Override
	public long getParentTaxonomyId() {
		return _parentTaxonomyId;
	}

	@Override
	public void setParentTaxonomyId(long parentTaxonomyId) {
		_parentTaxonomyId = parentTaxonomyId;
	}

	@Override
	public String getIndexTitle() {
		if (_indexTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _indexTitle;
		}
	}

	@Override
	public void setIndexTitle(String indexTitle) {
		_indexTitle = indexTitle;
	}

	@Override
	public long getIndexLvl() {
		return _indexLvl;
	}

	@Override
	public void setIndexLvl(long indexLvl) {
		_indexLvl = indexLvl;
	}

	@Override
	public String getTaxonomyPath() {
		if (_taxonomyPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxonomyPath;
		}
	}

	@Override
	public void setTaxonomyPath(String taxonomyPath) {
		_taxonomyPath = taxonomyPath;
	}

	@Override
	public long getLevelSortOrder() {
		return _levelSortOrder;
	}

	@Override
	public void setLevelSortOrder(long levelSortOrder) {
		_levelSortOrder = levelSortOrder;
	}

	@Override
	public String getIndexDescription() {
		if (_indexDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _indexDescription;
		}
	}

	@Override
	public void setIndexDescription(String indexDescription) {
		_indexDescription = indexDescription;
	}

	@Override
	public String getMatchedId() {
		if (_matchedId == null) {
			return StringPool.BLANK;
		}
		else {
			return _matchedId;
		}
	}

	@Override
	public void setMatchedId(String matchedId) {
		_matchedId = matchedId;
	}

	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		_expiryDate = expiryDate;
	}

	@Override
	public Date getPrevExpiryDate() {
		return _prevExpiryDate;
	}

	@Override
	public void setPrevExpiryDate(Date prevExpiryDate) {
		_prevExpiryDate = prevExpiryDate;
	}

	@Override
	public String getExpiredStdId() {
		if (_expiredStdId == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiredStdId;
		}
	}

	@Override
	public void setExpiredStdId(String expiredStdId) {
		_expiredStdId = expiredStdId;
	}

	@Override
	public String getFlagStdId() {
		if (_flagStdId == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStdId;
		}
	}

	@Override
	public void setFlagStdId(String flagStdId) {
		_flagStdId = flagStdId;
	}

	@Override
	public String getPrevFlagStdId() {
		if (_prevFlagStdId == null) {
			return StringPool.BLANK;
		}
		else {
			return _prevFlagStdId;
		}
	}

	@Override
	public void setPrevFlagStdId(String prevFlagStdId) {
		_prevFlagStdId = prevFlagStdId;
	}

	@Override
	public String getTitleChange() {
		if (_titleChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleChange;
		}
	}

	@Override
	public void setTitleChange(String titleChange) {
		_titleChange = titleChange;
	}

	@Override
	public String getCmplyChange() {
		if (_cmplyChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _cmplyChange;
		}
	}

	@Override
	public void setCmplyChange(String cmplyChange) {
		_cmplyChange = cmplyChange;
	}

	@Override
	public String getExprChange() {
		if (_exprChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _exprChange;
		}
	}

	@Override
	public void setExprChange(String exprChange) {
		_exprChange = exprChange;
	}

	@Override
	public String getHlcChange() {
		if (_hlcChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _hlcChange;
		}
	}

	@Override
	public void setHlcChange(String hlcChange) {
		_hlcChange = hlcChange;
	}

	@Override
	public String getChangedStatus() {
		if (_changedStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _changedStatus;
		}
	}

	@Override
	public void setChangedStatus(String changedStatus) {
		_changedStatus = changedStatus;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublishStandardsExt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PublishStandardsExt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublishStandardsExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublishStandardsExtImpl publishStandardsExtImpl = new PublishStandardsExtImpl();

		publishStandardsExtImpl.setPublishStdId(getPublishStdId());
		publishStandardsExtImpl.setPublishId(getPublishId());
		publishStandardsExtImpl.setStdId(getStdId());
		publishStandardsExtImpl.setParentPublishId(getParentPublishId());
		publishStandardsExtImpl.setStdTyp(getStdTyp());
		publishStandardsExtImpl.setTitle(getTitle());
		publishStandardsExtImpl.setPrevPublishTitle(getPrevPublishTitle());
		publishStandardsExtImpl.setDescription(getDescription());
		publishStandardsExtImpl.setPrevDescription(getPrevDescription());
		publishStandardsExtImpl.setAuthor(getAuthor());
		publishStandardsExtImpl.setBusinessOwner(getBusinessOwner());
		publishStandardsExtImpl.setEffectiveDate(getEffectiveDate());
		publishStandardsExtImpl.setImplDate(getImplDate());
		publishStandardsExtImpl.setPrevCmplyDate(getPrevCmplyDate());
		publishStandardsExtImpl.setWaiver(getWaiver());
		publishStandardsExtImpl.setStatus(getStatus());
		publishStandardsExtImpl.setCategory(getCategory());
		publishStandardsExtImpl.setCreatedBy(getCreatedBy());
		publishStandardsExtImpl.setChange(getChange());
		publishStandardsExtImpl.setIsGlobal(getIsGlobal());
		publishStandardsExtImpl.setRegionCode(getRegionCode());
		publishStandardsExtImpl.setNotes(getNotes());
		publishStandardsExtImpl.setFramework(getFramework());
		publishStandardsExtImpl.setInternalReference(getInternalReference());
		publishStandardsExtImpl.setRegion(getRegion());
		publishStandardsExtImpl.setStatusIdentifier(getStatusIdentifier());
		publishStandardsExtImpl.setSortOrder(getSortOrder());
		publishStandardsExtImpl.setLocaleCode(getLocaleCode());
		publishStandardsExtImpl.setTaxonomyId(getTaxonomyId());
		publishStandardsExtImpl.setPrntTaxonomyId(getPrntTaxonomyId());
		publishStandardsExtImpl.setAttachmentExists(getAttachmentExists());
		publishStandardsExtImpl.setAttachmentList(getAttachmentList());
		publishStandardsExtImpl.setLinkExists(getLinkExists());
		publishStandardsExtImpl.setLinkList(getLinkList());
		publishStandardsExtImpl.setImageExists(getImageExists());
		publishStandardsExtImpl.setStdXrefListStdId(getStdXrefListStdId());
		publishStandardsExtImpl.setAttachmentStatus(getAttachmentStatus());
		publishStandardsExtImpl.setLinkStatus(getLinkStatus());
		publishStandardsExtImpl.setImageStatus(getImageStatus());
		publishStandardsExtImpl.setImageIdList(getImageIdList());
		publishStandardsExtImpl.setIndexOrder(getIndexOrder());
		publishStandardsExtImpl.setPublishTaxonomyId(getPublishTaxonomyId());
		publishStandardsExtImpl.setParentTaxonomyId(getParentTaxonomyId());
		publishStandardsExtImpl.setIndexTitle(getIndexTitle());
		publishStandardsExtImpl.setIndexLvl(getIndexLvl());
		publishStandardsExtImpl.setTaxonomyPath(getTaxonomyPath());
		publishStandardsExtImpl.setLevelSortOrder(getLevelSortOrder());
		publishStandardsExtImpl.setIndexDescription(getIndexDescription());
		publishStandardsExtImpl.setMatchedId(getMatchedId());
		publishStandardsExtImpl.setExpiryDate(getExpiryDate());
		publishStandardsExtImpl.setPrevExpiryDate(getPrevExpiryDate());
		publishStandardsExtImpl.setExpiredStdId(getExpiredStdId());
		publishStandardsExtImpl.setFlagStdId(getFlagStdId());
		publishStandardsExtImpl.setPrevFlagStdId(getPrevFlagStdId());
		publishStandardsExtImpl.setTitleChange(getTitleChange());
		publishStandardsExtImpl.setCmplyChange(getCmplyChange());
		publishStandardsExtImpl.setExprChange(getExprChange());
		publishStandardsExtImpl.setHlcChange(getHlcChange());
		publishStandardsExtImpl.setChangedStatus(getChangedStatus());

		publishStandardsExtImpl.resetOriginalValues();

		return publishStandardsExtImpl;
	}

	@Override
	public int compareTo(PublishStandardsExt publishStandardsExt) {
		long primaryKey = publishStandardsExt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublishStandardsExt)) {
			return false;
		}

		PublishStandardsExt publishStandardsExt = (PublishStandardsExt)obj;

		long primaryKey = publishStandardsExt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PublishStandardsExt> toCacheModel() {
		PublishStandardsExtCacheModel publishStandardsExtCacheModel = new PublishStandardsExtCacheModel();

		publishStandardsExtCacheModel.publishStdId = getPublishStdId();

		publishStandardsExtCacheModel.publishId = getPublishId();

		publishStandardsExtCacheModel.stdId = getStdId();

		publishStandardsExtCacheModel.parentPublishId = getParentPublishId();

		publishStandardsExtCacheModel.stdTyp = getStdTyp();

		String stdTyp = publishStandardsExtCacheModel.stdTyp;

		if ((stdTyp != null) && (stdTyp.length() == 0)) {
			publishStandardsExtCacheModel.stdTyp = null;
		}

		publishStandardsExtCacheModel.title = getTitle();

		String title = publishStandardsExtCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			publishStandardsExtCacheModel.title = null;
		}

		publishStandardsExtCacheModel.prevPublishTitle = getPrevPublishTitle();

		String prevPublishTitle = publishStandardsExtCacheModel.prevPublishTitle;

		if ((prevPublishTitle != null) && (prevPublishTitle.length() == 0)) {
			publishStandardsExtCacheModel.prevPublishTitle = null;
		}

		publishStandardsExtCacheModel.description = getDescription();

		String description = publishStandardsExtCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			publishStandardsExtCacheModel.description = null;
		}

		publishStandardsExtCacheModel.prevDescription = getPrevDescription();

		String prevDescription = publishStandardsExtCacheModel.prevDescription;

		if ((prevDescription != null) && (prevDescription.length() == 0)) {
			publishStandardsExtCacheModel.prevDescription = null;
		}

		publishStandardsExtCacheModel.author = getAuthor();

		String author = publishStandardsExtCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			publishStandardsExtCacheModel.author = null;
		}

		publishStandardsExtCacheModel.businessOwner = getBusinessOwner();

		String businessOwner = publishStandardsExtCacheModel.businessOwner;

		if ((businessOwner != null) && (businessOwner.length() == 0)) {
			publishStandardsExtCacheModel.businessOwner = null;
		}

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			publishStandardsExtCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			publishStandardsExtCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		Date implDate = getImplDate();

		if (implDate != null) {
			publishStandardsExtCacheModel.implDate = implDate.getTime();
		}
		else {
			publishStandardsExtCacheModel.implDate = Long.MIN_VALUE;
		}

		Date prevCmplyDate = getPrevCmplyDate();

		if (prevCmplyDate != null) {
			publishStandardsExtCacheModel.prevCmplyDate = prevCmplyDate.getTime();
		}
		else {
			publishStandardsExtCacheModel.prevCmplyDate = Long.MIN_VALUE;
		}

		publishStandardsExtCacheModel.waiver = getWaiver();

		String waiver = publishStandardsExtCacheModel.waiver;

		if ((waiver != null) && (waiver.length() == 0)) {
			publishStandardsExtCacheModel.waiver = null;
		}

		publishStandardsExtCacheModel.status = getStatus();

		String status = publishStandardsExtCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			publishStandardsExtCacheModel.status = null;
		}

		publishStandardsExtCacheModel.category = getCategory();

		String category = publishStandardsExtCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			publishStandardsExtCacheModel.category = null;
		}

		publishStandardsExtCacheModel.createdBy = getCreatedBy();

		String createdBy = publishStandardsExtCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			publishStandardsExtCacheModel.createdBy = null;
		}

		publishStandardsExtCacheModel.change = getChange();

		String change = publishStandardsExtCacheModel.change;

		if ((change != null) && (change.length() == 0)) {
			publishStandardsExtCacheModel.change = null;
		}

		publishStandardsExtCacheModel.isGlobal = getIsGlobal();

		String isGlobal = publishStandardsExtCacheModel.isGlobal;

		if ((isGlobal != null) && (isGlobal.length() == 0)) {
			publishStandardsExtCacheModel.isGlobal = null;
		}

		publishStandardsExtCacheModel.regionCode = getRegionCode();

		String regionCode = publishStandardsExtCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			publishStandardsExtCacheModel.regionCode = null;
		}

		publishStandardsExtCacheModel.notes = getNotes();

		String notes = publishStandardsExtCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			publishStandardsExtCacheModel.notes = null;
		}

		publishStandardsExtCacheModel.framework = getFramework();

		String framework = publishStandardsExtCacheModel.framework;

		if ((framework != null) && (framework.length() == 0)) {
			publishStandardsExtCacheModel.framework = null;
		}

		publishStandardsExtCacheModel.internalReference = getInternalReference();

		String internalReference = publishStandardsExtCacheModel.internalReference;

		if ((internalReference != null) && (internalReference.length() == 0)) {
			publishStandardsExtCacheModel.internalReference = null;
		}

		publishStandardsExtCacheModel.region = getRegion();

		String region = publishStandardsExtCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			publishStandardsExtCacheModel.region = null;
		}

		publishStandardsExtCacheModel.statusIdentifier = getStatusIdentifier();

		String statusIdentifier = publishStandardsExtCacheModel.statusIdentifier;

		if ((statusIdentifier != null) && (statusIdentifier.length() == 0)) {
			publishStandardsExtCacheModel.statusIdentifier = null;
		}

		publishStandardsExtCacheModel.sortOrder = getSortOrder();

		publishStandardsExtCacheModel.localeCode = getLocaleCode();

		String localeCode = publishStandardsExtCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			publishStandardsExtCacheModel.localeCode = null;
		}

		publishStandardsExtCacheModel.taxonomyId = getTaxonomyId();

		publishStandardsExtCacheModel.prntTaxonomyId = getPrntTaxonomyId();

		publishStandardsExtCacheModel.attachmentExists = getAttachmentExists();

		String attachmentExists = publishStandardsExtCacheModel.attachmentExists;

		if ((attachmentExists != null) && (attachmentExists.length() == 0)) {
			publishStandardsExtCacheModel.attachmentExists = null;
		}

		publishStandardsExtCacheModel.attachmentList = getAttachmentList();

		String attachmentList = publishStandardsExtCacheModel.attachmentList;

		if ((attachmentList != null) && (attachmentList.length() == 0)) {
			publishStandardsExtCacheModel.attachmentList = null;
		}

		publishStandardsExtCacheModel.linkExists = getLinkExists();

		String linkExists = publishStandardsExtCacheModel.linkExists;

		if ((linkExists != null) && (linkExists.length() == 0)) {
			publishStandardsExtCacheModel.linkExists = null;
		}

		publishStandardsExtCacheModel.linkList = getLinkList();

		String linkList = publishStandardsExtCacheModel.linkList;

		if ((linkList != null) && (linkList.length() == 0)) {
			publishStandardsExtCacheModel.linkList = null;
		}

		publishStandardsExtCacheModel.imageExists = getImageExists();

		String imageExists = publishStandardsExtCacheModel.imageExists;

		if ((imageExists != null) && (imageExists.length() == 0)) {
			publishStandardsExtCacheModel.imageExists = null;
		}

		publishStandardsExtCacheModel.stdXrefListStdId = getStdXrefListStdId();

		String stdXrefListStdId = publishStandardsExtCacheModel.stdXrefListStdId;

		if ((stdXrefListStdId != null) && (stdXrefListStdId.length() == 0)) {
			publishStandardsExtCacheModel.stdXrefListStdId = null;
		}

		publishStandardsExtCacheModel.attachmentStatus = getAttachmentStatus();

		String attachmentStatus = publishStandardsExtCacheModel.attachmentStatus;

		if ((attachmentStatus != null) && (attachmentStatus.length() == 0)) {
			publishStandardsExtCacheModel.attachmentStatus = null;
		}

		publishStandardsExtCacheModel.linkStatus = getLinkStatus();

		String linkStatus = publishStandardsExtCacheModel.linkStatus;

		if ((linkStatus != null) && (linkStatus.length() == 0)) {
			publishStandardsExtCacheModel.linkStatus = null;
		}

		publishStandardsExtCacheModel.imageStatus = getImageStatus();

		String imageStatus = publishStandardsExtCacheModel.imageStatus;

		if ((imageStatus != null) && (imageStatus.length() == 0)) {
			publishStandardsExtCacheModel.imageStatus = null;
		}

		publishStandardsExtCacheModel.imageIdList = getImageIdList();

		String imageIdList = publishStandardsExtCacheModel.imageIdList;

		if ((imageIdList != null) && (imageIdList.length() == 0)) {
			publishStandardsExtCacheModel.imageIdList = null;
		}

		publishStandardsExtCacheModel.indexOrder = getIndexOrder();

		publishStandardsExtCacheModel.publishTaxonomyId = getPublishTaxonomyId();

		publishStandardsExtCacheModel.parentTaxonomyId = getParentTaxonomyId();

		publishStandardsExtCacheModel.indexTitle = getIndexTitle();

		String indexTitle = publishStandardsExtCacheModel.indexTitle;

		if ((indexTitle != null) && (indexTitle.length() == 0)) {
			publishStandardsExtCacheModel.indexTitle = null;
		}

		publishStandardsExtCacheModel.indexLvl = getIndexLvl();

		publishStandardsExtCacheModel.taxonomyPath = getTaxonomyPath();

		String taxonomyPath = publishStandardsExtCacheModel.taxonomyPath;

		if ((taxonomyPath != null) && (taxonomyPath.length() == 0)) {
			publishStandardsExtCacheModel.taxonomyPath = null;
		}

		publishStandardsExtCacheModel.levelSortOrder = getLevelSortOrder();

		publishStandardsExtCacheModel.indexDescription = getIndexDescription();

		String indexDescription = publishStandardsExtCacheModel.indexDescription;

		if ((indexDescription != null) && (indexDescription.length() == 0)) {
			publishStandardsExtCacheModel.indexDescription = null;
		}

		publishStandardsExtCacheModel.matchedId = getMatchedId();

		String matchedId = publishStandardsExtCacheModel.matchedId;

		if ((matchedId != null) && (matchedId.length() == 0)) {
			publishStandardsExtCacheModel.matchedId = null;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			publishStandardsExtCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			publishStandardsExtCacheModel.expiryDate = Long.MIN_VALUE;
		}

		Date prevExpiryDate = getPrevExpiryDate();

		if (prevExpiryDate != null) {
			publishStandardsExtCacheModel.prevExpiryDate = prevExpiryDate.getTime();
		}
		else {
			publishStandardsExtCacheModel.prevExpiryDate = Long.MIN_VALUE;
		}

		publishStandardsExtCacheModel.expiredStdId = getExpiredStdId();

		String expiredStdId = publishStandardsExtCacheModel.expiredStdId;

		if ((expiredStdId != null) && (expiredStdId.length() == 0)) {
			publishStandardsExtCacheModel.expiredStdId = null;
		}

		publishStandardsExtCacheModel.flagStdId = getFlagStdId();

		String flagStdId = publishStandardsExtCacheModel.flagStdId;

		if ((flagStdId != null) && (flagStdId.length() == 0)) {
			publishStandardsExtCacheModel.flagStdId = null;
		}

		publishStandardsExtCacheModel.prevFlagStdId = getPrevFlagStdId();

		String prevFlagStdId = publishStandardsExtCacheModel.prevFlagStdId;

		if ((prevFlagStdId != null) && (prevFlagStdId.length() == 0)) {
			publishStandardsExtCacheModel.prevFlagStdId = null;
		}

		publishStandardsExtCacheModel.titleChange = getTitleChange();

		String titleChange = publishStandardsExtCacheModel.titleChange;

		if ((titleChange != null) && (titleChange.length() == 0)) {
			publishStandardsExtCacheModel.titleChange = null;
		}

		publishStandardsExtCacheModel.cmplyChange = getCmplyChange();

		String cmplyChange = publishStandardsExtCacheModel.cmplyChange;

		if ((cmplyChange != null) && (cmplyChange.length() == 0)) {
			publishStandardsExtCacheModel.cmplyChange = null;
		}

		publishStandardsExtCacheModel.exprChange = getExprChange();

		String exprChange = publishStandardsExtCacheModel.exprChange;

		if ((exprChange != null) && (exprChange.length() == 0)) {
			publishStandardsExtCacheModel.exprChange = null;
		}

		publishStandardsExtCacheModel.hlcChange = getHlcChange();

		String hlcChange = publishStandardsExtCacheModel.hlcChange;

		if ((hlcChange != null) && (hlcChange.length() == 0)) {
			publishStandardsExtCacheModel.hlcChange = null;
		}

		publishStandardsExtCacheModel.changedStatus = getChangedStatus();

		String changedStatus = publishStandardsExtCacheModel.changedStatus;

		if ((changedStatus != null) && (changedStatus.length() == 0)) {
			publishStandardsExtCacheModel.changedStatus = null;
		}

		return publishStandardsExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(119);

		sb.append("{publishStdId=");
		sb.append(getPublishStdId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", parentPublishId=");
		sb.append(getParentPublishId());
		sb.append(", stdTyp=");
		sb.append(getStdTyp());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", prevPublishTitle=");
		sb.append(getPrevPublishTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", prevDescription=");
		sb.append(getPrevDescription());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", businessOwner=");
		sb.append(getBusinessOwner());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", implDate=");
		sb.append(getImplDate());
		sb.append(", prevCmplyDate=");
		sb.append(getPrevCmplyDate());
		sb.append(", waiver=");
		sb.append(getWaiver());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", change=");
		sb.append(getChange());
		sb.append(", isGlobal=");
		sb.append(getIsGlobal());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", framework=");
		sb.append(getFramework());
		sb.append(", internalReference=");
		sb.append(getInternalReference());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", statusIdentifier=");
		sb.append(getStatusIdentifier());
		sb.append(", sortOrder=");
		sb.append(getSortOrder());
		sb.append(", localeCode=");
		sb.append(getLocaleCode());
		sb.append(", taxonomyId=");
		sb.append(getTaxonomyId());
		sb.append(", prntTaxonomyId=");
		sb.append(getPrntTaxonomyId());
		sb.append(", attachmentExists=");
		sb.append(getAttachmentExists());
		sb.append(", attachmentList=");
		sb.append(getAttachmentList());
		sb.append(", linkExists=");
		sb.append(getLinkExists());
		sb.append(", linkList=");
		sb.append(getLinkList());
		sb.append(", imageExists=");
		sb.append(getImageExists());
		sb.append(", stdXrefListStdId=");
		sb.append(getStdXrefListStdId());
		sb.append(", attachmentStatus=");
		sb.append(getAttachmentStatus());
		sb.append(", linkStatus=");
		sb.append(getLinkStatus());
		sb.append(", imageStatus=");
		sb.append(getImageStatus());
		sb.append(", imageIdList=");
		sb.append(getImageIdList());
		sb.append(", indexOrder=");
		sb.append(getIndexOrder());
		sb.append(", publishTaxonomyId=");
		sb.append(getPublishTaxonomyId());
		sb.append(", parentTaxonomyId=");
		sb.append(getParentTaxonomyId());
		sb.append(", indexTitle=");
		sb.append(getIndexTitle());
		sb.append(", indexLvl=");
		sb.append(getIndexLvl());
		sb.append(", taxonomyPath=");
		sb.append(getTaxonomyPath());
		sb.append(", levelSortOrder=");
		sb.append(getLevelSortOrder());
		sb.append(", indexDescription=");
		sb.append(getIndexDescription());
		sb.append(", matchedId=");
		sb.append(getMatchedId());
		sb.append(", expiryDate=");
		sb.append(getExpiryDate());
		sb.append(", prevExpiryDate=");
		sb.append(getPrevExpiryDate());
		sb.append(", expiredStdId=");
		sb.append(getExpiredStdId());
		sb.append(", flagStdId=");
		sb.append(getFlagStdId());
		sb.append(", prevFlagStdId=");
		sb.append(getPrevFlagStdId());
		sb.append(", titleChange=");
		sb.append(getTitleChange());
		sb.append(", cmplyChange=");
		sb.append(getCmplyChange());
		sb.append(", exprChange=");
		sb.append(getExprChange());
		sb.append(", hlcChange=");
		sb.append(getHlcChange());
		sb.append(", changedStatus=");
		sb.append(getChangedStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(181);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.PublishStandardsExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishStdId</column-name><column-value><![CDATA[");
		sb.append(getPublishStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentPublishId</column-name><column-value><![CDATA[");
		sb.append(getParentPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdTyp</column-name><column-value><![CDATA[");
		sb.append(getStdTyp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevPublishTitle</column-name><column-value><![CDATA[");
		sb.append(getPrevPublishTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevDescription</column-name><column-value><![CDATA[");
		sb.append(getPrevDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessOwner</column-name><column-value><![CDATA[");
		sb.append(getBusinessOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>implDate</column-name><column-value><![CDATA[");
		sb.append(getImplDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevCmplyDate</column-name><column-value><![CDATA[");
		sb.append(getPrevCmplyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>waiver</column-name><column-value><![CDATA[");
		sb.append(getWaiver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>change</column-name><column-value><![CDATA[");
		sb.append(getChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isGlobal</column-name><column-value><![CDATA[");
		sb.append(getIsGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>framework</column-name><column-value><![CDATA[");
		sb.append(getFramework());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalReference</column-name><column-value><![CDATA[");
		sb.append(getInternalReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusIdentifier</column-name><column-value><![CDATA[");
		sb.append(getStatusIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sortOrder</column-name><column-value><![CDATA[");
		sb.append(getSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyId</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prntTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getPrntTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentExists</column-name><column-value><![CDATA[");
		sb.append(getAttachmentExists());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentList</column-name><column-value><![CDATA[");
		sb.append(getAttachmentList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkExists</column-name><column-value><![CDATA[");
		sb.append(getLinkExists());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkList</column-name><column-value><![CDATA[");
		sb.append(getLinkList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageExists</column-name><column-value><![CDATA[");
		sb.append(getImageExists());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdXrefListStdId</column-name><column-value><![CDATA[");
		sb.append(getStdXrefListStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentStatus</column-name><column-value><![CDATA[");
		sb.append(getAttachmentStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkStatus</column-name><column-value><![CDATA[");
		sb.append(getLinkStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageStatus</column-name><column-value><![CDATA[");
		sb.append(getImageStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageIdList</column-name><column-value><![CDATA[");
		sb.append(getImageIdList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexOrder</column-name><column-value><![CDATA[");
		sb.append(getIndexOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getPublishTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getParentTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexTitle</column-name><column-value><![CDATA[");
		sb.append(getIndexTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexLvl</column-name><column-value><![CDATA[");
		sb.append(getIndexLvl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyPath</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelSortOrder</column-name><column-value><![CDATA[");
		sb.append(getLevelSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexDescription</column-name><column-value><![CDATA[");
		sb.append(getIndexDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matchedId</column-name><column-value><![CDATA[");
		sb.append(getMatchedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiryDate</column-name><column-value><![CDATA[");
		sb.append(getExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevExpiryDate</column-name><column-value><![CDATA[");
		sb.append(getPrevExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredStdId</column-name><column-value><![CDATA[");
		sb.append(getExpiredStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStdId</column-name><column-value><![CDATA[");
		sb.append(getFlagStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevFlagStdId</column-name><column-value><![CDATA[");
		sb.append(getPrevFlagStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleChange</column-name><column-value><![CDATA[");
		sb.append(getTitleChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cmplyChange</column-name><column-value><![CDATA[");
		sb.append(getCmplyChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exprChange</column-name><column-value><![CDATA[");
		sb.append(getExprChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hlcChange</column-name><column-value><![CDATA[");
		sb.append(getHlcChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>changedStatus</column-name><column-value><![CDATA[");
		sb.append(getChangedStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PublishStandardsExt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PublishStandardsExt.class
		};
	private long _publishStdId;
	private long _publishId;
	private long _stdId;
	private long _parentPublishId;
	private String _stdTyp;
	private String _title;
	private String _prevPublishTitle;
	private String _description;
	private String _prevDescription;
	private String _author;
	private String _businessOwner;
	private Date _effectiveDate;
	private Date _implDate;
	private Date _prevCmplyDate;
	private String _waiver;
	private String _status;
	private String _category;
	private String _createdBy;
	private String _change;
	private String _isGlobal;
	private String _regionCode;
	private String _notes;
	private String _framework;
	private String _internalReference;
	private String _region;
	private String _statusIdentifier;
	private long _sortOrder;
	private String _localeCode;
	private long _taxonomyId;
	private long _prntTaxonomyId;
	private String _attachmentExists;
	private String _attachmentList;
	private String _linkExists;
	private String _linkList;
	private String _imageExists;
	private String _stdXrefListStdId;
	private String _attachmentStatus;
	private String _linkStatus;
	private String _imageStatus;
	private String _imageIdList;
	private long _indexOrder;
	private long _publishTaxonomyId;
	private long _parentTaxonomyId;
	private String _indexTitle;
	private long _indexLvl;
	private String _taxonomyPath;
	private long _levelSortOrder;
	private String _indexDescription;
	private String _matchedId;
	private Date _expiryDate;
	private Date _prevExpiryDate;
	private String _expiredStdId;
	private String _flagStdId;
	private String _prevFlagStdId;
	private String _titleChange;
	private String _cmplyChange;
	private String _exprChange;
	private String _hlcChange;
	private String _changedStatus;
	private PublishStandardsExt _escapedModel;
}