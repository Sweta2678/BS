/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate;
import com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SpreadSheetAttributeUpdate service. Represents a row in the &quot;SPREADSHEET_ATTR_UPDT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpreadSheetAttributeUpdateImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see SpreadSheetAttributeUpdateImpl
 * @see com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate
 * @see com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdateModel
 * @generated
 */
public class SpreadSheetAttributeUpdateModelImpl extends BaseModelImpl<SpreadSheetAttributeUpdate>
	implements SpreadSheetAttributeUpdateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a spread sheet attribute update model instance should use the {@link com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate} interface instead.
	 */
	public static final String TABLE_NAME = "SPREADSHEET_ATTR_UPDT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SPREADSHEET_ID", Types.BIGINT },
			{ "UPDT_RQST_TITLE_TXT", Types.VARCHAR },
			{ "UPDT_RQST_STAT_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP },
			{ "SPREADSHEET_TXT", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPREADSHEET_ATTR_UPDT (SPREADSHEET_ID LONG not null primary key,UPDT_RQST_TITLE_TXT VARCHAR(75) null,UPDT_RQST_STAT_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,SPREADSHEET_TXT VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPREADSHEET_ATTR_UPDT";
	public static final String ORDER_BY_JPQL = " ORDER BY spreadSheetAttributeUpdate.updatedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPREADSHEET_ATTR_UPDT.LST_UPDT_TS DESC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate"),
			true);
	public static long STATUS_COLUMN_BITMASK = 1L;
	public static long UPDATEDDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate"));

	public SpreadSheetAttributeUpdateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _speardSheetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpeardSheetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _speardSheetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpreadSheetAttributeUpdate.class;
	}

	@Override
	public String getModelClassName() {
		return SpreadSheetAttributeUpdate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("speardSheetId", getSpeardSheetId());
		attributes.put("requestTitle", getRequestTitle());
		attributes.put("status", getStatus());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());
		attributes.put("spreadSheet", getSpreadSheet());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long speardSheetId = (Long)attributes.get("speardSheetId");

		if (speardSheetId != null) {
			setSpeardSheetId(speardSheetId);
		}

		String requestTitle = (String)attributes.get("requestTitle");

		if (requestTitle != null) {
			setRequestTitle(requestTitle);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}

		String spreadSheet = (String)attributes.get("spreadSheet");

		if (spreadSheet != null) {
			setSpreadSheet(spreadSheet);
		}
	}

	@Override
	public long getSpeardSheetId() {
		return _speardSheetId;
	}

	@Override
	public void setSpeardSheetId(long speardSheetId) {
		_speardSheetId = speardSheetId;
	}

	@Override
	public String getRequestTitle() {
		if (_requestTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestTitle;
		}
	}

	@Override
	public void setRequestTitle(String requestTitle) {
		_requestTitle = requestTitle;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_columnBitmask = -1L;

		_updatedDate = updatedDate;
	}

	@Override
	public String getSpreadSheet() {
		if (_spreadSheet == null) {
			return StringPool.BLANK;
		}
		else {
			return _spreadSheet;
		}
	}

	@Override
	public void setSpreadSheet(String spreadSheet) {
		_spreadSheet = spreadSheet;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpreadSheetAttributeUpdate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpreadSheetAttributeUpdate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpreadSheetAttributeUpdate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpreadSheetAttributeUpdateImpl spreadSheetAttributeUpdateImpl = new SpreadSheetAttributeUpdateImpl();

		spreadSheetAttributeUpdateImpl.setSpeardSheetId(getSpeardSheetId());
		spreadSheetAttributeUpdateImpl.setRequestTitle(getRequestTitle());
		spreadSheetAttributeUpdateImpl.setStatus(getStatus());
		spreadSheetAttributeUpdateImpl.setCreatorId(getCreatorId());
		spreadSheetAttributeUpdateImpl.setCreatedDate(getCreatedDate());
		spreadSheetAttributeUpdateImpl.setUpdatedBy(getUpdatedBy());
		spreadSheetAttributeUpdateImpl.setUpdatedDate(getUpdatedDate());
		spreadSheetAttributeUpdateImpl.setSpreadSheet(getSpreadSheet());

		spreadSheetAttributeUpdateImpl.resetOriginalValues();

		return spreadSheetAttributeUpdateImpl;
	}

	@Override
	public int compareTo(SpreadSheetAttributeUpdate spreadSheetAttributeUpdate) {
		int value = 0;

		value = DateUtil.compareTo(getUpdatedDate(),
				spreadSheetAttributeUpdate.getUpdatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpreadSheetAttributeUpdate)) {
			return false;
		}

		SpreadSheetAttributeUpdate spreadSheetAttributeUpdate = (SpreadSheetAttributeUpdate)obj;

		long primaryKey = spreadSheetAttributeUpdate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpreadSheetAttributeUpdateModelImpl spreadSheetAttributeUpdateModelImpl = this;

		spreadSheetAttributeUpdateModelImpl._originalStatus = spreadSheetAttributeUpdateModelImpl._status;

		spreadSheetAttributeUpdateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpreadSheetAttributeUpdate> toCacheModel() {
		SpreadSheetAttributeUpdateCacheModel spreadSheetAttributeUpdateCacheModel =
			new SpreadSheetAttributeUpdateCacheModel();

		spreadSheetAttributeUpdateCacheModel.speardSheetId = getSpeardSheetId();

		spreadSheetAttributeUpdateCacheModel.requestTitle = getRequestTitle();

		String requestTitle = spreadSheetAttributeUpdateCacheModel.requestTitle;

		if ((requestTitle != null) && (requestTitle.length() == 0)) {
			spreadSheetAttributeUpdateCacheModel.requestTitle = null;
		}

		spreadSheetAttributeUpdateCacheModel.status = getStatus();

		String status = spreadSheetAttributeUpdateCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			spreadSheetAttributeUpdateCacheModel.status = null;
		}

		spreadSheetAttributeUpdateCacheModel.creatorId = getCreatorId();

		String creatorId = spreadSheetAttributeUpdateCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			spreadSheetAttributeUpdateCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			spreadSheetAttributeUpdateCacheModel.createdDate = createdDate.getTime();
		}
		else {
			spreadSheetAttributeUpdateCacheModel.createdDate = Long.MIN_VALUE;
		}

		spreadSheetAttributeUpdateCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = spreadSheetAttributeUpdateCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			spreadSheetAttributeUpdateCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			spreadSheetAttributeUpdateCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			spreadSheetAttributeUpdateCacheModel.updatedDate = Long.MIN_VALUE;
		}

		spreadSheetAttributeUpdateCacheModel.spreadSheet = getSpreadSheet();

		String spreadSheet = spreadSheetAttributeUpdateCacheModel.spreadSheet;

		if ((spreadSheet != null) && (spreadSheet.length() == 0)) {
			spreadSheetAttributeUpdateCacheModel.spreadSheet = null;
		}

		return spreadSheetAttributeUpdateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{speardSheetId=");
		sb.append(getSpeardSheetId());
		sb.append(", requestTitle=");
		sb.append(getRequestTitle());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", spreadSheet=");
		sb.append(getSpreadSheet());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.SpreadSheetAttributeUpdate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>speardSheetId</column-name><column-value><![CDATA[");
		sb.append(getSpeardSheetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestTitle</column-name><column-value><![CDATA[");
		sb.append(getRequestTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spreadSheet</column-name><column-value><![CDATA[");
		sb.append(getSpreadSheet());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpreadSheetAttributeUpdate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpreadSheetAttributeUpdate.class
		};
	private long _speardSheetId;
	private String _requestTitle;
	private String _status;
	private String _originalStatus;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private String _spreadSheet;
	private long _columnBitmask;
	private SpreadSheetAttributeUpdate _escapedModel;
}