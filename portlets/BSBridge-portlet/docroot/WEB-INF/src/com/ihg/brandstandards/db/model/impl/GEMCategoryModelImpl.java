/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMCategory;
import com.ihg.brandstandards.db.model.GEMCategoryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMCategory service. Represents a row in the &quot;GEM_CATGY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMCategoryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMCategoryImpl
 * @see com.ihg.brandstandards.db.model.GEMCategory
 * @see com.ihg.brandstandards.db.model.GEMCategoryModel
 * @generated
 */
public class GEMCategoryModelImpl extends BaseModelImpl<GEMCategory>
	implements GEMCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m category model instance should use the {@link com.ihg.brandstandards.db.model.GEMCategory} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_CATGY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_CATGY_ID", Types.BIGINT },
			{ "CMS_CATGY_ID", Types.BIGINT },
			{ "GEM_CATGY_CD", Types.VARCHAR },
			{ "GEM_PRNT_CATGY_ID", Types.VARCHAR },
			{ "GEM_CATGY_NM", Types.VARCHAR },
			{ "GEM_CATGY_VIEW_TYP", Types.VARCHAR },
			{ "GEM_CATGY_ANS_TXT", Types.VARCHAR },
			{ "DUPLICATE_VAL_TXT", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_CATGY (GEM_CATGY_ID LONG not null primary key,CMS_CATGY_ID LONG,GEM_CATGY_CD VARCHAR(75) null,GEM_PRNT_CATGY_ID VARCHAR(75) null,GEM_CATGY_NM VARCHAR(75) null,GEM_CATGY_VIEW_TYP VARCHAR(75) null,GEM_CATGY_ANS_TXT VARCHAR(75) null,DUPLICATE_VAL_TXT VARCHAR(75) null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_CATGY";
	public static final String ORDER_BY_JPQL = " ORDER BY gemCategory.displayOrderNumber ASC, gemCategory.categoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_CATGY.DISP_ORDER_NBR ASC, GEM_CATGY.GEM_CATGY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.GEMCategory"),
			true);
	public static long CATEGORYNAME_COLUMN_BITMASK = 1L;
	public static long CMSCATEGORYID_COLUMN_BITMASK = 2L;
	public static long GEMCATEGORYCODE_COLUMN_BITMASK = 4L;
	public static long GEMPRNTCATEGORYID_COLUMN_BITMASK = 8L;
	public static long DISPLAYORDERNUMBER_COLUMN_BITMASK = 16L;
	public static long CATEGORYID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMCategory"));

	public GEMCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCategoryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _categoryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMCategory.class;
	}

	@Override
	public String getModelClassName() {
		return GEMCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoryId", getCategoryId());
		attributes.put("cmsCategoryId", getCmsCategoryId());
		attributes.put("gemCategoryCode", getGemCategoryCode());
		attributes.put("gemPrntCategoryId", getGemPrntCategoryId());
		attributes.put("categoryName", getCategoryName());
		attributes.put("categoryViewType", getCategoryViewType());
		attributes.put("categoryAnsAll", getCategoryAnsAll());
		attributes.put("duplicatable", getDuplicatable());
		attributes.put("displayOrderNumber", getDisplayOrderNumber());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long cmsCategoryId = (Long)attributes.get("cmsCategoryId");

		if (cmsCategoryId != null) {
			setCmsCategoryId(cmsCategoryId);
		}

		String gemCategoryCode = (String)attributes.get("gemCategoryCode");

		if (gemCategoryCode != null) {
			setGemCategoryCode(gemCategoryCode);
		}

		String gemPrntCategoryId = (String)attributes.get("gemPrntCategoryId");

		if (gemPrntCategoryId != null) {
			setGemPrntCategoryId(gemPrntCategoryId);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		String categoryViewType = (String)attributes.get("categoryViewType");

		if (categoryViewType != null) {
			setCategoryViewType(categoryViewType);
		}

		String categoryAnsAll = (String)attributes.get("categoryAnsAll");

		if (categoryAnsAll != null) {
			setCategoryAnsAll(categoryAnsAll);
		}

		String duplicatable = (String)attributes.get("duplicatable");

		if (duplicatable != null) {
			setDuplicatable(duplicatable);
		}

		Long displayOrderNumber = (Long)attributes.get("displayOrderNumber");

		if (displayOrderNumber != null) {
			setDisplayOrderNumber(displayOrderNumber);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask = -1L;

		_categoryId = categoryId;
	}

	@Override
	public long getCmsCategoryId() {
		return _cmsCategoryId;
	}

	@Override
	public void setCmsCategoryId(long cmsCategoryId) {
		_columnBitmask |= CMSCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCmsCategoryId) {
			_setOriginalCmsCategoryId = true;

			_originalCmsCategoryId = _cmsCategoryId;
		}

		_cmsCategoryId = cmsCategoryId;
	}

	public long getOriginalCmsCategoryId() {
		return _originalCmsCategoryId;
	}

	@Override
	public String getGemCategoryCode() {
		if (_gemCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _gemCategoryCode;
		}
	}

	@Override
	public void setGemCategoryCode(String gemCategoryCode) {
		_columnBitmask |= GEMCATEGORYCODE_COLUMN_BITMASK;

		if (_originalGemCategoryCode == null) {
			_originalGemCategoryCode = _gemCategoryCode;
		}

		_gemCategoryCode = gemCategoryCode;
	}

	public String getOriginalGemCategoryCode() {
		return GetterUtil.getString(_originalGemCategoryCode);
	}

	@Override
	public String getGemPrntCategoryId() {
		if (_gemPrntCategoryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _gemPrntCategoryId;
		}
	}

	@Override
	public void setGemPrntCategoryId(String gemPrntCategoryId) {
		_columnBitmask |= GEMPRNTCATEGORYID_COLUMN_BITMASK;

		if (_originalGemPrntCategoryId == null) {
			_originalGemPrntCategoryId = _gemPrntCategoryId;
		}

		_gemPrntCategoryId = gemPrntCategoryId;
	}

	public String getOriginalGemPrntCategoryId() {
		return GetterUtil.getString(_originalGemPrntCategoryId);
	}

	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_columnBitmask |= CATEGORYNAME_COLUMN_BITMASK;

		if (_originalCategoryName == null) {
			_originalCategoryName = _categoryName;
		}

		_categoryName = categoryName;
	}

	public String getOriginalCategoryName() {
		return GetterUtil.getString(_originalCategoryName);
	}

	@Override
	public String getCategoryViewType() {
		if (_categoryViewType == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryViewType;
		}
	}

	@Override
	public void setCategoryViewType(String categoryViewType) {
		_categoryViewType = categoryViewType;
	}

	@Override
	public String getCategoryAnsAll() {
		if (_categoryAnsAll == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryAnsAll;
		}
	}

	@Override
	public void setCategoryAnsAll(String categoryAnsAll) {
		_categoryAnsAll = categoryAnsAll;
	}

	@Override
	public String getDuplicatable() {
		if (_duplicatable == null) {
			return StringPool.BLANK;
		}
		else {
			return _duplicatable;
		}
	}

	@Override
	public void setDuplicatable(String duplicatable) {
		_duplicatable = duplicatable;
	}

	@Override
	public long getDisplayOrderNumber() {
		return _displayOrderNumber;
	}

	@Override
	public void setDisplayOrderNumber(long displayOrderNumber) {
		_columnBitmask = -1L;

		_displayOrderNumber = displayOrderNumber;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMCategoryImpl gemCategoryImpl = new GEMCategoryImpl();

		gemCategoryImpl.setCategoryId(getCategoryId());
		gemCategoryImpl.setCmsCategoryId(getCmsCategoryId());
		gemCategoryImpl.setGemCategoryCode(getGemCategoryCode());
		gemCategoryImpl.setGemPrntCategoryId(getGemPrntCategoryId());
		gemCategoryImpl.setCategoryName(getCategoryName());
		gemCategoryImpl.setCategoryViewType(getCategoryViewType());
		gemCategoryImpl.setCategoryAnsAll(getCategoryAnsAll());
		gemCategoryImpl.setDuplicatable(getDuplicatable());
		gemCategoryImpl.setDisplayOrderNumber(getDisplayOrderNumber());
		gemCategoryImpl.setCreatorId(getCreatorId());
		gemCategoryImpl.setCreatedDate(getCreatedDate());
		gemCategoryImpl.setUpdatedBy(getUpdatedBy());
		gemCategoryImpl.setUpdatedDate(getUpdatedDate());

		gemCategoryImpl.resetOriginalValues();

		return gemCategoryImpl;
	}

	@Override
	public int compareTo(GEMCategory gemCategory) {
		int value = 0;

		if (getDisplayOrderNumber() < gemCategory.getDisplayOrderNumber()) {
			value = -1;
		}
		else if (getDisplayOrderNumber() > gemCategory.getDisplayOrderNumber()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getCategoryId() < gemCategory.getCategoryId()) {
			value = -1;
		}
		else if (getCategoryId() > gemCategory.getCategoryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMCategory)) {
			return false;
		}

		GEMCategory gemCategory = (GEMCategory)obj;

		long primaryKey = gemCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GEMCategoryModelImpl gemCategoryModelImpl = this;

		gemCategoryModelImpl._originalCmsCategoryId = gemCategoryModelImpl._cmsCategoryId;

		gemCategoryModelImpl._setOriginalCmsCategoryId = false;

		gemCategoryModelImpl._originalGemCategoryCode = gemCategoryModelImpl._gemCategoryCode;

		gemCategoryModelImpl._originalGemPrntCategoryId = gemCategoryModelImpl._gemPrntCategoryId;

		gemCategoryModelImpl._originalCategoryName = gemCategoryModelImpl._categoryName;

		gemCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GEMCategory> toCacheModel() {
		GEMCategoryCacheModel gemCategoryCacheModel = new GEMCategoryCacheModel();

		gemCategoryCacheModel.categoryId = getCategoryId();

		gemCategoryCacheModel.cmsCategoryId = getCmsCategoryId();

		gemCategoryCacheModel.gemCategoryCode = getGemCategoryCode();

		String gemCategoryCode = gemCategoryCacheModel.gemCategoryCode;

		if ((gemCategoryCode != null) && (gemCategoryCode.length() == 0)) {
			gemCategoryCacheModel.gemCategoryCode = null;
		}

		gemCategoryCacheModel.gemPrntCategoryId = getGemPrntCategoryId();

		String gemPrntCategoryId = gemCategoryCacheModel.gemPrntCategoryId;

		if ((gemPrntCategoryId != null) && (gemPrntCategoryId.length() == 0)) {
			gemCategoryCacheModel.gemPrntCategoryId = null;
		}

		gemCategoryCacheModel.categoryName = getCategoryName();

		String categoryName = gemCategoryCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			gemCategoryCacheModel.categoryName = null;
		}

		gemCategoryCacheModel.categoryViewType = getCategoryViewType();

		String categoryViewType = gemCategoryCacheModel.categoryViewType;

		if ((categoryViewType != null) && (categoryViewType.length() == 0)) {
			gemCategoryCacheModel.categoryViewType = null;
		}

		gemCategoryCacheModel.categoryAnsAll = getCategoryAnsAll();

		String categoryAnsAll = gemCategoryCacheModel.categoryAnsAll;

		if ((categoryAnsAll != null) && (categoryAnsAll.length() == 0)) {
			gemCategoryCacheModel.categoryAnsAll = null;
		}

		gemCategoryCacheModel.duplicatable = getDuplicatable();

		String duplicatable = gemCategoryCacheModel.duplicatable;

		if ((duplicatable != null) && (duplicatable.length() == 0)) {
			gemCategoryCacheModel.duplicatable = null;
		}

		gemCategoryCacheModel.displayOrderNumber = getDisplayOrderNumber();

		gemCategoryCacheModel.creatorId = getCreatorId();

		String creatorId = gemCategoryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemCategoryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemCategoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemCategoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemCategoryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemCategoryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemCategoryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemCategoryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemCategoryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{categoryId=");
		sb.append(getCategoryId());
		sb.append(", cmsCategoryId=");
		sb.append(getCmsCategoryId());
		sb.append(", gemCategoryCode=");
		sb.append(getGemCategoryCode());
		sb.append(", gemPrntCategoryId=");
		sb.append(getGemPrntCategoryId());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", categoryViewType=");
		sb.append(getCategoryViewType());
		sb.append(", categoryAnsAll=");
		sb.append(getCategoryAnsAll());
		sb.append(", duplicatable=");
		sb.append(getDuplicatable());
		sb.append(", displayOrderNumber=");
		sb.append(getDisplayOrderNumber());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cmsCategoryId</column-name><column-value><![CDATA[");
		sb.append(getCmsCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gemCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getGemCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gemPrntCategoryId</column-name><column-value><![CDATA[");
		sb.append(getGemPrntCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryViewType</column-name><column-value><![CDATA[");
		sb.append(getCategoryViewType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryAnsAll</column-name><column-value><![CDATA[");
		sb.append(getCategoryAnsAll());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duplicatable</column-name><column-value><![CDATA[");
		sb.append(getDuplicatable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMCategory.class
		};
	private long _categoryId;
	private long _cmsCategoryId;
	private long _originalCmsCategoryId;
	private boolean _setOriginalCmsCategoryId;
	private String _gemCategoryCode;
	private String _originalGemCategoryCode;
	private String _gemPrntCategoryId;
	private String _originalGemPrntCategoryId;
	private String _categoryName;
	private String _originalCategoryName;
	private String _categoryViewType;
	private String _categoryAnsAll;
	private String _duplicatable;
	private long _displayOrderNumber;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private GEMCategory _escapedModel;
}