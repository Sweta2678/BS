/**
 * 
 */
package com.ihg.me2.brandstandards.custom.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.Map;

import org.junit.Ignore;
import org.junit.Test;

import com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria;

/**
 * @author kryvora
 *
 */
public class QueryUtilsTest
{
    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getSupportingMaterial(long, java.lang.String, java.lang.String, java.lang.String, java.util.Map)}.
     */
    @Test
    public final void testGetSupportingMaterial()
    {
        String SAMPLE_QUERY = "SELECT *  FROM  ( WITH curr_publish_id AS (SELECT PUBLISH_ID  FROM PUBLISH WHERE publish_environment_nm = 'PRODUCTION' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX' ), ATTACHMENTS AS (SELECT std.STD_ID AS ATTCHSTDID, attch.publish_std_attachment_id AS STDATTCHID, attch.attachment_typ AS ATTTYPE, attch.attachment_title_txt AS ATTTITLE, attch.attachment_path_txt AS ATTPATH, attch.prnt_publish_std_attachment_id AS ATTPRNTID ,attch.CHG_STAT_CD AS ATTSTATCD,attch.LOCALE_CD AS ATTLOCALECD, null AS EXTSTDID,null AS EXTLINKID,null AS EXTTITLE,null AS EXTURL,null AS EXTPRNTID,null AS EXTSTATCD,null AS EXTLOCALECD FROM publish_std_attachment attch, PUBLISH_STD std, PUBLISH_CTRY_STD pcs WHERE attch.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID AND std.PUBLISH_ID =  (SELECT PUBLISH_ID FROM curr_publish_id ) AND attch.PUBLISH_STD_VER_ID = 1234 AND pcs.publish_std_ver_id = std.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA' AND  (attch.PRNT_PUBLISH_STD_ATTACHMENT_ID = attch.PUBLISH_STD_ATTACHMENT_ID or attch.locale_cd in ( 'en_US','en_GB' ))),  LINKS AS ( SELECT null AS ATTCHSTDID,null AS STDATTCHID,null AS ATTTYPE,null AS ATTTITLE,null AS ATTPATH,null AS ATTPRNTID,null AS ATTSTATCD,null AS ATTLOCALECD, std.STD_ID, links.PUBLISH_STD_EXTL_LINK_ID, links.link_title_txt, links.url_txt, links.prnt_publish_std_extl_link_id,links.CHG_STAT_CD, links.LOCALE_CD FROM PUBLISH_STD_EXTL_LINK links, PUBLISH_STD std, PUBLISH_CTRY_STD pcs  WHERE links.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND links.PUBLISH_STD_VER_ID = 1234 AND pcs.publish_std_ver_id = std.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA' AND (links.publish_std_extl_link_id = links.prnt_publish_std_extl_link_id or links.locale_cd in ( 'en_US','en_GB' ))) (select * from ATTACHMENTS union select * from links))";
        long stdId = 1234L;
        long publishId = 1001;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        String query = QueryUtils.getSupportingMaterial(publishId, stdId, localeCode, countryCode);
//        System.out.println("Supporting Materials Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getRelatedImages(long, java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGetRelatedImages()
    {
        String SAMPLE_QUERY = "SELECT a.PUBLISH_STD_IMAGE_ID, a.IMAGE_IDENTIFIER, a.IMAGE_TITLE_TXT, a.PRNT_PUBLISH_STD_IMAGE_ID,a.CHG_STAT_CD, b.STD_ID, a.LOCALE_CD FROM PUBLISH_STD_IMAGE a JOIN PUBLISH_STD b ON (a.PUBLISH_STD_VER_ID = b.PUBLISH_STD_VER_ID), PUBLISH_CTRY_STD pcs where a.PUBLISH_STD_VER_ID IN (1234) and pcs.publish_std_ver_id = b.publish_std_ver_id and pcs.ctry_nm_cd = 'USA' and (a.PUBLISH_STD_IMAGE_ID = a.PRNT_PUBLISH_STD_IMAGE_ID or a.LOCALE_CD in ('en_US','en_GB'))  AND b.PUBLISH_ID in (SELECT PUBLISH_ID from PUBLISH where publish_environment_nm = 'PRODUCTION' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX')";
        long stdId = 1234L;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = QueryUtils.getRelatedImages(stdId, localeCode, countryCode);
//        System.out.println("Related Image Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getArticle(java.lang.String, long, long)}.
     */
    @Test
    public final void testGetArticle()
    {
        String SAMPLE_QUERY = "WITH ARTICLE AS (SELECT A.RESOURCEPRIMKEY FROM JOURNALARTICLE A  WHERE A.STRUCTUREID ='111111') (SELECT C.CLASSPK FROM ASSETENTRY C JOIN ASSETENTRIES_ASSETCATEGORIES D ON (C.ENTRYID = D.ENTRYID) WHERE D.CATEGORYID = 234 AND C.CLASSPK IN (SELECT RESOURCEPRIMKEY FROM ARTICLE))";
        String structureId = "111111";
        long categoryId = 234L;
        long brandCode = 0L;
        String query = QueryUtils.getArticle(structureId, categoryId, brandCode);
//        System.out.println("Article brandCode = 0 Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
        
        String SAMPLE_QUERY2 = "WITH ARTICLE AS (SELECT A.RESOURCEPRIMKEY FROM JOURNALARTICLE A  WHERE A.STRUCTUREID ='111111') (SELECT C.CLASSPK FROM ASSETENTRY C JOIN ASSETENTRIES_ASSETCATEGORIES D ON (C.ENTRYID = D.ENTRYID) JOIN ASSETENTRIES_ASSETCATEGORIES E ON (C.ENTRYID = E.ENTRYID) WHERE D.CATEGORYID = 234 AND E.CATEGORYID = 1 AND C.CLASSPK IN (SELECT RESOURCEPRIMKEY FROM ARTICLE))";
        brandCode = 1L;
        query = QueryUtils.getArticle(structureId, categoryId, brandCode);
//        System.out.println("Article brandCode = 1 Query: " + query);
        assertEquals(SAMPLE_QUERY2, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getWhereClause(java.util.List, java.lang.String, java.lang.String, java.lang.String)}.
     */
    @Test
    @Ignore
    public final void testGetWhereClauseListOfStringStringStringString()
    {
        fail("Not yet implemented");
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getWhereClause(java.util.List, java.lang.String, java.lang.String, java.lang.String, boolean)}.
     */
    @Test
    @Ignore
    public final void testGetWhereClauseListOfStringStringStringStringBoolean()
    {
        fail("Not yet implemented");
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateSearchQuery(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGenerateSearchQuery()
    {
        String SAMPLE_QUERY = " select * from ( WITH curr_publish_id AS (SELECT PUBLISH_ID FROM PUBLISH WHERE publish_environment_nm = 'PRODUCTION' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX'),  ATTACHMENTS AS (SELECT attch.PUBLISH_STD_VER_ID,  'yes' AS attachment_exists,  LISTAGG(attch.attachment_typ || ':::' || attch.attachment_title_txt || ':::' || attch.attachment_path_txt || ':::' || attch.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY attch.PUBLISH_STD_VER_ID, attch.CHG_STAT_CD) AS ATTACH_LST  FROM publish_std_attachment attch, PUBLISH_STD std   WHERE attch.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND attch.locale_cd in ( 'en_US', 'en_GB' )  GROUP BY attch.PUBLISH_STD_VER_ID),  LINKS AS (SELECT links.PUBLISH_STD_VER_ID, 'yes' AS link_exists,  LISTAGG(links.link_title_txt || ':::' || links.url_txt || ':::' ||  links.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY links.PUBLISH_STD_VER_ID, links.CHG_STAT_CD) AS LINK_LST  FROM PUBLISH_STD_EXTL_LINK links, PUBLISH_STD std   WHERE links.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND links.locale_cd in ( 'en_US', 'en_GB' )  GROUP BY links.PUBLISH_STD_VER_ID, links.CHG_STAT_CD),  IMAGES AS ( SELECT img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD, 'yes' AS img_exists, LISTAGG(img.image_identifier || ':::' || img.image_title_txt, ';;; ')  WITHIN GROUP (ORDER BY img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD) AS IMG_LST_ID  FROM PUBLISH_STD_IMAGE img, PUBLISH_STD std  WHERE  std.PUBLISH_STD_VER_ID = img.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND img.locale_cd in ('en_US', 'en_GB' )  GROUP BY img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD),  TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_DEF.PUBLISH_TAXONOMY_ID, TAX_DEF.PRNT_PUBLISH_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM PUBLISH_TAXONOMY_XLAT ptx  WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_DEF WHERE TAX_DEF.PUBLISH_TAXONOMY_ID = TAX_PREF.PUBLISH_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.prnt_std_id AS publish_std_ver_id  FROM publish_std ps, publish_ctry_std pcs WHERE ps.publish_id =  (SELECT PUBLISH_ID FROM curr_publish_id)  AND ps.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  STD_XREF AS ( SELECT xref.referring_std_ver_id AS referring_std_id, LISTAGG(xref.referenced_std_ver_id, ', ')  WITHIN GROUP (ORDER BY xref.disp_order_nbr, xref.referenced_std_ver_id) AS XREF_LST_STD_ID  FROM publish_std std, publish_std_xref xref  WHERE std.PUBLISH_STD_VER_ID = xref.referring_std_ver_id  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  GROUP BY xref.referring_std_ver_id, xref.referenced_std_ver_id ),  SELECTED_STD_REC AS (SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE  THEN pcs.std_cmply_deadline_dt  ELSE NULL  END                                                   AS cmply_dt,  DECODE(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  DECODE(sx.std_desc, NULL, s.std_desc, sx.std_desc)    AS std_desc,  pcs.publish_stat_cd                                   AS stat_desc,  s.disp_order_nbr, pcs.ctry_nm_cd  FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs  WHERE s.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id)  AND s.publish_std_ver_id = sx.publish_std_ver_id(+)  AND 'en_US' = sx.locale_cd(+)  AND s.publish_std_ver_id = pcs.publish_std_ver_id  AND pcs.ctry_nm_cd = 'USA'  AND s.prnt_std_ID IN (SELECT PUBLISH_STD_VER_ID FROM selected_std_id)),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc, att.ATTACHMENT_EXISTS,  IMG.IMG_EXISTS, IMG.CHG_STAT_CD AS IMG_STAT_CD, LNK.LINK_EXISTS, ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS,   SELECTED_STD_REC PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF  WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND  (pts.publish_std_ver_id = ps.publish_std_ver_id OR pts.publish_std_ver_id = ps.prnt_std_id)  AND ps.PUBLISH_STD_VER_ID = ATT.PUBLISH_STD_VER_ID(+) AND ps.PUBLISH_STD_VER_ID = LNK.PUBLISH_STD_VER_ID(+)  AND ps.PUBLISH_STD_VER_ID = IMG.PUBLISH_STD_VER_ID(+)  AND PS.PUBLISH_STD_VER_ID = XREF.referring_std_id(+)   )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc, att.ATTACHMENT_EXISTS,  IMG.IMG_EXISTS, IMG.CHG_STAT_CD as IMG_STAT_CD, LNK.LINK_EXISTS,  ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS, SELECTED_STD_REC PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF  WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND pts.publish_std_ver_id IN (SELECT prnt_std_id FROM direct_match)   AND pts.publish_std_ver_id = ps.prnt_std_id AND PS.PUBLISH_STD_VER_ID = ATT.PUBLISH_STD_VER_ID(+)  AND PS.PUBLISH_STD_VER_ID = LNK.PUBLISH_STD_VER_ID(+) AND PS.PUBLISH_STD_VER_ID = IMG.PUBLISH_STD_VER_ID(+)  AND PS.PUBLISH_STD_VER_ID = XREF.referring_std_id(+)  )) ";
        long publishId = 1001;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = QueryUtils.generateSearchQuery(publishId, localeCode, countryCode, criteria);
//        System.out.println("SearchQuery:" + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateSearchQueryForAllSupportingMaterial(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGenerateSearchQueryForAllSupportingMaterial()
    {
        String SAMPLE_QUERY = " select * from ( WITH curr_publish_id AS (SELECT PUBLISH_ID FROM PUBLISH WHERE publish_environment_nm = 'PRODUCTION' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX'),  ATTACHMENTS AS (SELECT std.STD_ID AS ATTCHSTDID, attch.publish_std_attachment_id AS STDATTCHID, attch.attachment_typ AS ATTTYPE, attch.attachment_title_txt AS ATTTITLE,  attch.attachment_path_txt AS ATTPATH,attch.prnt_publish_std_attachment_id AS ATTPRNTID, attch.CHG_STAT_CD AS ATTSTATCD,attch.LOCALE_CD AS ATTLOCALECD  , attch.PUBLISH_STD_VER_ID as ATTVERID, std.PRNT_STD_ID AS ATTSTDPRNTID,null AS EXTSTDID,null AS EXTLINKID,null AS EXTTITLE,null AS EXTURL,null AS EXTPRNTID,null AS EXTSTATCD,null AS EXTLOCALECD, null as EXTVERID, null as EXTSTDPRNTID   FROM publish_std_attachment attch, PUBLISH_STD std, PUBLISH_CTRY_STD CTRY WHERE attch.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND ( attch.publish_std_attachment_id = attch.prnt_publish_std_attachment_id  or attch.locale_cd in ('en_US','en_GB' )) AND attch.PUBLISH_STD_VER_ID = ctry.PUBLISH_STD_VER_ID AND  ctry.ctry_nm_cd = 'USA'), LINKS AS (SELECT null AS ATTCHSTDID,null AS STDATTCHID,null AS ATTTYPE,null AS ATTTITLE,null AS ATTPATH,null AS ATTPRNTID,null AS ATTSTATCD,null AS ATTLOCALECD, null as ATTVERID,null as ATTSTDPRNTID,std.STD_ID AS EXTSTDID,links.PUBLISH_STD_EXTL_LINK_ID as EXTLINKID, links.link_title_txt as EXTTITLE, links.url_txt as EXTURL,  links.prnt_publish_std_extl_link_id as EXTPRNTID,links.CHG_STAT_CD as EXTSTATCD,links.LOCALE_CD as EXTLOCALECD,links.PUBLISH_STD_VER_ID as EXTVERID, std.PRNT_STD_ID AS EXTSTDPRNTID FROM PUBLISH_STD_EXTL_LINK links, PUBLISH_STD std, PUBLISH_CTRY_STD ctry   WHERE links.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND (links.PUBLISH_STD_EXTL_LINK_ID = links.PRNT_PUBLISH_STD_EXTL_LINK_ID or links.locale_cd in ('en_US','en_GB' )) AND links.PUBLISH_STD_VER_ID = ctry.PUBLISH_STD_VER_ID AND ctry.ctry_nm_cd = 'USA'), selected_std_id AS ( select distinct ps.prnt_std_id AS publish_std_ver_id  FROM publish_std ps, publish_ctry_std pcs WHERE ps.publish_id =  (SELECT PUBLISH_ID FROM curr_publish_id)  AND ps.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),supporting_material AS ( select * from ATTACHMENTS union select * from links), selected_records AS ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd,decode(sx.title_txt, NULL, s.title_txt, sx.title_txt)  AS title_txt,decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,s.stat_desc, s.disp_order_nbr, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt FROM PUBLISH_STD S,PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs, selected_std_id SEL_IDS  WHERE s.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.prnt_std_ID  = SEL_IDS.PUBLISH_STD_VER_ID AND s.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'), direct_match AS ( SELECT  ATTCHSTDID, STDATTCHID, ATTTYPE, ATTTITLE, ATTPATH, ATTPRNTID, ATTSTATCD, ATTLOCALECD, EXTSTDID, EXTLINKID, EXTTITLE,EXTURL, EXTPRNTID,  EXTSTATCD,  EXTLOCALECD ,  ps.prnt_std_id, ps.cmply_dt    FROM  selected_records PS, supporting_material sm WHERE (PS.PRNT_STD_ID = sm.ATTSTDPRNTID OR PS.PRNT_STD_ID   = sm.EXTSTDPRNTID)  )( SELECT * FROM direct_match  UNION SELECT  ATTCHSTDID, STDATTCHID, ATTTYPE, ATTTITLE, ATTPATH, ATTPRNTID, ATTSTATCD, ATTLOCALECD, EXTSTDID, EXTLINKID, EXTTITLE,EXTURL, EXTPRNTID,  EXTSTATCD,  EXTLOCALECD ,  ps.prnt_std_id, ps.cmply_dt FROM  selected_records PS, supporting_material sm WHERE (PS.PUBLISH_STD_VER_ID = sm.ATTVERID  OR  PS.PUBLISH_STD_VER_ID   = sm.EXTVERID ) AND ps.prnt_std_id IN (SELECT distinct prnt_std_id FROM direct_match))) ";
        long publishId = 1001;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = QueryUtils.generateSearchQueryForAllSupportingMaterial(publishId, localeCode, chainCode, countryCode, criteria);
//        System.out.println("Search All Supporting Materials Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateQueryForOrangeBar(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGenerateQueryForOrangeBar()
    {
        String SAMPLE_QUERY = " WITH  curr_publish_id AS (SELECT PUBLISH_ID FROM PUBLISH WHERE publish_environment_nm = 'PRODUCTION' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX'),  ATTACHMENTS AS (SELECT attch.PUBLISH_STD_VER_ID,  'yes' AS attachment_exists,  LISTAGG(attch.attachment_typ || ':::' || attch.attachment_title_txt || ':::' || attch.attachment_path_txt || ':::' || attch.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY attch.PUBLISH_STD_VER_ID) AS ATTACH_LST  FROM publish_std_attachment attch, PUBLISH_STD std   WHERE attch.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND attch.locale_cd = 'en_US'  GROUP BY attch.PUBLISH_STD_VER_ID),  LINKS AS (SELECT links.PUBLISH_STD_VER_ID,  'yes' AS link_exists,  LISTAGG(links.link_title_txt || ':::' || links.url_txt || ':::' ||links.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY links.PUBLISH_STD_VER_ID) AS LINK_LST  FROM PUBLISH_STD_EXTL_LINK links, PUBLISH_STD std   WHERE links.PUBLISH_STD_VER_ID = std.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND links.locale_cd = 'en_US'  GROUP BY links.PUBLISH_STD_VER_ID),  IMAGES AS ( SELECT img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD, 'yes' AS img_exists, LISTAGG(img.image_identifier || ':::' || img.image_title_txt, ';;; ')  WITHIN GROUP (ORDER BY img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD) AS IMG_LST_ID  FROM PUBLISH_STD_IMAGE img, PUBLISH_STD std  WHERE  std.PUBLISH_STD_VER_ID = img.PUBLISH_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND img.locale_cd in ('en_US', 'en_GB' )  GROUP BY img.PUBLISH_STD_VER_ID, img.CHG_STAT_CD),  TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_DEF.PUBLISH_TAXONOMY_ID, TAX_DEF.PRNT_PUBLISH_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM PUBLISH_TAXONOMY_XLAT ptx  WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_DEF WHERE TAX_DEF.PUBLISH_TAXONOMY_ID = TAX_PREF.PUBLISH_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.publish_std_ver_id AS publish_std_ver_id  FROM publish_std ps, publish_ctry_std pcs WHERE ps.publish_id =  (SELECT PUBLISH_ID FROM curr_publish_id)  AND ps.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  STD_XREF AS ( SELECT xref.referring_std_ver_id AS referring_std_id, LISTAGG(xref.referenced_std_ver_id, ', ')  WITHIN GROUP (ORDER BY xref.disp_order_nbr, xref.referenced_std_ver_id) AS XREF_LST_STD_ID  FROM publish_std std, publish_std_xref xref  WHERE std.PUBLISH_STD_VER_ID = xref.referring_std_ver_id  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  GROUP BY xref.referring_std_ver_id, xref.referenced_std_ver_id )  SELECT distinct TAX.INDX_ORDER, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc, att.ATTACHMENT_EXISTS,    IMG.IMG_EXISTS, IMG.CHG_STAT_CD AS IMG_STAT_CD, LNK.LINK_EXISTS,  ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS,   ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt)  AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,s.stat_desc, s.disp_order_nbr  FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs, selected_std_id SEL_IDS  WHERE s.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.prnt_std_ID        = SEL_IDS.PUBLISH_STD_VER_ID  AND s.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF  WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND  (pts.publish_std_ver_id = ps.publish_std_ver_id OR pts.publish_std_ver_id = ps.prnt_std_id)  AND ps.PUBLISH_STD_VER_ID = ATT.PUBLISH_STD_VER_ID(+) AND ps.PUBLISH_STD_VER_ID = LNK.PUBLISH_STD_VER_ID(+)  AND ps.PUBLISH_STD_VER_ID = IMG.PUBLISH_STD_VER_ID(+)  AND PS.PUBLISH_STD_VER_ID = XREF.referring_std_id(+) ";
        long publishId = 1001;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = "";//QueryUtils.generateQueryForOrangeBar(localeCode, chainCode, countryCode, criteria);
//        System.out.println("Orange Bar Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#getRelatedImagesForStaging(long, java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGetRelatedImagesForStaging()
    {
        String SAMPLE_QUERY = "SELECT a.STAGE_STD_IMAGE_ID, a.IMAGE_IDENTIFIER, a.IMAGE_TITLE_TXT, a.PRNT_STAGE_STD_IMAGE_ID,a.CHG_STAT_CD, b.STD_ID, a.LOCALE_CD FROM STAGE_STD_IMAGE a JOIN STAGE_STD b ON (a.STAGE_STD_VER_ID = b.STAGE_STD_VER_ID), STAGE_CTRY_STD pcs where a.STAGE_STD_VER_ID IN (1234) and pcs.stage_std_ver_id = b.stage_std_ver_id and pcs.ctry_nm_cd = 'USA' and  ( a.STAGE_STD_IMAGE_ID = a.PRNT_STAGE_STD_IMAGE_ID or a.LOCALE_CD in ('en_US','en_GB'))";
        long stdId = 1234L;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = QueryUtils.getRelatedImagesForStaging(stdId, localeCode, countryCode);
//        System.out.println("Related Image For STAGING Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateWCOSearchQueryProd(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria, java.lang.String, java.lang.String, boolean)}.
     */
    @Test
    public final void testGenerateWCOSearchQueryProd()
    {
        String SAMPLE_QUERY = "SELECT * FROM ( WITH PREV_PUBLISH_STD AS (SELECT STD_ID, TITLE_TXT, STD_DESC FROM PUBLISH_STD WHERE PUBLISH_ID=1001), TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_PREF.TAXONOMY_ID, TAX_DEF.PUBLISH_TAXONOMY_ID, TAX_DEF.PRNT_PUBLISH_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.TAXONOMY_ID, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM PUBLISH_TAXONOMY_XLAT ptx  WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = 1002START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = 1002START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_DEF WHERE TAX_DEF.PUBLISH_TAXONOMY_ID = TAX_PREF.PUBLISH_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.prnt_std_id AS publish_std_ver_id  FROM publish_std ps, publish_ctry_std pcs WHERE ps.publish_id = 1002 AND ps.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd,  CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt,  DECODE(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  DECODE(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc, pcs.PUBLISH_STAT_CD AS stat_desc,s.disp_order_nbr FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs WHERE s.publish_id = 1002 AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND s.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+) AND  (pts.publish_std_ver_id = ps.publish_std_ver_id OR pts.publish_std_ver_id = ps.prnt_std_id)  AND ps.prnt_std_ID  = SEL_IDS.PUBLISH_STD_VER_ID  )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,  pcs.PUBLISH_STAT_CD AS stat_desc,s.disp_order_nbr FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs  WHERE s.publish_id = 1002 AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.publish_std_ver_id = pcs.publish_std_ver_id and pcs.ctry_nm_cd = 'USA') PS,  selected_std_id SEL_IDS WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+)  AND pts.publish_std_ver_id IN (SELECT prnt_std_id FROM direct_match)  AND pts.publish_std_ver_id = ps.prnt_std_id AND ps.prnt_std_ID  = SEL_IDS.PUBLISH_STD_VER_ID )) ";
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String selPublishId = "1002";
        String prevPublishId = "1001";
        String query = WCOQueryUtil.getWCOSearchQueryProd(localeCode, chainCode, countryCode, criteria, selPublishId, prevPublishId);
//        System.out.println("What Changed Search Query: " + query);
        assertEquals(SAMPLE_QUERY, query);

        String SAMPLE_QUERY_REMOVED = "SELECT * FROM ( WITH PREV_PUBLISH_STD AS (SELECT STD_ID, TITLE_TXT, STD_DESC FROM PUBLISH_STD WHERE PUBLISH_ID=1001), TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_PREF.TAXONOMY_ID, TAX_DEF.PUBLISH_TAXONOMY_ID, TAX_DEF.PRNT_PUBLISH_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.TAXONOMY_ID, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM PUBLISH_TAXONOMY_XLAT ptx  WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM PUBLISH_TAXONOMY_XLAT ptx         WHERE t.publish_taxonomy_id   = ptx.publish_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = 1002START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.PUBLISH_TAXONOMY_ID, T.PRNT_PUBLISH_TAXONOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM PUBLISH_TAXONOMY T WHERE T.publish_id = 1002START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.PUBLISH_TAXONOMY_ID = T.PRNT_PUBLISH_TAXONOMY_ID ) TAX_DEF WHERE TAX_DEF.PUBLISH_TAXONOMY_ID = TAX_PREF.PUBLISH_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.prnt_std_id AS publish_std_ver_id  FROM publish_std ps, publish_ctry_std pcs WHERE ps.publish_id = 1002 AND ps.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd,  CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt,  DECODE(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  DECODE(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc, DECODE(pcs.PUBLISH_STAT_CD, NULL, 'REMOVED', 'REMOVED') AS stat_desc,s.disp_order_nbr FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs WHERE s.publish_id = 1002 AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND s.publish_std_ver_id = pcs.publish_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+) AND  (pts.publish_std_ver_id = ps.publish_std_ver_id OR pts.publish_std_ver_id = ps.prnt_std_id)  AND ps.prnt_std_ID  = SEL_IDS.PUBLISH_STD_VER_ID  AND ps.STD_ID IN (SELECT STD_ID FROM PUBLISH_STD WHERE PUBLISH_ID=1002 MINUS SELECT STD_ID FROM PUBLISH_STD WHERE PUBLISH_ID=1001) )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.PUBLISH_TAXONOMY_ID, TAX.PRNT_PUBLISH_TAXONOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.publish_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, PUBLISH_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.publish_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,  DECODE(pcs.PUBLISH_STAT_CD, NULL, 'NO_CHANGE', 'NO_CHANGE') AS stat_desc,s.disp_order_nbr FROM PUBLISH_STD S, PUBLISH_STD_XLAT SX, PUBLISH_CTRY_STD pcs  WHERE s.publish_id = 1002 AND s.publish_std_ver_id = sx.publish_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.publish_std_ver_id = pcs.publish_std_ver_id and pcs.ctry_nm_cd = 'USA' AND s.STD_ID NOT IN (SELECT STD_ID FROM direct_match)) PS,  selected_std_id SEL_IDS WHERE pts.taxonomy_id = TAX.PUBLISH_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+)  AND pts.publish_std_ver_id IN (SELECT prnt_std_id FROM direct_match)  AND pts.publish_std_ver_id = ps.prnt_std_id AND ps.prnt_std_ID  = SEL_IDS.PUBLISH_STD_VER_ID )) ";
        query = WCOQueryUtil.getWCORemovedSearchQueryProd(localeCode, chainCode, countryCode, criteria, selPublishId, prevPublishId);
//        System.out.println("What Changed with Removed Search Query: " + query);
        assertEquals(SAMPLE_QUERY_REMOVED, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateWCOSearchQueryStage(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria, java.lang.String, java.lang.String, boolean)}.
     */
    @Test
    public final void testGenerateWCOSearchQueryStage()
    {
        String SAMPLE_QUERY = "SELECT * FROM ( WITH PREV_PUBLISH_STD AS (SELECT STD_ID, TITLE_TXT, STD_DESC FROM STAGE_STD WHERE PUBLISH_ID=1001), TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_PREF.TAXONOMY_ID, TAX_DEF.STAGE_TAXONOMY_ID, TAX_DEF.PRNT_STAGE_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.TAXONOMY_ID, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID AS PRNT_STAGE_TAXONOMY_ID,  (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,  (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id   = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id   = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH  FROM STAGE_TAXONOMY T  WHERE T.publish_id = 1002 START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_PREF,  (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID AS PRNT_STAGE_TAXONOMY_ID,  (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,  T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH  FROM STAGE_TAXONOMY T  WHERE T.publish_id = 1002 START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_DEF  WHERE TAX_DEF.STAGE_TAXONOMY_ID = TAX_PREF.STAGE_TAXONOMY_ID ),  selected_std_id AS ( select distinct ss.prnt_std_id AS stage_std_ver_id  FROM STAGE_STD ss, STAGE_CTRY_STD scs WHERE ss.PUBLISH_ID = 1002 AND ss.stage_std_ver_id = scs.stage_std_ver_id AND scs.ctry_nm_cd = 'USA'  ),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.stage_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT ss.stage_std_ver_id, ss.prnt_std_id, ss.std_id, ss.std_typ, sx.locale_cd,  CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt,  DECODE(sx.title_txt, NULL, ss.title_txt, sx.title_txt) AS title_txt,  DECODE(sx.std_desc, NULL, ss.std_desc, sx.std_desc) AS std_desc, pcs.PUBLISH_STAT_CD AS stat_desc,ss.disp_order_nbr FROM STAGE_STD ss, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs WHERE ss.PUBLISH_ID = 1002 AND ss.stage_std_ver_id = sx.stage_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND ss.stage_std_ver_id = pcs.stage_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+) AND  (pts.stage_std_ver_id = ps.stage_std_ver_id OR pts.stage_std_ver_id = ps.prnt_std_id)  AND ps.prnt_std_ID  = SEL_IDS.stage_std_ver_id  )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXONOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.stage_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.stage_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,  pcs.PUBLISH_STAT_CD AS stat_desc,s.disp_order_nbr FROM STAGE_STD S, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs  WHERE s.PUBLISH_ID = 1002 AND s.stage_std_ver_id = sx.stage_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND s.stage_std_ver_id = pcs.stage_std_ver_id and pcs.ctry_nm_cd = 'USA') PS,  selected_std_id SEL_IDS WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+)  AND pts.stage_std_ver_id IN (SELECT prnt_std_id FROM direct_match)  AND pts.stage_std_ver_id = ps.prnt_std_id AND ps.prnt_std_ID  = SEL_IDS.stage_std_ver_id )) ";
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String selPublishId = "1002";
        String prevPublishId = "1001";
        String query = WCOQueryUtil.getWCOSearchQueryStage(localeCode, chainCode, countryCode, criteria, selPublishId, prevPublishId);
//        System.out.println("STAGING What Changed Search Query: " + query);
        assertEquals(SAMPLE_QUERY, query);

        String SAMPLE_QUERY_REMOVED = "SELECT * FROM ( WITH PREV_PUBLISH_STD AS (SELECT STD_ID, TITLE_TXT, STD_DESC FROM STAGE_STD WHERE PUBLISH_ID=1001), TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_PREF.TAXONOMY_ID, TAX_DEF.STAGE_TAXONOMY_ID, TAX_DEF.PRNT_STAGE_TAXONOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.TAXONOMY_ID, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID AS PRNT_STAGE_TAXONOMY_ID,  (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,  (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id   = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.stage_taxonomy_id   = ptx.stage_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH  FROM STAGE_TAXONOMY T  WHERE T.publish_id = 1002 START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_PREF,  (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID AS PRNT_STAGE_TAXONOMY_ID,  (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,  T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH  FROM STAGE_TAXONOMY T  WHERE T.publish_id = 1002 START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_DEF  WHERE TAX_DEF.STAGE_TAXONOMY_ID = TAX_PREF.STAGE_TAXONOMY_ID ),  selected_std_id AS ( select distinct ss.prnt_std_id AS stage_std_ver_id  FROM STAGE_STD ss, STAGE_CTRY_STD scs WHERE ss.PUBLISH_ID = 1002 AND ss.stage_std_ver_id = scs.stage_std_ver_id AND scs.ctry_nm_cd = 'USA'  ),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXONOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.stage_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT ss.stage_std_ver_id, ss.prnt_std_id, ss.std_id, ss.std_typ, sx.locale_cd,  CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt,  DECODE(sx.title_txt, NULL, ss.title_txt, sx.title_txt) AS title_txt,  DECODE(sx.std_desc, NULL, ss.std_desc, sx.std_desc) AS std_desc, DECODE(pcs.PUBLISH_STAT_CD, NULL, 'REMOVED', 'REMOVED') AS stat_desc,ss.disp_order_nbr FROM STAGE_STD ss, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs WHERE ss.PUBLISH_ID = 1002 AND ss.stage_std_ver_id = sx.stage_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND ss.stage_std_ver_id = pcs.stage_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+) AND  (pts.stage_std_ver_id = ps.stage_std_ver_id OR pts.stage_std_ver_id = ps.prnt_std_id)  AND ps.prnt_std_ID  = SEL_IDS.stage_std_ver_id  AND ps.STD_ID IN (SELECT STD_ID FROM STAGE_STD WHERE PUBLISH_ID=1002 MINUS SELECT STD_ID FROM STAGE_STD WHERE PUBLISH_ID=1001) )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.TAXONOMY_ID, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXONOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.stage_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc,  ps.cmply_dt, ps.DISP_ORDER_NBR, TAX.TITLE_TXT AS INDEX_TITLE, prevps.TITLE_TXT AS PREV_TITLE_TXT, prevps.STD_DESC AS PREV_STD_DESC  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS, PREV_PUBLISH_STD prevps,  ( SELECT s.stage_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,  DECODE(pcs.PUBLISH_STAT_CD, NULL, 'NO_CHANGE', 'NO_CHANGE') AS stat_desc,s.disp_order_nbr FROM STAGE_STD S, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs  WHERE s.PUBLISH_ID = 1002 AND s.stage_std_ver_id = sx.stage_std_ver_id(+) AND 'en_US' = sx.locale_cd(+) AND s.stage_std_ver_id = pcs.stage_std_ver_id and pcs.ctry_nm_cd = 'USA' AND s.STD_ID NOT IN (SELECT STD_ID FROM direct_match)) PS,  selected_std_id SEL_IDS WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND ps.STD_ID = prevps.STD_ID(+)  AND pts.stage_std_ver_id IN (SELECT prnt_std_id FROM direct_match)  AND pts.stage_std_ver_id = ps.prnt_std_id AND ps.prnt_std_ID  = SEL_IDS.stage_std_ver_id )) ";
        query = WCOQueryUtil.getWCORemovedSearchQueryStage(localeCode, chainCode, countryCode, criteria, selPublishId, prevPublishId);
//        System.out.println("STAGING What Changed with Removed Search Query: " + query);
        assertEquals(SAMPLE_QUERY_REMOVED, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateSearchQueryStaging(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGenerateSearchQueryStaging()
    {
        String SAMPLE_QUERY = " select * from ( WITH TAXONOMY_IDS AS ( SELECT PT.STAGE_TAXONOMY_ID FROM STAGE_TAXONOMY PT, PUBLISH P  WHERE PT.PUBLISH_ID = P.PUBLISH_ID AND p.publish_environment_nm = 'STAGING' AND P.publish_stat_cd = 'ACTIVE' AND P.CHAIN_CD= 'EX' ),  curr_publish_id AS (SELECT PUBLISH_ID FROM PUBLISH WHERE publish_environment_nm = 'STAGING' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX'),  ATTACHMENTS AS (SELECT attch.STAGE_STD_VER_ID, 'yes' AS attachment_exists,  LISTAGG(attch.attachment_typ || ':::' || attch.attachment_title_txt || ':::' || attch.attachment_path_txt || ':::' || attch.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY attch.STAGE_STD_VER_ID) AS ATTACH_LST  FROM STAGE_std_attachment attch, STAGE_STD std   WHERE attch.STAGE_STD_VER_ID = std.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND attch.locale_cd in ( 'en_US', 'en_GB' )  GROUP BY attch.STAGE_STD_VER_ID),  LINKS AS (SELECT links.STAGE_STD_VER_ID,  'yes' AS link_exists,  LISTAGG(links.link_title_txt || ':::' || links.url_txt || ':::' || links.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY links.STAGE_STD_VER_ID) AS LINK_LST  FROM STAGE_STD_EXTL_LINK links, STAGE_STD std   WHERE links.STAGE_STD_VER_ID = std.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND links.locale_cd in ( 'en_US', 'en_GB' )  GROUP BY links.STAGE_STD_VER_ID),  IMAGES AS ( SELECT img.STAGE_STD_VER_ID, img.CHG_STAT_CD, 'yes' AS img_exists, LISTAGG(img.image_identifier || ':::' || img.image_title_txt, ';;; ')  WITHIN GROUP (ORDER BY img.STAGE_STD_VER_ID, img.CHG_STAT_CD) AS IMG_LST_ID  FROM STAGE_STD_IMAGE img, STAGE_STD std  WHERE  std.STAGE_STD_VER_ID = img.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND img.locale_cd in ('en_US', 'en_GB' )  GROUP BY img.STAGE_STD_VER_ID, img.CHG_STAT_CD),  TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_DEF.STAGE_TAXONOMY_ID, TAX_DEF.PRNT_STAGE_TAXOMOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM STAGE_TAXONOMY_XLAT ptx         WHERE t.STAGE_taxonomy_id = ptx.STAGE_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.STAGE_taxonomy_id   = ptx.STAGE_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM STAGE_TAXONOMY_XLAT ptx         WHERE t.STAGE_taxonomy_id   = ptx.STAGE_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM STAGE_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM STAGE_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_DEF WHERE TAX_DEF.STAGE_TAXONOMY_ID = TAX_PREF.STAGE_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.prnt_std_id AS STAGE_std_ver_id  FROM STAGE_std ps, STAGE_ctry_std pcs WHERE ps.PUBLISH_ID =  (SELECT PUBLISH_ID FROM curr_publish_id)  AND ps.STAGE_std_ver_id = pcs.STAGE_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  STD_XREF AS ( SELECT xref.referring_std_ver_id AS referring_std_id, LISTAGG(xref.referenced_std_ver_id, ', ')  WITHIN GROUP (ORDER BY xref.disp_order_nbr, xref.referenced_std_ver_id) AS XREF_LST_STD_ID  FROM STAGE_std std, STAGE_std_xref xref  WHERE std.STAGE_STD_VER_ID = xref.referring_std_ver_id  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  GROUP BY xref.referring_std_ver_id, xref.referenced_std_ver_id ),  direct_match AS ( SELECT TAX.INDX_ORDER, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXOMOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.STAGE_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc, att.ATTACHMENT_EXISTS,    IMG.IMG_EXISTS, IMG.CHG_STAT_CD AS IMG_STAT_CD, LNK.LINK_EXISTS,  ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS,   ( SELECT s.STAGE_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt)  AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,pcs.PUBLISH_STAT_CD as stat_desc, s.disp_order_nbr FROM STAGE_STD S, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs  WHERE s.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND s.STAGE_std_ver_id = sx.STAGE_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.STAGE_std_ver_id = pcs.STAGE_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND  (pts.STAGE_std_ver_id = ps.STAGE_std_ver_id OR pts.STAGE_std_ver_id = ps.prnt_std_id)  AND ps.STAGE_STD_VER_ID = ATT.STAGE_STD_VER_ID(+) AND ps.STAGE_STD_VER_ID = LNK.STAGE_STD_VER_ID(+)  AND ps.STAGE_STD_VER_ID = IMG.STAGE_STD_VER_ID(+)  AND PS.STAGE_STD_VER_ID = XREF.referring_std_id(+) AND ps.prnt_std_ID  = SEL_IDS.STAGE_STD_VER_ID )( SELECT * FROM direct_match  UNION  SELECT TAX.INDX_ORDER, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXOMOMY_ID, TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.STAGE_std_ver_id, ps.prnt_std_id, ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc,ps.stat_desc, att.ATTACHMENT_EXISTS,   IMG.IMG_EXISTS, IMG.CHG_STAT_CD as IMG_STAT_CD, LNK.LINK_EXISTS, ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS,  ( SELECT s.STAGE_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt) AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc, pcs.PUBLISH_STAT_CD as stat_desc, s.disp_order_nbr FROM STAGE_STD S, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs  WHERE s.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND s.STAGE_std_ver_id = sx.STAGE_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.STAGE_std_ver_id = pcs.STAGE_std_ver_id and pcs.ctry_nm_cd = 'USA') PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF, selected_std_id SEL_IDS   WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND pts.STAGE_std_ver_id IN (SELECT prnt_std_id FROM direct_match)   AND pts.STAGE_std_ver_id = ps.prnt_std_id AND PS.STAGE_STD_VER_ID = ATT.STAGE_STD_VER_ID(+)  AND PS.STAGE_STD_VER_ID = LNK.STAGE_STD_VER_ID(+) AND PS.STAGE_STD_VER_ID = IMG.STAGE_STD_VER_ID(+)  AND PS.STAGE_STD_VER_ID = XREF.referring_std_id(+)  AND ps.prnt_std_ID  = SEL_IDS.STAGE_STD_VER_ID )) ";
        long publishId = 1001;
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = QueryUtils.generateSearchQueryStaging(publishId, localeCode, countryCode, criteria);
//        System.out.println("STAGING Search Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

    /**
     * Test method for {@link com.ihg.me2.brandstandards.custom.util.QueryUtils#generateQueryForOrangeBarStaging(java.lang.String, java.lang.String, java.lang.String, com.ihg.me2.brandstandards.custom.pojo.StandardsSearchCriteria)}.
     */
    @Test
    public final void testGenerateQueryForOrangeBarStaging()
    {
        String SAMPLE_QUERY = "  WITH  TAXONOMY_IDS AS ( SELECT PT.STAGE_TAXONOMY_ID FROM STAGE_TAXONOMY PT, PUBLISH P  WHERE PT.PUBLISH_ID = P.PUBLISH_ID AND p.publish_environment_nm = 'STAGING' AND P.publish_stat_cd = 'ACTIVE' AND P.CHAIN_CD= 'EX' ),  curr_publish_id AS (SELECT PUBLISH_ID FROM PUBLISH WHERE publish_environment_nm = 'STAGING' AND publish_stat_cd = 'ACTIVE' AND CHAIN_CD = 'EX'),  ATTACHMENTS AS (SELECT attch.STAGE_STD_VER_ID,  'yes' AS attachment_exists,  LISTAGG(attch.attachment_typ || ':::' || attch.attachment_title_txt || ':::' || attch.attachment_path_txt || ':::' || attch.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY attch.STAGE_STD_VER_ID) AS ATTACH_LST  FROM STAGE_std_attachment attch, STAGE_STD std   WHERE attch.STAGE_STD_VER_ID = std.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND attch.locale_cd = 'en_US'  GROUP BY attch.STAGE_STD_VER_ID),  LINKS AS (SELECT links.STAGE_STD_VER_ID,  'yes' AS link_exists,  LISTAGG(links.link_title_txt || ':::' || links.url_txt || ':::' || links.CHG_STAT_CD, ';;; ')  WITHIN GROUP (ORDER BY links.STAGE_STD_VER_ID) AS LINK_LST  FROM STAGE_STD_EXTL_LINK links, STAGE_STD std   WHERE links.STAGE_STD_VER_ID = std.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND links.locale_cd = 'en_US'  GROUP BY links.STAGE_STD_VER_ID),  IMAGES AS ( SELECT img.STAGE_STD_VER_ID, img.CHG_STAT_CD, 'yes' AS img_exists, LISTAGG(img.image_identifier || ':::' || img.image_title_txt, ';;; ')  WITHIN GROUP (ORDER BY img.STAGE_STD_VER_ID, img.CHG_STAT_CD) AS IMG_LST_ID  FROM STAGE_STD_IMAGE img, STAGE_STD std  WHERE  std.STAGE_STD_VER_ID = img.STAGE_STD_VER_ID  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id)  AND img.locale_cd in ('en_US', 'en_GB' )  GROUP BY img.STAGE_STD_VER_ID, img.CHG_STAT_CD),  TAXONOMY AS (  SELECT TAX_DEF.INDX_ORDER, TAX_DEF.STAGE_TAXONOMY_ID, TAX_DEF.PRNT_STAGE_TAXOMOMY_ID,  TAX_DEF.LVL, TAX_DEF.HIER_LVL_NBR, TAX_DEF.PUBLISH_ID,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.TITLE_TXT, TAX_PREF.TITLE_TXT) AS TITLE_TXT,  decode(TAX_PREF.TITLE_TXT, NULL, TAX_DEF.PATH, TAX_PREF.PATH) AS PATH,  decode(TAX_PREF.TAXONOMY_DESC, NULL, TAX_DEF.TAXONOMY_DESC, TAX_PREF.TAXONOMY_DESC) AS TAXONOMY_DESC  FROM (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID,         (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,         (SELECT DECODE(ptx.TAXONOMY_DESC, NULL, t.TAXONOMY_DESC, 'No Translation Found', t.TAXONOMY_DESC, '', t.TAXONOMY_DESC, ptx.TAXONOMY_DESC)         FROM STAGE_TAXONOMY_XLAT ptx         WHERE t.STAGE_taxonomy_id = ptx.STAGE_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) AS TAXONOMY_DESC,  (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt)  FROM STAGE_TAXONOMY_XLAT ptx  WHERE t.STAGE_taxonomy_id   = ptx.STAGE_taxonomy_id(+)  AND ptx.locale_cd = 'en_US' ) AS TITLE_TXT,  SUBSTR(SYS_CONNECT_BY_PATH(   (SELECT DECODE(ptx.title_txt, NULL, t.title_txt, 'No Translation Found', t.title_txt, '', t.title_txt, ptx.title_txt) AS title         FROM STAGE_TAXONOMY_XLAT ptx         WHERE t.STAGE_taxonomy_id   = ptx.STAGE_taxonomy_id(+)         AND ptx.locale_cd = 'en_US' ) , ' &#8594; '),  19) AS PATH FROM STAGE_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_PREF,     (SELECT ROWNUM AS INDX_ORDER, T.STAGE_TAXONOMY_ID, T.PRNT_STAGE_TAXOMOMY_ID,     (LEVEL - 1) AS LVL, T.HIER_LVL_NBR, T.PUBLISH_ID,     T.TAXONOMY_DESC, T.TITLE_TXT, SUBSTR(SYS_CONNECT_BY_PATH(t.title_txt , ' &#8594; '), 31) AS PATH FROM STAGE_TAXONOMY T WHERE T.publish_id = (SELECT PUBLISH_ID FROM curr_publish_id) START WITH T.TAXONOMY_ID = 1 CONNECT BY NOCYCLE PRIOR T.STAGE_TAXONOMY_ID = T.PRNT_STAGE_TAXOMOMY_ID ) TAX_DEF WHERE TAX_DEF.STAGE_TAXONOMY_ID = TAX_PREF.STAGE_TAXONOMY_ID ),  selected_std_id AS ( select distinct ps.STAGE_std_ver_id AS STAGE_std_ver_id  FROM STAGE_std ps, STAGE_ctry_std pcs WHERE ps.PUBLISH_ID =  (SELECT PUBLISH_ID FROM curr_publish_id)  AND ps.STAGE_std_ver_id = pcs.STAGE_std_ver_id AND pcs.ctry_nm_cd = 'USA'  ),  STD_XREF AS ( SELECT xref.referring_std_ver_id AS referring_std_id, LISTAGG(xref.referenced_std_ver_id, ', ')  WITHIN GROUP (ORDER BY xref.disp_order_nbr, xref.referenced_std_ver_id) AS XREF_LST_STD_ID  FROM STAGE_std std, STAGE_std_xref xref  WHERE std.STAGE_STD_VER_ID = xref.referring_std_ver_id  AND std.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_PUBLISH_ID)  GROUP BY xref.referring_std_ver_id, xref.referenced_std_ver_id )  SELECT distinct TAX.INDX_ORDER, TAX.STAGE_TAXONOMY_ID, TAX.PRNT_STAGE_TAXOMOMY_ID,  TAX.LVL, TAX.HIER_LVL_NBR, TAX.PUBLISH_ID, TAX.PATH, TAX.TAXONOMY_DESC,  ps.STAGE_std_ver_id, ps.prnt_std_id,  ps.std_id, ps.std_typ, ps.title_txt, ps.std_desc, ps.stat_desc, att.ATTACHMENT_EXISTS,   IMG.IMG_EXISTS, IMG.CHG_STAT_CD AS IMG_STAT_CD, LNK.LINK_EXISTS,  ps.cmply_dt,  ps.DISP_ORDER_NBR, IMG.IMG_LST_ID, att.ATTACH_LST, LNK.LINK_LST, XREF.XREF_LST_STD_ID, TAX.TITLE_TXT AS INDEX_TITLE  FROM  TAXONOMY TAX, STAGE_TAXONOMY_STD PTS,   ( SELECT s.STAGE_std_ver_id, s.prnt_std_id, s.std_id, s.std_typ, sx.locale_cd, CASE WHEN pcs.std_cmply_deadline_dt > SYSDATE THEN pcs.std_cmply_deadline_dt ELSE NULL END AS cmply_dt, decode(sx.title_txt, NULL, s.title_txt, sx.title_txt)  AS title_txt,  decode(sx.std_desc, NULL, s.std_desc, sx.std_desc) AS std_desc,s.stat_desc, s.disp_order_nbr FROM STAGE_STD S, STAGE_STD_XLAT SX, STAGE_CTRY_STD pcs  WHERE s.PUBLISH_ID = (SELECT PUBLISH_ID FROM curr_publish_id) AND s.STAGE_std_ver_id = sx.STAGE_std_ver_id(+) AND 'en_US' = sx.locale_cd(+)  AND s.STAGE_std_ver_id = pcs.STAGE_std_ver_id AND pcs.ctry_nm_cd = 'USA') PS, ATTACHMENTS ATT, IMAGES IMG, LINKS LNK, STD_XREF XREF, selected_std_id SEL_IDS  WHERE pts.taxonomy_id = TAX.STAGE_TAXONOMY_ID AND  (pts.STAGE_std_ver_id = ps.STAGE_std_ver_id OR pts.STAGE_std_ver_id = ps.prnt_std_id)  AND ps.STAGE_STD_VER_ID = ATT.STAGE_STD_VER_ID(+) AND ps.STAGE_STD_VER_ID = LNK.STAGE_STD_VER_ID(+)  AND ps.STAGE_STD_VER_ID = IMG.STAGE_STD_VER_ID(+)  AND PS.STAGE_STD_VER_ID = XREF.referring_std_id(+) AND ps.prnt_std_ID  = SEL_IDS.STAGE_STD_VER_ID";
        String localeCode = "en_US";
        String chainCode = "EX";
        String countryCode = "USA";
        StandardsSearchCriteria criteria = new StandardsSearchCriteria();
        String query = "";//QueryUtils.generateQueryForOrangeBarStaging(localeCode, chainCode, countryCode, criteria);
//        System.out.println("STAGING Orange Bar Query: " + query);
        assertEquals(SAMPLE_QUERY, query);
    }

}
