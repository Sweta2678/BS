/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsAuthors;
import com.ihg.brandstandards.db.model.StandardsAuthorsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsAuthors service. Represents a row in the &quot;STD_AUTHOR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsAuthorsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsAuthorsImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsAuthorsImpl
 * @see com.ihg.brandstandards.db.model.StandardsAuthors
 * @see com.ihg.brandstandards.db.model.StandardsAuthorsModel
 * @generated
 */
public class StandardsAuthorsModelImpl extends BaseModelImpl<StandardsAuthors>
	implements StandardsAuthorsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards authors model instance should use the {@link com.ihg.brandstandards.db.model.StandardsAuthors} interface instead.
	 */
	public static final String TABLE_NAME = "STD_AUTHOR";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_AUTHOR_ID", Types.BIGINT },
			{ "std_Id", Types.BIGINT },
			{ "AUTHOR_NM", Types.VARCHAR },
			{ "PRIM_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_AUTHOR (STD_AUTHOR_ID LONG not null primary key,std_Id LONG,AUTHOR_NM VARCHAR(75) null,PRIM_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table STD_AUTHOR";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsAuthors.stdAuthorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_AUTHOR.STD_AUTHOR_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsAuthors"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsAuthors"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsAuthors"),
			true);
	public static long AUTHORNAME_COLUMN_BITMASK = 1L;
	public static long ISPRIMARY_COLUMN_BITMASK = 2L;
	public static long STDID_COLUMN_BITMASK = 4L;
	public static long STDAUTHORID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsAuthors"));

	public StandardsAuthorsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stdAuthorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStdAuthorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stdAuthorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsAuthors.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsAuthors.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdAuthorId", getStdAuthorId());
		attributes.put("stdId", getStdId());
		attributes.put("authorName", getAuthorName());
		attributes.put("isPrimary", getIsPrimary());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdAuthorId = (Long)attributes.get("stdAuthorId");

		if (stdAuthorId != null) {
			setStdAuthorId(stdAuthorId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String authorName = (String)attributes.get("authorName");

		if (authorName != null) {
			setAuthorName(authorName);
		}

		String isPrimary = (String)attributes.get("isPrimary");

		if (isPrimary != null) {
			setIsPrimary(isPrimary);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getStdAuthorId() {
		return _stdAuthorId;
	}

	@Override
	public void setStdAuthorId(long stdAuthorId) {
		_stdAuthorId = stdAuthorId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public String getAuthorName() {
		if (_authorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorName;
		}
	}

	@Override
	public void setAuthorName(String authorName) {
		_columnBitmask |= AUTHORNAME_COLUMN_BITMASK;

		if (_originalAuthorName == null) {
			_originalAuthorName = _authorName;
		}

		_authorName = authorName;
	}

	public String getOriginalAuthorName() {
		return GetterUtil.getString(_originalAuthorName);
	}

	@Override
	public String getIsPrimary() {
		if (_isPrimary == null) {
			return StringPool.BLANK;
		}
		else {
			return _isPrimary;
		}
	}

	@Override
	public void setIsPrimary(String isPrimary) {
		_columnBitmask |= ISPRIMARY_COLUMN_BITMASK;

		if (_originalIsPrimary == null) {
			_originalIsPrimary = _isPrimary;
		}

		_isPrimary = isPrimary;
	}

	public String getOriginalIsPrimary() {
		return GetterUtil.getString(_originalIsPrimary);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StandardsAuthors.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StandardsAuthors toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsAuthors)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsAuthorsImpl standardsAuthorsImpl = new StandardsAuthorsImpl();

		standardsAuthorsImpl.setStdAuthorId(getStdAuthorId());
		standardsAuthorsImpl.setStdId(getStdId());
		standardsAuthorsImpl.setAuthorName(getAuthorName());
		standardsAuthorsImpl.setIsPrimary(getIsPrimary());
		standardsAuthorsImpl.setCreatorId(getCreatorId());
		standardsAuthorsImpl.setCreatedDate(getCreatedDate());
		standardsAuthorsImpl.setUpdatedBy(getUpdatedBy());
		standardsAuthorsImpl.setUpdatedDate(getUpdatedDate());

		standardsAuthorsImpl.resetOriginalValues();

		return standardsAuthorsImpl;
	}

	@Override
	public int compareTo(StandardsAuthors standardsAuthors) {
		long primaryKey = standardsAuthors.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsAuthors)) {
			return false;
		}

		StandardsAuthors standardsAuthors = (StandardsAuthors)obj;

		long primaryKey = standardsAuthors.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StandardsAuthorsModelImpl standardsAuthorsModelImpl = this;

		standardsAuthorsModelImpl._originalStdId = standardsAuthorsModelImpl._stdId;

		standardsAuthorsModelImpl._setOriginalStdId = false;

		standardsAuthorsModelImpl._originalAuthorName = standardsAuthorsModelImpl._authorName;

		standardsAuthorsModelImpl._originalIsPrimary = standardsAuthorsModelImpl._isPrimary;

		standardsAuthorsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsAuthors> toCacheModel() {
		StandardsAuthorsCacheModel standardsAuthorsCacheModel = new StandardsAuthorsCacheModel();

		standardsAuthorsCacheModel.stdAuthorId = getStdAuthorId();

		standardsAuthorsCacheModel.stdId = getStdId();

		standardsAuthorsCacheModel.authorName = getAuthorName();

		String authorName = standardsAuthorsCacheModel.authorName;

		if ((authorName != null) && (authorName.length() == 0)) {
			standardsAuthorsCacheModel.authorName = null;
		}

		standardsAuthorsCacheModel.isPrimary = getIsPrimary();

		String isPrimary = standardsAuthorsCacheModel.isPrimary;

		if ((isPrimary != null) && (isPrimary.length() == 0)) {
			standardsAuthorsCacheModel.isPrimary = null;
		}

		standardsAuthorsCacheModel.creatorId = getCreatorId();

		String creatorId = standardsAuthorsCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsAuthorsCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsAuthorsCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsAuthorsCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsAuthorsCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsAuthorsCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsAuthorsCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsAuthorsCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsAuthorsCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsAuthorsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{stdAuthorId=");
		sb.append(getStdAuthorId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", authorName=");
		sb.append(getAuthorName());
		sb.append(", isPrimary=");
		sb.append(getIsPrimary());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsAuthors");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdAuthorId</column-name><column-value><![CDATA[");
		sb.append(getStdAuthorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorName</column-name><column-value><![CDATA[");
		sb.append(getAuthorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isPrimary</column-name><column-value><![CDATA[");
		sb.append(getIsPrimary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsAuthors.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsAuthors.class
		};
	private long _stdAuthorId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private String _authorName;
	private String _originalAuthorName;
	private String _isPrimary;
	private String _originalIsPrimary;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsAuthors _escapedModel;
}