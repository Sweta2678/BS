/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GlossaryRegionNav;
import com.ihg.brandstandards.db.model.GlossaryRegionNavModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GlossaryRegionNav service. Represents a row in the &quot;GLOSSARY_RGN_NAV&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GlossaryRegionNavModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlossaryRegionNavImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GlossaryRegionNavImpl
 * @see com.ihg.brandstandards.db.model.GlossaryRegionNav
 * @see com.ihg.brandstandards.db.model.GlossaryRegionNavModel
 * @generated
 */
public class GlossaryRegionNavModelImpl extends BaseModelImpl<GlossaryRegionNav>
	implements GlossaryRegionNavModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a glossary region nav model instance should use the {@link com.ihg.brandstandards.db.model.GlossaryRegionNav} interface instead.
	 */
	public static final String TABLE_NAME = "GLOSSARY_RGN_NAV";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GLOSSARY_RGN_NAV_ID", Types.BIGINT },
			{ "GLOSSARY_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "NAVIGATION_ITEM_TXT", Types.VARCHAR },
			{ "ACTV_IND", Types.VARCHAR },
			{ "CHAIN_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GLOSSARY_RGN_NAV (GLOSSARY_RGN_NAV_ID LONG not null primary key,GLOSSARY_ID LONG,RGN_ID LONG,NAVIGATION_ITEM_TXT VARCHAR(75) null,ACTV_IND VARCHAR(75) null,CHAIN_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GLOSSARY_RGN_NAV";
	public static final String ORDER_BY_JPQL = " ORDER BY glossaryRegionNav.navItemText ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GLOSSARY_RGN_NAV.NAVIGATION_ITEM_TXT ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GlossaryRegionNav"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GlossaryRegionNav"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.GlossaryRegionNav"),
			true);
	public static long ACTIVEIND_COLUMN_BITMASK = 1L;
	public static long CHAINCODE_COLUMN_BITMASK = 2L;
	public static long GLOSSARYID_COLUMN_BITMASK = 4L;
	public static long NAVITEMTEXT_COLUMN_BITMASK = 8L;
	public static long REGIONID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GlossaryRegionNav"));

	public GlossaryRegionNavModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _glossaryRgnNavId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGlossaryRgnNavId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _glossaryRgnNavId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GlossaryRegionNav.class;
	}

	@Override
	public String getModelClassName() {
		return GlossaryRegionNav.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("glossaryRgnNavId", getGlossaryRgnNavId());
		attributes.put("glossaryId", getGlossaryId());
		attributes.put("regionId", getRegionId());
		attributes.put("navItemText", getNavItemText());
		attributes.put("activeInd", getActiveInd());
		attributes.put("chainCode", getChainCode());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long glossaryRgnNavId = (Long)attributes.get("glossaryRgnNavId");

		if (glossaryRgnNavId != null) {
			setGlossaryRgnNavId(glossaryRgnNavId);
		}

		Long glossaryId = (Long)attributes.get("glossaryId");

		if (glossaryId != null) {
			setGlossaryId(glossaryId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String navItemText = (String)attributes.get("navItemText");

		if (navItemText != null) {
			setNavItemText(navItemText);
		}

		String activeInd = (String)attributes.get("activeInd");

		if (activeInd != null) {
			setActiveInd(activeInd);
		}

		String chainCode = (String)attributes.get("chainCode");

		if (chainCode != null) {
			setChainCode(chainCode);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getGlossaryRgnNavId() {
		return _glossaryRgnNavId;
	}

	@Override
	public void setGlossaryRgnNavId(long glossaryRgnNavId) {
		_glossaryRgnNavId = glossaryRgnNavId;
	}

	@Override
	public long getGlossaryId() {
		return _glossaryId;
	}

	@Override
	public void setGlossaryId(long glossaryId) {
		_columnBitmask |= GLOSSARYID_COLUMN_BITMASK;

		if (!_setOriginalGlossaryId) {
			_setOriginalGlossaryId = true;

			_originalGlossaryId = _glossaryId;
		}

		_glossaryId = glossaryId;
	}

	public long getOriginalGlossaryId() {
		return _originalGlossaryId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getNavItemText() {
		if (_navItemText == null) {
			return StringPool.BLANK;
		}
		else {
			return _navItemText;
		}
	}

	@Override
	public void setNavItemText(String navItemText) {
		_columnBitmask = -1L;

		if (_originalNavItemText == null) {
			_originalNavItemText = _navItemText;
		}

		_navItemText = navItemText;
	}

	public String getOriginalNavItemText() {
		return GetterUtil.getString(_originalNavItemText);
	}

	@Override
	public String getActiveInd() {
		if (_activeInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeInd;
		}
	}

	@Override
	public void setActiveInd(String activeInd) {
		_columnBitmask |= ACTIVEIND_COLUMN_BITMASK;

		if (_originalActiveInd == null) {
			_originalActiveInd = _activeInd;
		}

		_activeInd = activeInd;
	}

	public String getOriginalActiveInd() {
		return GetterUtil.getString(_originalActiveInd);
	}

	@Override
	public String getChainCode() {
		if (_chainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chainCode;
		}
	}

	@Override
	public void setChainCode(String chainCode) {
		_columnBitmask |= CHAINCODE_COLUMN_BITMASK;

		if (_originalChainCode == null) {
			_originalChainCode = _chainCode;
		}

		_chainCode = chainCode;
	}

	public String getOriginalChainCode() {
		return GetterUtil.getString(_originalChainCode);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GlossaryRegionNav.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GlossaryRegionNav toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GlossaryRegionNav)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GlossaryRegionNavImpl glossaryRegionNavImpl = new GlossaryRegionNavImpl();

		glossaryRegionNavImpl.setGlossaryRgnNavId(getGlossaryRgnNavId());
		glossaryRegionNavImpl.setGlossaryId(getGlossaryId());
		glossaryRegionNavImpl.setRegionId(getRegionId());
		glossaryRegionNavImpl.setNavItemText(getNavItemText());
		glossaryRegionNavImpl.setActiveInd(getActiveInd());
		glossaryRegionNavImpl.setChainCode(getChainCode());
		glossaryRegionNavImpl.setCreatorId(getCreatorId());
		glossaryRegionNavImpl.setCreatedDate(getCreatedDate());
		glossaryRegionNavImpl.setUpdatedBy(getUpdatedBy());
		glossaryRegionNavImpl.setUpdatedDate(getUpdatedDate());

		glossaryRegionNavImpl.resetOriginalValues();

		return glossaryRegionNavImpl;
	}

	@Override
	public int compareTo(GlossaryRegionNav glossaryRegionNav) {
		int value = 0;

		value = getNavItemText().compareTo(glossaryRegionNav.getNavItemText());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GlossaryRegionNav)) {
			return false;
		}

		GlossaryRegionNav glossaryRegionNav = (GlossaryRegionNav)obj;

		long primaryKey = glossaryRegionNav.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GlossaryRegionNavModelImpl glossaryRegionNavModelImpl = this;

		glossaryRegionNavModelImpl._originalGlossaryId = glossaryRegionNavModelImpl._glossaryId;

		glossaryRegionNavModelImpl._setOriginalGlossaryId = false;

		glossaryRegionNavModelImpl._originalRegionId = glossaryRegionNavModelImpl._regionId;

		glossaryRegionNavModelImpl._setOriginalRegionId = false;

		glossaryRegionNavModelImpl._originalNavItemText = glossaryRegionNavModelImpl._navItemText;

		glossaryRegionNavModelImpl._originalActiveInd = glossaryRegionNavModelImpl._activeInd;

		glossaryRegionNavModelImpl._originalChainCode = glossaryRegionNavModelImpl._chainCode;

		glossaryRegionNavModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GlossaryRegionNav> toCacheModel() {
		GlossaryRegionNavCacheModel glossaryRegionNavCacheModel = new GlossaryRegionNavCacheModel();

		glossaryRegionNavCacheModel.glossaryRgnNavId = getGlossaryRgnNavId();

		glossaryRegionNavCacheModel.glossaryId = getGlossaryId();

		glossaryRegionNavCacheModel.regionId = getRegionId();

		glossaryRegionNavCacheModel.navItemText = getNavItemText();

		String navItemText = glossaryRegionNavCacheModel.navItemText;

		if ((navItemText != null) && (navItemText.length() == 0)) {
			glossaryRegionNavCacheModel.navItemText = null;
		}

		glossaryRegionNavCacheModel.activeInd = getActiveInd();

		String activeInd = glossaryRegionNavCacheModel.activeInd;

		if ((activeInd != null) && (activeInd.length() == 0)) {
			glossaryRegionNavCacheModel.activeInd = null;
		}

		glossaryRegionNavCacheModel.chainCode = getChainCode();

		String chainCode = glossaryRegionNavCacheModel.chainCode;

		if ((chainCode != null) && (chainCode.length() == 0)) {
			glossaryRegionNavCacheModel.chainCode = null;
		}

		glossaryRegionNavCacheModel.creatorId = getCreatorId();

		String creatorId = glossaryRegionNavCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			glossaryRegionNavCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			glossaryRegionNavCacheModel.createdDate = createdDate.getTime();
		}
		else {
			glossaryRegionNavCacheModel.createdDate = Long.MIN_VALUE;
		}

		glossaryRegionNavCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = glossaryRegionNavCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			glossaryRegionNavCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			glossaryRegionNavCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			glossaryRegionNavCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return glossaryRegionNavCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{glossaryRgnNavId=");
		sb.append(getGlossaryRgnNavId());
		sb.append(", glossaryId=");
		sb.append(getGlossaryId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", navItemText=");
		sb.append(getNavItemText());
		sb.append(", activeInd=");
		sb.append(getActiveInd());
		sb.append(", chainCode=");
		sb.append(getChainCode());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GlossaryRegionNav");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>glossaryRgnNavId</column-name><column-value><![CDATA[");
		sb.append(getGlossaryRgnNavId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryId</column-name><column-value><![CDATA[");
		sb.append(getGlossaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>navItemText</column-name><column-value><![CDATA[");
		sb.append(getNavItemText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeInd</column-name><column-value><![CDATA[");
		sb.append(getActiveInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chainCode</column-name><column-value><![CDATA[");
		sb.append(getChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GlossaryRegionNav.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GlossaryRegionNav.class
		};
	private long _glossaryRgnNavId;
	private long _glossaryId;
	private long _originalGlossaryId;
	private boolean _setOriginalGlossaryId;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _navItemText;
	private String _originalNavItemText;
	private String _activeInd;
	private String _originalActiveInd;
	private String _chainCode;
	private String _originalChainCode;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private GlossaryRegionNav _escapedModel;
}