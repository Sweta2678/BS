/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMUniqueGroupCountry;
import com.ihg.brandstandards.db.model.GEMUniqueGroupCountryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMUniqueGroupCountry service. Represents a row in the &quot;GEM_UNIQUE_GROUP_CTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMUniqueGroupCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMUniqueGroupCountryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMUniqueGroupCountryImpl
 * @see com.ihg.brandstandards.db.model.GEMUniqueGroupCountry
 * @see com.ihg.brandstandards.db.model.GEMUniqueGroupCountryModel
 * @generated
 */
public class GEMUniqueGroupCountryModelImpl extends BaseModelImpl<GEMUniqueGroupCountry>
	implements GEMUniqueGroupCountryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m unique group country model instance should use the {@link com.ihg.brandstandards.db.model.GEMUniqueGroupCountry} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_UNIQUE_GROUP_CTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GROUP_CTRY_ID", Types.BIGINT },
			{ "GEM_UNIQUE_GRP_ID", Types.BIGINT },
			{ "CTRY_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_UNIQUE_GROUP_CTRY (GROUP_CTRY_ID LONG not null primary key,GEM_UNIQUE_GRP_ID LONG,CTRY_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_UNIQUE_GROUP_CTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY gemUniqueGroupCountry.groupCountryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_UNIQUE_GROUP_CTRY.GROUP_CTRY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMUniqueGroupCountry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMUniqueGroupCountry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMUniqueGroupCountry"));

	public GEMUniqueGroupCountryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _groupCountryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGroupCountryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _groupCountryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMUniqueGroupCountry.class;
	}

	@Override
	public String getModelClassName() {
		return GEMUniqueGroupCountry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupCountryId", getGroupCountryId());
		attributes.put("uniqueGroupId", getUniqueGroupId());
		attributes.put("countryCode", getCountryCode());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupCountryId = (Long)attributes.get("groupCountryId");

		if (groupCountryId != null) {
			setGroupCountryId(groupCountryId);
		}

		Long uniqueGroupId = (Long)attributes.get("uniqueGroupId");

		if (uniqueGroupId != null) {
			setUniqueGroupId(uniqueGroupId);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getGroupCountryId() {
		return _groupCountryId;
	}

	@Override
	public void setGroupCountryId(long groupCountryId) {
		_groupCountryId = groupCountryId;
	}

	@Override
	public long getUniqueGroupId() {
		return _uniqueGroupId;
	}

	@Override
	public void setUniqueGroupId(long uniqueGroupId) {
		_uniqueGroupId = uniqueGroupId;
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMUniqueGroupCountry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMUniqueGroupCountry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMUniqueGroupCountry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMUniqueGroupCountryImpl gemUniqueGroupCountryImpl = new GEMUniqueGroupCountryImpl();

		gemUniqueGroupCountryImpl.setGroupCountryId(getGroupCountryId());
		gemUniqueGroupCountryImpl.setUniqueGroupId(getUniqueGroupId());
		gemUniqueGroupCountryImpl.setCountryCode(getCountryCode());
		gemUniqueGroupCountryImpl.setCreatorId(getCreatorId());
		gemUniqueGroupCountryImpl.setCreatedDate(getCreatedDate());
		gemUniqueGroupCountryImpl.setUpdatedBy(getUpdatedBy());
		gemUniqueGroupCountryImpl.setUpdatedDate(getUpdatedDate());

		gemUniqueGroupCountryImpl.resetOriginalValues();

		return gemUniqueGroupCountryImpl;
	}

	@Override
	public int compareTo(GEMUniqueGroupCountry gemUniqueGroupCountry) {
		long primaryKey = gemUniqueGroupCountry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMUniqueGroupCountry)) {
			return false;
		}

		GEMUniqueGroupCountry gemUniqueGroupCountry = (GEMUniqueGroupCountry)obj;

		long primaryKey = gemUniqueGroupCountry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMUniqueGroupCountry> toCacheModel() {
		GEMUniqueGroupCountryCacheModel gemUniqueGroupCountryCacheModel = new GEMUniqueGroupCountryCacheModel();

		gemUniqueGroupCountryCacheModel.groupCountryId = getGroupCountryId();

		gemUniqueGroupCountryCacheModel.uniqueGroupId = getUniqueGroupId();

		gemUniqueGroupCountryCacheModel.countryCode = getCountryCode();

		String countryCode = gemUniqueGroupCountryCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			gemUniqueGroupCountryCacheModel.countryCode = null;
		}

		gemUniqueGroupCountryCacheModel.creatorId = getCreatorId();

		String creatorId = gemUniqueGroupCountryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemUniqueGroupCountryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemUniqueGroupCountryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemUniqueGroupCountryCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemUniqueGroupCountryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemUniqueGroupCountryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemUniqueGroupCountryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemUniqueGroupCountryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemUniqueGroupCountryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemUniqueGroupCountryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{groupCountryId=");
		sb.append(getGroupCountryId());
		sb.append(", uniqueGroupId=");
		sb.append(getUniqueGroupId());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMUniqueGroupCountry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupCountryId</column-name><column-value><![CDATA[");
		sb.append(getGroupCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uniqueGroupId</column-name><column-value><![CDATA[");
		sb.append(getUniqueGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMUniqueGroupCountry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMUniqueGroupCountry.class
		};
	private long _groupCountryId;
	private long _uniqueGroupId;
	private String _countryCode;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMUniqueGroupCountry _escapedModel;
}