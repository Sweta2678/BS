/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.UIElement;
import com.ihg.brandstandards.db.model.UIElementModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UIElement service. Represents a row in the &quot;UI_ELEM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.UIElementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UIElementImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see UIElementImpl
 * @see com.ihg.brandstandards.db.model.UIElement
 * @see com.ihg.brandstandards.db.model.UIElementModel
 * @generated
 */
public class UIElementModelImpl extends BaseModelImpl<UIElement>
	implements UIElementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a u i element model instance should use the {@link com.ihg.brandstandards.db.model.UIElement} interface instead.
	 */
	public static final String TABLE_NAME = "UI_ELEM";
	public static final Object[][] TABLE_COLUMNS = {
			{ "UI_ELEM_ID", Types.BIGINT },
			{ "UI_ELEM_KEY", Types.VARCHAR },
			{ "TGT_MODULE_NM", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table UI_ELEM (UI_ELEM_ID LONG not null primary key,UI_ELEM_KEY VARCHAR(75) null,TGT_MODULE_NM VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table UI_ELEM";
	public static final String ORDER_BY_JPQL = " ORDER BY uiElement.elementId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UI_ELEM.UI_ELEM_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.UIElement"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.UIElement"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.UIElement"),
			true);
	public static long ELEMENTKEY_COLUMN_BITMASK = 1L;
	public static long MODULENAME_COLUMN_BITMASK = 2L;
	public static long ELEMENTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.UIElement"));

	public UIElementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _elementId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setElementId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _elementId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UIElement.class;
	}

	@Override
	public String getModelClassName() {
		return UIElement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("elementId", getElementId());
		attributes.put("elementKey", getElementKey());
		attributes.put("moduleName", getModuleName());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long elementId = (Long)attributes.get("elementId");

		if (elementId != null) {
			setElementId(elementId);
		}

		String elementKey = (String)attributes.get("elementKey");

		if (elementKey != null) {
			setElementKey(elementKey);
		}

		String moduleName = (String)attributes.get("moduleName");

		if (moduleName != null) {
			setModuleName(moduleName);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getElementId() {
		return _elementId;
	}

	@Override
	public void setElementId(long elementId) {
		_columnBitmask = -1L;

		_elementId = elementId;
	}

	@Override
	public String getElementKey() {
		if (_elementKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _elementKey;
		}
	}

	@Override
	public void setElementKey(String elementKey) {
		_columnBitmask |= ELEMENTKEY_COLUMN_BITMASK;

		if (_originalElementKey == null) {
			_originalElementKey = _elementKey;
		}

		_elementKey = elementKey;
	}

	public String getOriginalElementKey() {
		return GetterUtil.getString(_originalElementKey);
	}

	@Override
	public String getModuleName() {
		if (_moduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _moduleName;
		}
	}

	@Override
	public void setModuleName(String moduleName) {
		_columnBitmask |= MODULENAME_COLUMN_BITMASK;

		if (_originalModuleName == null) {
			_originalModuleName = _moduleName;
		}

		_moduleName = moduleName;
	}

	public String getOriginalModuleName() {
		return GetterUtil.getString(_originalModuleName);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UIElement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UIElement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UIElement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UIElementImpl uiElementImpl = new UIElementImpl();

		uiElementImpl.setElementId(getElementId());
		uiElementImpl.setElementKey(getElementKey());
		uiElementImpl.setModuleName(getModuleName());
		uiElementImpl.setCreatorId(getCreatorId());
		uiElementImpl.setCreatedDate(getCreatedDate());
		uiElementImpl.setUpdatedBy(getUpdatedBy());
		uiElementImpl.setUpdatedDate(getUpdatedDate());

		uiElementImpl.resetOriginalValues();

		return uiElementImpl;
	}

	@Override
	public int compareTo(UIElement uiElement) {
		int value = 0;

		if (getElementId() < uiElement.getElementId()) {
			value = -1;
		}
		else if (getElementId() > uiElement.getElementId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UIElement)) {
			return false;
		}

		UIElement uiElement = (UIElement)obj;

		long primaryKey = uiElement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UIElementModelImpl uiElementModelImpl = this;

		uiElementModelImpl._originalElementKey = uiElementModelImpl._elementKey;

		uiElementModelImpl._originalModuleName = uiElementModelImpl._moduleName;

		uiElementModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UIElement> toCacheModel() {
		UIElementCacheModel uiElementCacheModel = new UIElementCacheModel();

		uiElementCacheModel.elementId = getElementId();

		uiElementCacheModel.elementKey = getElementKey();

		String elementKey = uiElementCacheModel.elementKey;

		if ((elementKey != null) && (elementKey.length() == 0)) {
			uiElementCacheModel.elementKey = null;
		}

		uiElementCacheModel.moduleName = getModuleName();

		String moduleName = uiElementCacheModel.moduleName;

		if ((moduleName != null) && (moduleName.length() == 0)) {
			uiElementCacheModel.moduleName = null;
		}

		uiElementCacheModel.creatorId = getCreatorId();

		String creatorId = uiElementCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			uiElementCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			uiElementCacheModel.createdDate = createdDate.getTime();
		}
		else {
			uiElementCacheModel.createdDate = Long.MIN_VALUE;
		}

		uiElementCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = uiElementCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			uiElementCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			uiElementCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			uiElementCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return uiElementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{elementId=");
		sb.append(getElementId());
		sb.append(", elementKey=");
		sb.append(getElementKey());
		sb.append(", moduleName=");
		sb.append(getModuleName());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.UIElement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>elementId</column-name><column-value><![CDATA[");
		sb.append(getElementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elementKey</column-name><column-value><![CDATA[");
		sb.append(getElementKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleName</column-name><column-value><![CDATA[");
		sb.append(getModuleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UIElement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UIElement.class
		};
	private long _elementId;
	private String _elementKey;
	private String _originalElementKey;
	private String _moduleName;
	private String _originalModuleName;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private UIElement _escapedModel;
}