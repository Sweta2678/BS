/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.CountryStandardsExt;
import com.ihg.brandstandards.db.model.CountryStandardsExtModel;
import com.ihg.brandstandards.db.service.persistence.CountryStandardsExtPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CountryStandardsExt service. Represents a row in the &quot;CTRY_STD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.CountryStandardsExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CountryStandardsExtImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see CountryStandardsExtImpl
 * @see com.ihg.brandstandards.db.model.CountryStandardsExt
 * @see com.ihg.brandstandards.db.model.CountryStandardsExtModel
 * @generated
 */
public class CountryStandardsExtModelImpl extends BaseModelImpl<CountryStandardsExt>
	implements CountryStandardsExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a country standards ext model instance should use the {@link com.ihg.brandstandards.db.model.CountryStandardsExt} interface instead.
	 */
	public static final String TABLE_NAME = "CTRY_STD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "STD_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "RGN_CD", Types.VARCHAR },
			{ "RGN_NM", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CTRY_STD (CTRY_NM_CD VARCHAR(75) not null,STD_ID LONG not null,RGN_ID LONG,RGN_CD VARCHAR(75) null,RGN_NM VARCHAR(75) null,primary key (CTRY_NM_CD, STD_ID))";
	public static final String TABLE_SQL_DROP = "drop table CTRY_STD";
	public static final String ORDER_BY_JPQL = " ORDER BY countryStandardsExt.id.countryCode ASC, countryStandardsExt.id.stdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CTRY_STD.CTRY_NM_CD ASC, CTRY_STD.STD_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.CountryStandardsExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.CountryStandardsExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.CountryStandardsExt"));

	public CountryStandardsExtModelImpl() {
	}

	@Override
	public CountryStandardsExtPK getPrimaryKey() {
		return new CountryStandardsExtPK(_countryCode, _stdId);
	}

	@Override
	public void setPrimaryKey(CountryStandardsExtPK primaryKey) {
		setCountryCode(primaryKey.countryCode);
		setStdId(primaryKey.stdId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CountryStandardsExtPK(_countryCode, _stdId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CountryStandardsExtPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CountryStandardsExt.class;
	}

	@Override
	public String getModelClassName() {
		return CountryStandardsExt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("countryCode", getCountryCode());
		attributes.put("stdId", getStdId());
		attributes.put("regionId", getRegionId());
		attributes.put("regionCode", getRegionCode());
		attributes.put("regionName", getRegionName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String regionName = (String)attributes.get("regionName");

		if (regionName != null) {
			setRegionName(regionName);
		}
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_regionCode = regionCode;
	}

	@Override
	public String getRegionName() {
		if (_regionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionName;
		}
	}

	@Override
	public void setRegionName(String regionName) {
		_regionName = regionName;
	}

	@Override
	public CountryStandardsExt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CountryStandardsExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CountryStandardsExtImpl countryStandardsExtImpl = new CountryStandardsExtImpl();

		countryStandardsExtImpl.setCountryCode(getCountryCode());
		countryStandardsExtImpl.setStdId(getStdId());
		countryStandardsExtImpl.setRegionId(getRegionId());
		countryStandardsExtImpl.setRegionCode(getRegionCode());
		countryStandardsExtImpl.setRegionName(getRegionName());

		countryStandardsExtImpl.resetOriginalValues();

		return countryStandardsExtImpl;
	}

	@Override
	public int compareTo(CountryStandardsExt countryStandardsExt) {
		CountryStandardsExtPK primaryKey = countryStandardsExt.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CountryStandardsExt)) {
			return false;
		}

		CountryStandardsExt countryStandardsExt = (CountryStandardsExt)obj;

		CountryStandardsExtPK primaryKey = countryStandardsExt.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CountryStandardsExt> toCacheModel() {
		CountryStandardsExtCacheModel countryStandardsExtCacheModel = new CountryStandardsExtCacheModel();

		countryStandardsExtCacheModel.countryCode = getCountryCode();

		String countryCode = countryStandardsExtCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			countryStandardsExtCacheModel.countryCode = null;
		}

		countryStandardsExtCacheModel.stdId = getStdId();

		countryStandardsExtCacheModel.regionId = getRegionId();

		countryStandardsExtCacheModel.regionCode = getRegionCode();

		String regionCode = countryStandardsExtCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			countryStandardsExtCacheModel.regionCode = null;
		}

		countryStandardsExtCacheModel.regionName = getRegionName();

		String regionName = countryStandardsExtCacheModel.regionName;

		if ((regionName != null) && (regionName.length() == 0)) {
			countryStandardsExtCacheModel.regionName = null;
		}

		return countryStandardsExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{countryCode=");
		sb.append(getCountryCode());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", regionName=");
		sb.append(getRegionName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.CountryStandardsExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionName</column-name><column-value><![CDATA[");
		sb.append(getRegionName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CountryStandardsExt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CountryStandardsExt.class
		};
	private String _countryCode;
	private long _stdId;
	private long _regionId;
	private String _regionCode;
	private String _regionName;
	private CountryStandardsExt _escapedModel;
}