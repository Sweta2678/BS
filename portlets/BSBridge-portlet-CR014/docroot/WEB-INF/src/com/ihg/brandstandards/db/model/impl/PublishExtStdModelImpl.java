/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.PublishExtStd;
import com.ihg.brandstandards.db.model.PublishExtStdModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PublishExtStd service. Represents a row in the &quot;PUBLISH_STD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.PublishExtStdModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublishExtStdImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see PublishExtStdImpl
 * @see com.ihg.brandstandards.db.model.PublishExtStd
 * @see com.ihg.brandstandards.db.model.PublishExtStdModel
 * @generated
 */
public class PublishExtStdModelImpl extends BaseModelImpl<PublishExtStd>
	implements PublishExtStdModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Custom Query mapping between PUBLISH_STD and STD_CTRY_CHAIN tables. model instance should use the {@link com.ihg.brandstandards.db.model.PublishExtStd} interface instead.
	 */
	public static final String TABLE_NAME = "PUBLISH_STD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CMPLY_DT", Types.TIMESTAMP },
			{ "STD_ID", Types.BIGINT },
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "EXPIRED_BY_REF_TXT", Types.VARCHAR },
			{ "RGN_CD", Types.VARCHAR },
			{ "GBL_RGN_IND", Types.VARCHAR },
			{ "FRAMEWORK_STD_IND", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table PUBLISH_STD (CMPLY_DT DATE null,STD_ID LONG not null primary key,PRNT_STD_ID LONG,TITLE_TXT VARCHAR(75) null,EXPIRED_BY_REF_TXT VARCHAR(75) null,RGN_CD VARCHAR(75) null,GBL_RGN_IND VARCHAR(75) null,FRAMEWORK_STD_IND VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table PUBLISH_STD";
	public static final String ORDER_BY_JPQL = " ORDER BY publishExtStd.stdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PUBLISH_STD.STD_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.PublishExtStd"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.PublishExtStd"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.PublishExtStd"));

	public PublishExtStdModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublishExtStd.class;
	}

	@Override
	public String getModelClassName() {
		return PublishExtStd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("compDate", getCompDate());
		attributes.put("stdId", getStdId());
		attributes.put("parentId", getParentId());
		attributes.put("title", getTitle());
		attributes.put("expiredIds", getExpiredIds());
		attributes.put("regionCode", getRegionCode());
		attributes.put("isGlobal", getIsGlobal());
		attributes.put("framework", getFramework());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date compDate = (Date)attributes.get("compDate");

		if (compDate != null) {
			setCompDate(compDate);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String expiredIds = (String)attributes.get("expiredIds");

		if (expiredIds != null) {
			setExpiredIds(expiredIds);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String isGlobal = (String)attributes.get("isGlobal");

		if (isGlobal != null) {
			setIsGlobal(isGlobal);
		}

		String framework = (String)attributes.get("framework");

		if (framework != null) {
			setFramework(framework);
		}
	}

	@Override
	public Date getCompDate() {
		return _compDate;
	}

	@Override
	public void setCompDate(Date compDate) {
		_compDate = compDate;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getExpiredIds() {
		if (_expiredIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiredIds;
		}
	}

	@Override
	public void setExpiredIds(String expiredIds) {
		_expiredIds = expiredIds;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_regionCode = regionCode;
	}

	@Override
	public String getIsGlobal() {
		if (_isGlobal == null) {
			return StringPool.BLANK;
		}
		else {
			return _isGlobal;
		}
	}

	@Override
	public void setIsGlobal(String isGlobal) {
		_isGlobal = isGlobal;
	}

	@Override
	public String getFramework() {
		if (_framework == null) {
			return StringPool.BLANK;
		}
		else {
			return _framework;
		}
	}

	@Override
	public void setFramework(String framework) {
		_framework = framework;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublishExtStd.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PublishExtStd toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublishExtStd)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublishExtStdImpl publishExtStdImpl = new PublishExtStdImpl();

		publishExtStdImpl.setCompDate(getCompDate());
		publishExtStdImpl.setStdId(getStdId());
		publishExtStdImpl.setParentId(getParentId());
		publishExtStdImpl.setTitle(getTitle());
		publishExtStdImpl.setExpiredIds(getExpiredIds());
		publishExtStdImpl.setRegionCode(getRegionCode());
		publishExtStdImpl.setIsGlobal(getIsGlobal());
		publishExtStdImpl.setFramework(getFramework());

		publishExtStdImpl.resetOriginalValues();

		return publishExtStdImpl;
	}

	@Override
	public int compareTo(PublishExtStd publishExtStd) {
		long primaryKey = publishExtStd.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublishExtStd)) {
			return false;
		}

		PublishExtStd publishExtStd = (PublishExtStd)obj;

		long primaryKey = publishExtStd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PublishExtStd> toCacheModel() {
		PublishExtStdCacheModel publishExtStdCacheModel = new PublishExtStdCacheModel();

		Date compDate = getCompDate();

		if (compDate != null) {
			publishExtStdCacheModel.compDate = compDate.getTime();
		}
		else {
			publishExtStdCacheModel.compDate = Long.MIN_VALUE;
		}

		publishExtStdCacheModel.stdId = getStdId();

		publishExtStdCacheModel.parentId = getParentId();

		publishExtStdCacheModel.title = getTitle();

		String title = publishExtStdCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			publishExtStdCacheModel.title = null;
		}

		publishExtStdCacheModel.expiredIds = getExpiredIds();

		String expiredIds = publishExtStdCacheModel.expiredIds;

		if ((expiredIds != null) && (expiredIds.length() == 0)) {
			publishExtStdCacheModel.expiredIds = null;
		}

		publishExtStdCacheModel.regionCode = getRegionCode();

		String regionCode = publishExtStdCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			publishExtStdCacheModel.regionCode = null;
		}

		publishExtStdCacheModel.isGlobal = getIsGlobal();

		String isGlobal = publishExtStdCacheModel.isGlobal;

		if ((isGlobal != null) && (isGlobal.length() == 0)) {
			publishExtStdCacheModel.isGlobal = null;
		}

		publishExtStdCacheModel.framework = getFramework();

		String framework = publishExtStdCacheModel.framework;

		if ((framework != null) && (framework.length() == 0)) {
			publishExtStdCacheModel.framework = null;
		}

		return publishExtStdCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{compDate=");
		sb.append(getCompDate());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", expiredIds=");
		sb.append(getExpiredIds());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", isGlobal=");
		sb.append(getIsGlobal());
		sb.append(", framework=");
		sb.append(getFramework());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.PublishExtStd");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>compDate</column-name><column-value><![CDATA[");
		sb.append(getCompDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredIds</column-name><column-value><![CDATA[");
		sb.append(getExpiredIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isGlobal</column-name><column-value><![CDATA[");
		sb.append(getIsGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>framework</column-name><column-value><![CDATA[");
		sb.append(getFramework());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PublishExtStd.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PublishExtStd.class
		};
	private Date _compDate;
	private long _stdId;
	private long _parentId;
	private String _title;
	private String _expiredIds;
	private String _regionCode;
	private String _isGlobal;
	private String _framework;
	private PublishExtStd _escapedModel;
}