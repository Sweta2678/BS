/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.SpecialWordDictionary;
import com.ihg.brandstandards.db.model.SpecialWordDictionaryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SpecialWordDictionary service. Represents a row in the &quot;SPCL_WORD_DICTIONARY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.SpecialWordDictionaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpecialWordDictionaryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see SpecialWordDictionaryImpl
 * @see com.ihg.brandstandards.db.model.SpecialWordDictionary
 * @see com.ihg.brandstandards.db.model.SpecialWordDictionaryModel
 * @generated
 */
public class SpecialWordDictionaryModelImpl extends BaseModelImpl<SpecialWordDictionary>
	implements SpecialWordDictionaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a special word dictionary model instance should use the {@link com.ihg.brandstandards.db.model.SpecialWordDictionary} interface instead.
	 */
	public static final String TABLE_NAME = "SPCL_WORD_DICTIONARY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SPCL_WORD_DICTIONARY_ID", Types.BIGINT },
			{ "REPLCD_WORD_TXT", Types.VARCHAR },
			{ "REPLCMNT_WORD_TXT", Types.VARCHAR },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPCL_WORD_DICTIONARY (SPCL_WORD_DICTIONARY_ID LONG not null primary key,REPLCD_WORD_TXT VARCHAR(75) null,REPLCMNT_WORD_TXT VARCHAR(75) null,LOCALE_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table SPCL_WORD_DICTIONARY";
	public static final String ORDER_BY_JPQL = " ORDER BY specialWordDictionary.replacedWordTxt ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPCL_WORD_DICTIONARY.REPLCD_WORD_TXT ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.SpecialWordDictionary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.SpecialWordDictionary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.SpecialWordDictionary"),
			true);
	public static long LOCALECODE_COLUMN_BITMASK = 1L;
	public static long REPLACEDWORDTXT_COLUMN_BITMASK = 2L;
	public static long REPLACEMENTWORDTXT_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.SpecialWordDictionary"));

	public SpecialWordDictionaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _specialWordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpecialWordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _specialWordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpecialWordDictionary.class;
	}

	@Override
	public String getModelClassName() {
		return SpecialWordDictionary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("specialWordId", getSpecialWordId());
		attributes.put("replacedWordTxt", getReplacedWordTxt());
		attributes.put("replacementWordTxt", getReplacementWordTxt());
		attributes.put("localeCode", getLocaleCode());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long specialWordId = (Long)attributes.get("specialWordId");

		if (specialWordId != null) {
			setSpecialWordId(specialWordId);
		}

		String replacedWordTxt = (String)attributes.get("replacedWordTxt");

		if (replacedWordTxt != null) {
			setReplacedWordTxt(replacedWordTxt);
		}

		String replacementWordTxt = (String)attributes.get("replacementWordTxt");

		if (replacementWordTxt != null) {
			setReplacementWordTxt(replacementWordTxt);
		}

		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getSpecialWordId() {
		return _specialWordId;
	}

	@Override
	public void setSpecialWordId(long specialWordId) {
		_specialWordId = specialWordId;
	}

	@Override
	public String getReplacedWordTxt() {
		if (_replacedWordTxt == null) {
			return StringPool.BLANK;
		}
		else {
			return _replacedWordTxt;
		}
	}

	@Override
	public void setReplacedWordTxt(String replacedWordTxt) {
		_columnBitmask = -1L;

		if (_originalReplacedWordTxt == null) {
			_originalReplacedWordTxt = _replacedWordTxt;
		}

		_replacedWordTxt = replacedWordTxt;
	}

	public String getOriginalReplacedWordTxt() {
		return GetterUtil.getString(_originalReplacedWordTxt);
	}

	@Override
	public String getReplacementWordTxt() {
		if (_replacementWordTxt == null) {
			return StringPool.BLANK;
		}
		else {
			return _replacementWordTxt;
		}
	}

	@Override
	public void setReplacementWordTxt(String replacementWordTxt) {
		_columnBitmask |= REPLACEMENTWORDTXT_COLUMN_BITMASK;

		if (_originalReplacementWordTxt == null) {
			_originalReplacementWordTxt = _replacementWordTxt;
		}

		_replacementWordTxt = replacementWordTxt;
	}

	public String getOriginalReplacementWordTxt() {
		return GetterUtil.getString(_originalReplacementWordTxt);
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_columnBitmask |= LOCALECODE_COLUMN_BITMASK;

		if (_originalLocaleCode == null) {
			_originalLocaleCode = _localeCode;
		}

		_localeCode = localeCode;
	}

	public String getOriginalLocaleCode() {
		return GetterUtil.getString(_originalLocaleCode);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpecialWordDictionary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpecialWordDictionary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpecialWordDictionary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpecialWordDictionaryImpl specialWordDictionaryImpl = new SpecialWordDictionaryImpl();

		specialWordDictionaryImpl.setSpecialWordId(getSpecialWordId());
		specialWordDictionaryImpl.setReplacedWordTxt(getReplacedWordTxt());
		specialWordDictionaryImpl.setReplacementWordTxt(getReplacementWordTxt());
		specialWordDictionaryImpl.setLocaleCode(getLocaleCode());
		specialWordDictionaryImpl.setCreatorId(getCreatorId());
		specialWordDictionaryImpl.setCreatedDate(getCreatedDate());
		specialWordDictionaryImpl.setUpdatedBy(getUpdatedBy());
		specialWordDictionaryImpl.setUpdatedDate(getUpdatedDate());

		specialWordDictionaryImpl.resetOriginalValues();

		return specialWordDictionaryImpl;
	}

	@Override
	public int compareTo(SpecialWordDictionary specialWordDictionary) {
		int value = 0;

		value = getReplacedWordTxt()
					.compareTo(specialWordDictionary.getReplacedWordTxt());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpecialWordDictionary)) {
			return false;
		}

		SpecialWordDictionary specialWordDictionary = (SpecialWordDictionary)obj;

		long primaryKey = specialWordDictionary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpecialWordDictionaryModelImpl specialWordDictionaryModelImpl = this;

		specialWordDictionaryModelImpl._originalReplacedWordTxt = specialWordDictionaryModelImpl._replacedWordTxt;

		specialWordDictionaryModelImpl._originalReplacementWordTxt = specialWordDictionaryModelImpl._replacementWordTxt;

		specialWordDictionaryModelImpl._originalLocaleCode = specialWordDictionaryModelImpl._localeCode;

		specialWordDictionaryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpecialWordDictionary> toCacheModel() {
		SpecialWordDictionaryCacheModel specialWordDictionaryCacheModel = new SpecialWordDictionaryCacheModel();

		specialWordDictionaryCacheModel.specialWordId = getSpecialWordId();

		specialWordDictionaryCacheModel.replacedWordTxt = getReplacedWordTxt();

		String replacedWordTxt = specialWordDictionaryCacheModel.replacedWordTxt;

		if ((replacedWordTxt != null) && (replacedWordTxt.length() == 0)) {
			specialWordDictionaryCacheModel.replacedWordTxt = null;
		}

		specialWordDictionaryCacheModel.replacementWordTxt = getReplacementWordTxt();

		String replacementWordTxt = specialWordDictionaryCacheModel.replacementWordTxt;

		if ((replacementWordTxt != null) && (replacementWordTxt.length() == 0)) {
			specialWordDictionaryCacheModel.replacementWordTxt = null;
		}

		specialWordDictionaryCacheModel.localeCode = getLocaleCode();

		String localeCode = specialWordDictionaryCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			specialWordDictionaryCacheModel.localeCode = null;
		}

		specialWordDictionaryCacheModel.creatorId = getCreatorId();

		String creatorId = specialWordDictionaryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			specialWordDictionaryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			specialWordDictionaryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			specialWordDictionaryCacheModel.createdDate = Long.MIN_VALUE;
		}

		specialWordDictionaryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = specialWordDictionaryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			specialWordDictionaryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			specialWordDictionaryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			specialWordDictionaryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return specialWordDictionaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{specialWordId=");
		sb.append(getSpecialWordId());
		sb.append(", replacedWordTxt=");
		sb.append(getReplacedWordTxt());
		sb.append(", replacementWordTxt=");
		sb.append(getReplacementWordTxt());
		sb.append(", localeCode=");
		sb.append(getLocaleCode());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.SpecialWordDictionary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>specialWordId</column-name><column-value><![CDATA[");
		sb.append(getSpecialWordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacedWordTxt</column-name><column-value><![CDATA[");
		sb.append(getReplacedWordTxt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replacementWordTxt</column-name><column-value><![CDATA[");
		sb.append(getReplacementWordTxt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpecialWordDictionary.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpecialWordDictionary.class
		};
	private long _specialWordId;
	private String _replacedWordTxt;
	private String _originalReplacedWordTxt;
	private String _replacementWordTxt;
	private String _originalReplacementWordTxt;
	private String _localeCode;
	private String _originalLocaleCode;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private SpecialWordDictionary _escapedModel;
}