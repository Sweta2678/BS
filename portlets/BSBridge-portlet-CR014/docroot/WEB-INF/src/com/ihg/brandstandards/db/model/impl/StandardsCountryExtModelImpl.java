/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsCountryExt;
import com.ihg.brandstandards.db.model.StandardsCountryExtModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsCountryExt service. Represents a row in the &quot;BRNDSTND_CTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsCountryExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsCountryExtImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsCountryExtImpl
 * @see com.ihg.brandstandards.db.model.StandardsCountryExt
 * @see com.ihg.brandstandards.db.model.StandardsCountryExtModel
 * @generated
 */
public class StandardsCountryExtModelImpl extends BaseModelImpl<StandardsCountryExt>
	implements StandardsCountryExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards country ext model instance should use the {@link com.ihg.brandstandards.db.model.StandardsCountryExt} interface instead.
	 */
	public static final String TABLE_NAME = "BRNDSTND_CTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ROWNUM", Types.BIGINT },
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "CTRY_FLAG", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table BRNDSTND_CTRY (ROWNUM LONG not null primary key,CTRY_NM_CD VARCHAR(75) null,CTRY_FLAG VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BRNDSTND_CTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsCountryExt.rowNum ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRNDSTND_CTRY.ROWNUM ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsCountryExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsCountryExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsCountryExt"));

	public StandardsCountryExtModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rowNum;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRowNum(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rowNum;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsCountryExt.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsCountryExt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("rowNum", getRowNum());
		attributes.put("countryCode", getCountryCode());
		attributes.put("flag", getFlag());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long rowNum = (Long)attributes.get("rowNum");

		if (rowNum != null) {
			setRowNum(rowNum);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String flag = (String)attributes.get("flag");

		if (flag != null) {
			setFlag(flag);
		}
	}

	@Override
	public long getRowNum() {
		return _rowNum;
	}

	@Override
	public void setRowNum(long rowNum) {
		_rowNum = rowNum;
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@Override
	public String getFlag() {
		if (_flag == null) {
			return StringPool.BLANK;
		}
		else {
			return _flag;
		}
	}

	@Override
	public void setFlag(String flag) {
		_flag = flag;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StandardsCountryExt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StandardsCountryExt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsCountryExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsCountryExtImpl standardsCountryExtImpl = new StandardsCountryExtImpl();

		standardsCountryExtImpl.setRowNum(getRowNum());
		standardsCountryExtImpl.setCountryCode(getCountryCode());
		standardsCountryExtImpl.setFlag(getFlag());

		standardsCountryExtImpl.resetOriginalValues();

		return standardsCountryExtImpl;
	}

	@Override
	public int compareTo(StandardsCountryExt standardsCountryExt) {
		long primaryKey = standardsCountryExt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsCountryExt)) {
			return false;
		}

		StandardsCountryExt standardsCountryExt = (StandardsCountryExt)obj;

		long primaryKey = standardsCountryExt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StandardsCountryExt> toCacheModel() {
		StandardsCountryExtCacheModel standardsCountryExtCacheModel = new StandardsCountryExtCacheModel();

		standardsCountryExtCacheModel.rowNum = getRowNum();

		standardsCountryExtCacheModel.countryCode = getCountryCode();

		String countryCode = standardsCountryExtCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			standardsCountryExtCacheModel.countryCode = null;
		}

		standardsCountryExtCacheModel.flag = getFlag();

		String flag = standardsCountryExtCacheModel.flag;

		if ((flag != null) && (flag.length() == 0)) {
			standardsCountryExtCacheModel.flag = null;
		}

		return standardsCountryExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{rowNum=");
		sb.append(getRowNum());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", flag=");
		sb.append(getFlag());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsCountryExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>rowNum</column-name><column-value><![CDATA[");
		sb.append(getRowNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flag</column-name><column-value><![CDATA[");
		sb.append(getFlag());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsCountryExt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsCountryExt.class
		};
	private long _rowNum;
	private String _countryCode;
	private String _flag;
	private StandardsCountryExt _escapedModel;
}