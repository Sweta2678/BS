/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.MustPublish;
import com.ihg.brandstandards.db.model.MustPublishModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MustPublish service. Represents a row in the &quot;BRIDGE_GBL_PUBLISH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.MustPublishModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MustPublishImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see MustPublishImpl
 * @see com.ihg.brandstandards.db.model.MustPublish
 * @see com.ihg.brandstandards.db.model.MustPublishModel
 * @generated
 */
public class MustPublishModelImpl extends BaseModelImpl<MustPublish>
	implements MustPublishModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a must publish model instance should use the {@link com.ihg.brandstandards.db.model.MustPublish} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_GBL_PUBLISH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "TITLE", Types.VARCHAR },
			{ "STD_TYPE", Types.VARCHAR },
			{ "PATH", Types.VARCHAR },
			{ "CURR_PATH", Types.VARCHAR },
			{ "RGN_CD", Types.VARCHAR },
			{ "AMER", Types.VARCHAR },
			{ "AMEA", Types.VARCHAR },
			{ "EURO", Types.VARCHAR },
			{ "GC", Types.VARCHAR },
			{ "STAT_DESC", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "INDX_ORDER", Types.BIGINT },
			{ "LVL", Types.BIGINT },
			{ "HIER_LVL_NBR", Types.BIGINT },
			{ "GBL_RGN_IND", Types.VARCHAR },
			{ "FRAMEWORK_STD_IND", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_GBL_PUBLISH (PRNT_STD_ID LONG,STD_ID LONG not null primary key,TITLE VARCHAR(75) null,STD_TYPE VARCHAR(75) null,PATH VARCHAR(75) null,CURR_PATH VARCHAR(75) null,RGN_CD VARCHAR(75) null,AMER VARCHAR(75) null,AMEA VARCHAR(75) null,EURO VARCHAR(75) null,GC VARCHAR(75) null,STAT_DESC VARCHAR(75) null,DISP_ORDER_NBR LONG,TAXONOMY_ID LONG,PRNT_TAXONOMY_ID LONG,INDX_ORDER LONG,LVL LONG,HIER_LVL_NBR LONG,GBL_RGN_IND VARCHAR(75) null,FRAMEWORK_STD_IND VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_GBL_PUBLISH";
	public static final String ORDER_BY_JPQL = " ORDER BY mustPublish.parentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_GBL_PUBLISH.PRNT_STD_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.MustPublish"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.MustPublish"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.MustPublish"));

	public MustPublishModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MustPublish.class;
	}

	@Override
	public String getModelClassName() {
		return MustPublish.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parentId", getParentId());
		attributes.put("stdId", getStdId());
		attributes.put("title", getTitle());
		attributes.put("stdType", getStdType());
		attributes.put("path", getPath());
		attributes.put("currentPath", getCurrentPath());
		attributes.put("regionCode", getRegionCode());
		attributes.put("amer", getAmer());
		attributes.put("amea", getAmea());
		attributes.put("euro", getEuro());
		attributes.put("gc", getGc());
		attributes.put("status", getStatus());
		attributes.put("displayOrder", getDisplayOrder());
		attributes.put("taxonomyId", getTaxonomyId());
		attributes.put("parentTaxonomyId", getParentTaxonomyId());
		attributes.put("indexOrder", getIndexOrder());
		attributes.put("level", getLevel());
		attributes.put("levelSortOrder", getLevelSortOrder());
		attributes.put("isGlobal", getIsGlobal());
		attributes.put("framework", getFramework());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String stdType = (String)attributes.get("stdType");

		if (stdType != null) {
			setStdType(stdType);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		String currentPath = (String)attributes.get("currentPath");

		if (currentPath != null) {
			setCurrentPath(currentPath);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String amer = (String)attributes.get("amer");

		if (amer != null) {
			setAmer(amer);
		}

		String amea = (String)attributes.get("amea");

		if (amea != null) {
			setAmea(amea);
		}

		String euro = (String)attributes.get("euro");

		if (euro != null) {
			setEuro(euro);
		}

		String gc = (String)attributes.get("gc");

		if (gc != null) {
			setGc(gc);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long displayOrder = (Long)attributes.get("displayOrder");

		if (displayOrder != null) {
			setDisplayOrder(displayOrder);
		}

		Long taxonomyId = (Long)attributes.get("taxonomyId");

		if (taxonomyId != null) {
			setTaxonomyId(taxonomyId);
		}

		Long parentTaxonomyId = (Long)attributes.get("parentTaxonomyId");

		if (parentTaxonomyId != null) {
			setParentTaxonomyId(parentTaxonomyId);
		}

		Long indexOrder = (Long)attributes.get("indexOrder");

		if (indexOrder != null) {
			setIndexOrder(indexOrder);
		}

		Long level = (Long)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Long levelSortOrder = (Long)attributes.get("levelSortOrder");

		if (levelSortOrder != null) {
			setLevelSortOrder(levelSortOrder);
		}

		String isGlobal = (String)attributes.get("isGlobal");

		if (isGlobal != null) {
			setIsGlobal(isGlobal);
		}

		String framework = (String)attributes.get("framework");

		if (framework != null) {
			setFramework(framework);
		}
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getStdType() {
		if (_stdType == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdType;
		}
	}

	@Override
	public void setStdType(String stdType) {
		_stdType = stdType;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@Override
	public String getCurrentPath() {
		if (_currentPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentPath;
		}
	}

	@Override
	public void setCurrentPath(String currentPath) {
		_currentPath = currentPath;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_regionCode = regionCode;
	}

	@Override
	public String getAmer() {
		if (_amer == null) {
			return StringPool.BLANK;
		}
		else {
			return _amer;
		}
	}

	@Override
	public void setAmer(String amer) {
		_amer = amer;
	}

	@Override
	public String getAmea() {
		if (_amea == null) {
			return StringPool.BLANK;
		}
		else {
			return _amea;
		}
	}

	@Override
	public void setAmea(String amea) {
		_amea = amea;
	}

	@Override
	public String getEuro() {
		if (_euro == null) {
			return StringPool.BLANK;
		}
		else {
			return _euro;
		}
	}

	@Override
	public void setEuro(String euro) {
		_euro = euro;
	}

	@Override
	public String getGc() {
		if (_gc == null) {
			return StringPool.BLANK;
		}
		else {
			return _gc;
		}
	}

	@Override
	public void setGc(String gc) {
		_gc = gc;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public long getDisplayOrder() {
		return _displayOrder;
	}

	@Override
	public void setDisplayOrder(long displayOrder) {
		_displayOrder = displayOrder;
	}

	@Override
	public long getTaxonomyId() {
		return _taxonomyId;
	}

	@Override
	public void setTaxonomyId(long taxonomyId) {
		_taxonomyId = taxonomyId;
	}

	@Override
	public long getParentTaxonomyId() {
		return _parentTaxonomyId;
	}

	@Override
	public void setParentTaxonomyId(long parentTaxonomyId) {
		_parentTaxonomyId = parentTaxonomyId;
	}

	@Override
	public long getIndexOrder() {
		return _indexOrder;
	}

	@Override
	public void setIndexOrder(long indexOrder) {
		_indexOrder = indexOrder;
	}

	@Override
	public long getLevel() {
		return _level;
	}

	@Override
	public void setLevel(long level) {
		_level = level;
	}

	@Override
	public long getLevelSortOrder() {
		return _levelSortOrder;
	}

	@Override
	public void setLevelSortOrder(long levelSortOrder) {
		_levelSortOrder = levelSortOrder;
	}

	@Override
	public String getIsGlobal() {
		if (_isGlobal == null) {
			return StringPool.BLANK;
		}
		else {
			return _isGlobal;
		}
	}

	@Override
	public void setIsGlobal(String isGlobal) {
		_isGlobal = isGlobal;
	}

	@Override
	public String getFramework() {
		if (_framework == null) {
			return StringPool.BLANK;
		}
		else {
			return _framework;
		}
	}

	@Override
	public void setFramework(String framework) {
		_framework = framework;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MustPublish.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MustPublish toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MustPublish)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MustPublishImpl mustPublishImpl = new MustPublishImpl();

		mustPublishImpl.setParentId(getParentId());
		mustPublishImpl.setStdId(getStdId());
		mustPublishImpl.setTitle(getTitle());
		mustPublishImpl.setStdType(getStdType());
		mustPublishImpl.setPath(getPath());
		mustPublishImpl.setCurrentPath(getCurrentPath());
		mustPublishImpl.setRegionCode(getRegionCode());
		mustPublishImpl.setAmer(getAmer());
		mustPublishImpl.setAmea(getAmea());
		mustPublishImpl.setEuro(getEuro());
		mustPublishImpl.setGc(getGc());
		mustPublishImpl.setStatus(getStatus());
		mustPublishImpl.setDisplayOrder(getDisplayOrder());
		mustPublishImpl.setTaxonomyId(getTaxonomyId());
		mustPublishImpl.setParentTaxonomyId(getParentTaxonomyId());
		mustPublishImpl.setIndexOrder(getIndexOrder());
		mustPublishImpl.setLevel(getLevel());
		mustPublishImpl.setLevelSortOrder(getLevelSortOrder());
		mustPublishImpl.setIsGlobal(getIsGlobal());
		mustPublishImpl.setFramework(getFramework());

		mustPublishImpl.resetOriginalValues();

		return mustPublishImpl;
	}

	@Override
	public int compareTo(MustPublish mustPublish) {
		int value = 0;

		if (getParentId() < mustPublish.getParentId()) {
			value = -1;
		}
		else if (getParentId() > mustPublish.getParentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MustPublish)) {
			return false;
		}

		MustPublish mustPublish = (MustPublish)obj;

		long primaryKey = mustPublish.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MustPublish> toCacheModel() {
		MustPublishCacheModel mustPublishCacheModel = new MustPublishCacheModel();

		mustPublishCacheModel.parentId = getParentId();

		mustPublishCacheModel.stdId = getStdId();

		mustPublishCacheModel.title = getTitle();

		String title = mustPublishCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			mustPublishCacheModel.title = null;
		}

		mustPublishCacheModel.stdType = getStdType();

		String stdType = mustPublishCacheModel.stdType;

		if ((stdType != null) && (stdType.length() == 0)) {
			mustPublishCacheModel.stdType = null;
		}

		mustPublishCacheModel.path = getPath();

		String path = mustPublishCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			mustPublishCacheModel.path = null;
		}

		mustPublishCacheModel.currentPath = getCurrentPath();

		String currentPath = mustPublishCacheModel.currentPath;

		if ((currentPath != null) && (currentPath.length() == 0)) {
			mustPublishCacheModel.currentPath = null;
		}

		mustPublishCacheModel.regionCode = getRegionCode();

		String regionCode = mustPublishCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			mustPublishCacheModel.regionCode = null;
		}

		mustPublishCacheModel.amer = getAmer();

		String amer = mustPublishCacheModel.amer;

		if ((amer != null) && (amer.length() == 0)) {
			mustPublishCacheModel.amer = null;
		}

		mustPublishCacheModel.amea = getAmea();

		String amea = mustPublishCacheModel.amea;

		if ((amea != null) && (amea.length() == 0)) {
			mustPublishCacheModel.amea = null;
		}

		mustPublishCacheModel.euro = getEuro();

		String euro = mustPublishCacheModel.euro;

		if ((euro != null) && (euro.length() == 0)) {
			mustPublishCacheModel.euro = null;
		}

		mustPublishCacheModel.gc = getGc();

		String gc = mustPublishCacheModel.gc;

		if ((gc != null) && (gc.length() == 0)) {
			mustPublishCacheModel.gc = null;
		}

		mustPublishCacheModel.status = getStatus();

		String status = mustPublishCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			mustPublishCacheModel.status = null;
		}

		mustPublishCacheModel.displayOrder = getDisplayOrder();

		mustPublishCacheModel.taxonomyId = getTaxonomyId();

		mustPublishCacheModel.parentTaxonomyId = getParentTaxonomyId();

		mustPublishCacheModel.indexOrder = getIndexOrder();

		mustPublishCacheModel.level = getLevel();

		mustPublishCacheModel.levelSortOrder = getLevelSortOrder();

		mustPublishCacheModel.isGlobal = getIsGlobal();

		String isGlobal = mustPublishCacheModel.isGlobal;

		if ((isGlobal != null) && (isGlobal.length() == 0)) {
			mustPublishCacheModel.isGlobal = null;
		}

		mustPublishCacheModel.framework = getFramework();

		String framework = mustPublishCacheModel.framework;

		if ((framework != null) && (framework.length() == 0)) {
			mustPublishCacheModel.framework = null;
		}

		return mustPublishCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{parentId=");
		sb.append(getParentId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", stdType=");
		sb.append(getStdType());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", currentPath=");
		sb.append(getCurrentPath());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", amer=");
		sb.append(getAmer());
		sb.append(", amea=");
		sb.append(getAmea());
		sb.append(", euro=");
		sb.append(getEuro());
		sb.append(", gc=");
		sb.append(getGc());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", displayOrder=");
		sb.append(getDisplayOrder());
		sb.append(", taxonomyId=");
		sb.append(getTaxonomyId());
		sb.append(", parentTaxonomyId=");
		sb.append(getParentTaxonomyId());
		sb.append(", indexOrder=");
		sb.append(getIndexOrder());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", levelSortOrder=");
		sb.append(getLevelSortOrder());
		sb.append(", isGlobal=");
		sb.append(getIsGlobal());
		sb.append(", framework=");
		sb.append(getFramework());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.MustPublish");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdType</column-name><column-value><![CDATA[");
		sb.append(getStdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentPath</column-name><column-value><![CDATA[");
		sb.append(getCurrentPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amer</column-name><column-value><![CDATA[");
		sb.append(getAmer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amea</column-name><column-value><![CDATA[");
		sb.append(getAmea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>euro</column-name><column-value><![CDATA[");
		sb.append(getEuro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gc</column-name><column-value><![CDATA[");
		sb.append(getGc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrder</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyId</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getParentTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexOrder</column-name><column-value><![CDATA[");
		sb.append(getIndexOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelSortOrder</column-name><column-value><![CDATA[");
		sb.append(getLevelSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isGlobal</column-name><column-value><![CDATA[");
		sb.append(getIsGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>framework</column-name><column-value><![CDATA[");
		sb.append(getFramework());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MustPublish.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MustPublish.class
		};
	private long _parentId;
	private long _stdId;
	private String _title;
	private String _stdType;
	private String _path;
	private String _currentPath;
	private String _regionCode;
	private String _amer;
	private String _amea;
	private String _euro;
	private String _gc;
	private String _status;
	private long _displayOrder;
	private long _taxonomyId;
	private long _parentTaxonomyId;
	private long _indexOrder;
	private long _level;
	private long _levelSortOrder;
	private String _isGlobal;
	private String _framework;
	private MustPublish _escapedModel;
}