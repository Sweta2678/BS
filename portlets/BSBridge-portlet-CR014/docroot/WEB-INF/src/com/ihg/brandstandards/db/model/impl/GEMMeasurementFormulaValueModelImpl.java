/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue;
import com.ihg.brandstandards.db.model.GEMMeasurementFormulaValueModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMMeasurementFormulaValue service. Represents a row in the &quot;GEM_MSRMNT_FORMULA_DTL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMMeasurementFormulaValueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMMeasurementFormulaValueImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMMeasurementFormulaValueImpl
 * @see com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue
 * @see com.ihg.brandstandards.db.model.GEMMeasurementFormulaValueModel
 * @generated
 */
public class GEMMeasurementFormulaValueModelImpl extends BaseModelImpl<GEMMeasurementFormulaValue>
	implements GEMMeasurementFormulaValueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m measurement formula value model instance should use the {@link com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_MSRMNT_FORMULA_DTL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_MSRMNT_FORMULA_DTL_ID", Types.BIGINT },
			{ "GEM_MSRMNT_FORMULA_ID", Types.BIGINT },
			{ "GEM_MSRMNT_FORMULA_TYP", Types.VARCHAR },
			{ "GEM_FORMULA_TXT", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_MSRMNT_FORMULA_DTL (GEM_MSRMNT_FORMULA_DTL_ID LONG not null primary key,GEM_MSRMNT_FORMULA_ID LONG,GEM_MSRMNT_FORMULA_TYP VARCHAR(75) null,GEM_FORMULA_TXT VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_MSRMNT_FORMULA_DTL";
	public static final String ORDER_BY_JPQL = " ORDER BY gemMeasurementFormulaValue.formulaValueId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_MSRMNT_FORMULA_DTL.GEM_MSRMNT_FORMULA_DTL_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue"));

	public GEMMeasurementFormulaValueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formulaValueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormulaValueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formulaValueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMMeasurementFormulaValue.class;
	}

	@Override
	public String getModelClassName() {
		return GEMMeasurementFormulaValue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("formulaValueId", getFormulaValueId());
		attributes.put("formulaId", getFormulaId());
		attributes.put("formulaType", getFormulaType());
		attributes.put("formulaValue", getFormulaValue());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long formulaValueId = (Long)attributes.get("formulaValueId");

		if (formulaValueId != null) {
			setFormulaValueId(formulaValueId);
		}

		Long formulaId = (Long)attributes.get("formulaId");

		if (formulaId != null) {
			setFormulaId(formulaId);
		}

		String formulaType = (String)attributes.get("formulaType");

		if (formulaType != null) {
			setFormulaType(formulaType);
		}

		String formulaValue = (String)attributes.get("formulaValue");

		if (formulaValue != null) {
			setFormulaValue(formulaValue);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getFormulaValueId() {
		return _formulaValueId;
	}

	@Override
	public void setFormulaValueId(long formulaValueId) {
		_formulaValueId = formulaValueId;
	}

	@Override
	public long getFormulaId() {
		return _formulaId;
	}

	@Override
	public void setFormulaId(long formulaId) {
		_formulaId = formulaId;
	}

	@Override
	public String getFormulaType() {
		if (_formulaType == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaType;
		}
	}

	@Override
	public void setFormulaType(String formulaType) {
		_formulaType = formulaType;
	}

	@Override
	public String getFormulaValue() {
		if (_formulaValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _formulaValue;
		}
	}

	@Override
	public void setFormulaValue(String formulaValue) {
		_formulaValue = formulaValue;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMMeasurementFormulaValue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMMeasurementFormulaValue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMMeasurementFormulaValue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMMeasurementFormulaValueImpl gemMeasurementFormulaValueImpl = new GEMMeasurementFormulaValueImpl();

		gemMeasurementFormulaValueImpl.setFormulaValueId(getFormulaValueId());
		gemMeasurementFormulaValueImpl.setFormulaId(getFormulaId());
		gemMeasurementFormulaValueImpl.setFormulaType(getFormulaType());
		gemMeasurementFormulaValueImpl.setFormulaValue(getFormulaValue());
		gemMeasurementFormulaValueImpl.setCreatorId(getCreatorId());
		gemMeasurementFormulaValueImpl.setCreatedDate(getCreatedDate());
		gemMeasurementFormulaValueImpl.setUpdatedBy(getUpdatedBy());
		gemMeasurementFormulaValueImpl.setUpdatedDate(getUpdatedDate());

		gemMeasurementFormulaValueImpl.resetOriginalValues();

		return gemMeasurementFormulaValueImpl;
	}

	@Override
	public int compareTo(GEMMeasurementFormulaValue gemMeasurementFormulaValue) {
		long primaryKey = gemMeasurementFormulaValue.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMMeasurementFormulaValue)) {
			return false;
		}

		GEMMeasurementFormulaValue gemMeasurementFormulaValue = (GEMMeasurementFormulaValue)obj;

		long primaryKey = gemMeasurementFormulaValue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMMeasurementFormulaValue> toCacheModel() {
		GEMMeasurementFormulaValueCacheModel gemMeasurementFormulaValueCacheModel =
			new GEMMeasurementFormulaValueCacheModel();

		gemMeasurementFormulaValueCacheModel.formulaValueId = getFormulaValueId();

		gemMeasurementFormulaValueCacheModel.formulaId = getFormulaId();

		gemMeasurementFormulaValueCacheModel.formulaType = getFormulaType();

		String formulaType = gemMeasurementFormulaValueCacheModel.formulaType;

		if ((formulaType != null) && (formulaType.length() == 0)) {
			gemMeasurementFormulaValueCacheModel.formulaType = null;
		}

		gemMeasurementFormulaValueCacheModel.formulaValue = getFormulaValue();

		String formulaValue = gemMeasurementFormulaValueCacheModel.formulaValue;

		if ((formulaValue != null) && (formulaValue.length() == 0)) {
			gemMeasurementFormulaValueCacheModel.formulaValue = null;
		}

		gemMeasurementFormulaValueCacheModel.creatorId = getCreatorId();

		String creatorId = gemMeasurementFormulaValueCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemMeasurementFormulaValueCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemMeasurementFormulaValueCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemMeasurementFormulaValueCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemMeasurementFormulaValueCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemMeasurementFormulaValueCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemMeasurementFormulaValueCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemMeasurementFormulaValueCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemMeasurementFormulaValueCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemMeasurementFormulaValueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{formulaValueId=");
		sb.append(getFormulaValueId());
		sb.append(", formulaId=");
		sb.append(getFormulaId());
		sb.append(", formulaType=");
		sb.append(getFormulaType());
		sb.append(", formulaValue=");
		sb.append(getFormulaValue());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMMeasurementFormulaValue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>formulaValueId</column-name><column-value><![CDATA[");
		sb.append(getFormulaValueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaId</column-name><column-value><![CDATA[");
		sb.append(getFormulaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaType</column-name><column-value><![CDATA[");
		sb.append(getFormulaType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formulaValue</column-name><column-value><![CDATA[");
		sb.append(getFormulaValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMMeasurementFormulaValue.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMMeasurementFormulaValue.class
		};
	private long _formulaValueId;
	private long _formulaId;
	private String _formulaType;
	private String _formulaValue;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMMeasurementFormulaValue _escapedModel;
}