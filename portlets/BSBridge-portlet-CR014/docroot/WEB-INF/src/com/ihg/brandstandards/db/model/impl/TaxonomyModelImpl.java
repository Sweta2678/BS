/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.Taxonomy;
import com.ihg.brandstandards.db.model.TaxonomyModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Taxonomy service. Represents a row in the &quot;Taxonomy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.TaxonomyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaxonomyImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see TaxonomyImpl
 * @see com.ihg.brandstandards.db.model.Taxonomy
 * @see com.ihg.brandstandards.db.model.TaxonomyModel
 * @generated
 */
public class TaxonomyModelImpl extends BaseModelImpl<Taxonomy>
	implements TaxonomyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a taxonomy model instance should use the {@link com.ihg.brandstandards.db.model.Taxonomy} interface instead.
	 */
	public static final String TABLE_NAME = "Taxonomy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "TAXONOMY_DESC", Types.VARCHAR },
			{ "IMAGE_PATH_TXT", Types.VARCHAR },
			{ "CREATOR_SCRN_NM", Types.VARCHAR },
			{ "HIER_LVL_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Taxonomy (TAXONOMY_ID LONG not null primary key,PRNT_TAXONOMY_ID LONG,TITLE_TXT VARCHAR(75) null,TAXONOMY_DESC VARCHAR(75) null,IMAGE_PATH_TXT VARCHAR(75) null,CREATOR_SCRN_NM VARCHAR(75) null,HIER_LVL_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Taxonomy";
	public static final String ORDER_BY_JPQL = " ORDER BY taxonomy.taxId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Taxonomy.TAXONOMY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.Taxonomy"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.Taxonomy"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.Taxonomy"),
			true);
	public static long CREATORID_COLUMN_BITMASK = 1L;
	public static long PARENTID_COLUMN_BITMASK = 2L;
	public static long TAXID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.Taxonomy"));

	public TaxonomyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _taxId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTaxId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _taxId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Taxonomy.class;
	}

	@Override
	public String getModelClassName() {
		return Taxonomy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("taxId", getTaxId());
		attributes.put("parentId", getParentId());
		attributes.put("title", getTitle());
		attributes.put("desc", getDesc());
		attributes.put("imageLoc", getImageLoc());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("position", getPosition());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long taxId = (Long)attributes.get("taxId");

		if (taxId != null) {
			setTaxId(taxId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String desc = (String)attributes.get("desc");

		if (desc != null) {
			setDesc(desc);
		}

		String imageLoc = (String)attributes.get("imageLoc");

		if (imageLoc != null) {
			setImageLoc(imageLoc);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long position = (Long)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getTaxId() {
		return _taxId;
	}

	@Override
	public void setTaxId(long taxId) {
		_columnBitmask |= TAXID_COLUMN_BITMASK;

		if (!_setOriginalTaxId) {
			_setOriginalTaxId = true;

			_originalTaxId = _taxId;
		}

		_taxId = taxId;
	}

	public long getOriginalTaxId() {
		return _originalTaxId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDesc() {
		if (_desc == null) {
			return StringPool.BLANK;
		}
		else {
			return _desc;
		}
	}

	@Override
	public void setDesc(String desc) {
		_desc = desc;
	}

	@Override
	public String getImageLoc() {
		if (_imageLoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageLoc;
		}
	}

	@Override
	public void setImageLoc(String imageLoc) {
		_imageLoc = imageLoc;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public long getPosition() {
		return _position;
	}

	@Override
	public void setPosition(long position) {
		_position = position;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_columnBitmask |= CREATORID_COLUMN_BITMASK;

		if (_originalCreatorId == null) {
			_originalCreatorId = _creatorId;
		}

		_creatorId = creatorId;
	}

	public String getOriginalCreatorId() {
		return GetterUtil.getString(_originalCreatorId);
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Taxonomy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Taxonomy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Taxonomy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TaxonomyImpl taxonomyImpl = new TaxonomyImpl();

		taxonomyImpl.setTaxId(getTaxId());
		taxonomyImpl.setParentId(getParentId());
		taxonomyImpl.setTitle(getTitle());
		taxonomyImpl.setDesc(getDesc());
		taxonomyImpl.setImageLoc(getImageLoc());
		taxonomyImpl.setCreatedBy(getCreatedBy());
		taxonomyImpl.setPosition(getPosition());
		taxonomyImpl.setCreatorId(getCreatorId());
		taxonomyImpl.setCreatedDate(getCreatedDate());
		taxonomyImpl.setUpdatedBy(getUpdatedBy());
		taxonomyImpl.setUpdatedDate(getUpdatedDate());

		taxonomyImpl.resetOriginalValues();

		return taxonomyImpl;
	}

	@Override
	public int compareTo(Taxonomy taxonomy) {
		long primaryKey = taxonomy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Taxonomy)) {
			return false;
		}

		Taxonomy taxonomy = (Taxonomy)obj;

		long primaryKey = taxonomy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TaxonomyModelImpl taxonomyModelImpl = this;

		taxonomyModelImpl._originalTaxId = taxonomyModelImpl._taxId;

		taxonomyModelImpl._setOriginalTaxId = false;

		taxonomyModelImpl._originalParentId = taxonomyModelImpl._parentId;

		taxonomyModelImpl._setOriginalParentId = false;

		taxonomyModelImpl._originalCreatorId = taxonomyModelImpl._creatorId;

		taxonomyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Taxonomy> toCacheModel() {
		TaxonomyCacheModel taxonomyCacheModel = new TaxonomyCacheModel();

		taxonomyCacheModel.taxId = getTaxId();

		taxonomyCacheModel.parentId = getParentId();

		taxonomyCacheModel.title = getTitle();

		String title = taxonomyCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			taxonomyCacheModel.title = null;
		}

		taxonomyCacheModel.desc = getDesc();

		String desc = taxonomyCacheModel.desc;

		if ((desc != null) && (desc.length() == 0)) {
			taxonomyCacheModel.desc = null;
		}

		taxonomyCacheModel.imageLoc = getImageLoc();

		String imageLoc = taxonomyCacheModel.imageLoc;

		if ((imageLoc != null) && (imageLoc.length() == 0)) {
			taxonomyCacheModel.imageLoc = null;
		}

		taxonomyCacheModel.createdBy = getCreatedBy();

		String createdBy = taxonomyCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			taxonomyCacheModel.createdBy = null;
		}

		taxonomyCacheModel.position = getPosition();

		taxonomyCacheModel.creatorId = getCreatorId();

		String creatorId = taxonomyCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			taxonomyCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			taxonomyCacheModel.createdDate = createdDate.getTime();
		}
		else {
			taxonomyCacheModel.createdDate = Long.MIN_VALUE;
		}

		taxonomyCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = taxonomyCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			taxonomyCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			taxonomyCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			taxonomyCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return taxonomyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{taxId=");
		sb.append(getTaxId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", desc=");
		sb.append(getDesc());
		sb.append(", imageLoc=");
		sb.append(getImageLoc());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.Taxonomy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taxId</column-name><column-value><![CDATA[");
		sb.append(getTaxId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desc</column-name><column-value><![CDATA[");
		sb.append(getDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageLoc</column-name><column-value><![CDATA[");
		sb.append(getImageLoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Taxonomy.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Taxonomy.class
		};
	private long _taxId;
	private long _originalTaxId;
	private boolean _setOriginalTaxId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private String _title;
	private String _desc;
	private String _imageLoc;
	private String _createdBy;
	private long _position;
	private String _creatorId;
	private String _originalCreatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private Taxonomy _escapedModel;
}