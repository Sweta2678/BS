/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.PublishStd;
import com.ihg.brandstandards.db.model.PublishStdModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PublishStd service. Represents a row in the &quot;PUBLISH_STD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.PublishStdModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublishStdImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see PublishStdImpl
 * @see com.ihg.brandstandards.db.model.PublishStd
 * @see com.ihg.brandstandards.db.model.PublishStdModel
 * @generated
 */
public class PublishStdModelImpl extends BaseModelImpl<PublishStd>
	implements PublishStdModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a publish std model instance should use the {@link com.ihg.brandstandards.db.model.PublishStd} interface instead.
	 */
	public static final String TABLE_NAME = "PUBLISH_STD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PUBLISH_STD_VER_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "STD_TYP", Types.VARCHAR },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "STD_DESC", Types.VARCHAR },
			{ "AUTHOR_NM_TXT", Types.VARCHAR },
			{ "BUS_OWNER_NM", Types.VARCHAR },
			{ "EFF_DT", Types.TIMESTAMP },
			{ "IMPLMNT_DEADLINE_DT", Types.TIMESTAMP },
			{ "WAIVER_IND", Types.VARCHAR },
			{ "STAT_DESC", Types.VARCHAR },
			{ "AREA_CATGY_CD", Types.VARCHAR },
			{ "CREATOR_SCRN_NM", Types.VARCHAR },
			{ "CHNG_DESC", Types.VARCHAR },
			{ "GBL_RGN_IND", Types.VARCHAR },
			{ "RGN_CD", Types.VARCHAR },
			{ "NOTE_TXT", Types.VARCHAR },
			{ "FRAMEWORK_STD_IND", Types.VARCHAR },
			{ "STD_MGR_ID", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "STATUS_IDENTIFIER", Types.BIGINT },
			{ "REGION_IDENTIFIER", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table PUBLISH_STD (PUBLISH_STD_VER_ID LONG not null primary key,STD_ID LONG,PRNT_STD_ID LONG,STD_TYP VARCHAR(75) null,TITLE_TXT VARCHAR(75) null,STD_DESC VARCHAR(75) null,AUTHOR_NM_TXT VARCHAR(75) null,BUS_OWNER_NM VARCHAR(75) null,EFF_DT DATE null,IMPLMNT_DEADLINE_DT DATE null,WAIVER_IND VARCHAR(75) null,STAT_DESC VARCHAR(75) null,AREA_CATGY_CD VARCHAR(75) null,CREATOR_SCRN_NM VARCHAR(75) null,CHNG_DESC VARCHAR(75) null,GBL_RGN_IND VARCHAR(75) null,RGN_CD VARCHAR(75) null,NOTE_TXT VARCHAR(75) null,FRAMEWORK_STD_IND VARCHAR(75) null,STD_MGR_ID VARCHAR(75) null,DISP_ORDER_NBR LONG,STATUS_IDENTIFIER LONG,REGION_IDENTIFIER LONG,PUBLISH_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PUBLISH_STD";
	public static final String ORDER_BY_JPQL = " ORDER BY publishStd.publishStdVerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PUBLISH_STD.PUBLISH_STD_VER_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.PublishStd"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.PublishStd"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.PublishStd"),
			true);
	public static long PARENTID_COLUMN_BITMASK = 1L;
	public static long PUBLISHID_COLUMN_BITMASK = 2L;
	public static long PUBLISHSTDVERID_COLUMN_BITMASK = 4L;
	public static long STATUS_COLUMN_BITMASK = 8L;
	public static long STDID_COLUMN_BITMASK = 16L;
	public static long STDTYP_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.PublishStd"));

	public PublishStdModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publishStdVerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublishStdVerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishStdVerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublishStd.class;
	}

	@Override
	public String getModelClassName() {
		return PublishStd.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishStdVerId", getPublishStdVerId());
		attributes.put("stdId", getStdId());
		attributes.put("parentId", getParentId());
		attributes.put("stdTyp", getStdTyp());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("author", getAuthor());
		attributes.put("businessOwner", getBusinessOwner());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("implDate", getImplDate());
		attributes.put("waiver", getWaiver());
		attributes.put("status", getStatus());
		attributes.put("category", getCategory());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("change", getChange());
		attributes.put("isGlobal", getIsGlobal());
		attributes.put("regionCode", getRegionCode());
		attributes.put("notes", getNotes());
		attributes.put("framework", getFramework());
		attributes.put("internalReference", getInternalReference());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("statusIdentifier", getStatusIdentifier());
		attributes.put("regionIdentifier", getRegionIdentifier());
		attributes.put("publishId", getPublishId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishStdVerId = (Long)attributes.get("publishStdVerId");

		if (publishStdVerId != null) {
			setPublishStdVerId(publishStdVerId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String stdTyp = (String)attributes.get("stdTyp");

		if (stdTyp != null) {
			setStdTyp(stdTyp);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String businessOwner = (String)attributes.get("businessOwner");

		if (businessOwner != null) {
			setBusinessOwner(businessOwner);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Date implDate = (Date)attributes.get("implDate");

		if (implDate != null) {
			setImplDate(implDate);
		}

		String waiver = (String)attributes.get("waiver");

		if (waiver != null) {
			setWaiver(waiver);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String change = (String)attributes.get("change");

		if (change != null) {
			setChange(change);
		}

		String isGlobal = (String)attributes.get("isGlobal");

		if (isGlobal != null) {
			setIsGlobal(isGlobal);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		String framework = (String)attributes.get("framework");

		if (framework != null) {
			setFramework(framework);
		}

		String internalReference = (String)attributes.get("internalReference");

		if (internalReference != null) {
			setInternalReference(internalReference);
		}

		Long orderNumber = (Long)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		Long statusIdentifier = (Long)attributes.get("statusIdentifier");

		if (statusIdentifier != null) {
			setStatusIdentifier(statusIdentifier);
		}

		Long regionIdentifier = (Long)attributes.get("regionIdentifier");

		if (regionIdentifier != null) {
			setRegionIdentifier(regionIdentifier);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPublishStdVerId() {
		return _publishStdVerId;
	}

	@Override
	public void setPublishStdVerId(long publishStdVerId) {
		_columnBitmask |= PUBLISHSTDVERID_COLUMN_BITMASK;

		if (!_setOriginalPublishStdVerId) {
			_setOriginalPublishStdVerId = true;

			_originalPublishStdVerId = _publishStdVerId;
		}

		_publishStdVerId = publishStdVerId;
	}

	public long getOriginalPublishStdVerId() {
		return _originalPublishStdVerId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@Override
	public String getStdTyp() {
		if (_stdTyp == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdTyp;
		}
	}

	@Override
	public void setStdTyp(String stdTyp) {
		_columnBitmask |= STDTYP_COLUMN_BITMASK;

		if (_originalStdTyp == null) {
			_originalStdTyp = _stdTyp;
		}

		_stdTyp = stdTyp;
	}

	public String getOriginalStdTyp() {
		return GetterUtil.getString(_originalStdTyp);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@Override
	public String getBusinessOwner() {
		if (_businessOwner == null) {
			return StringPool.BLANK;
		}
		else {
			return _businessOwner;
		}
	}

	@Override
	public void setBusinessOwner(String businessOwner) {
		_businessOwner = businessOwner;
	}

	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@Override
	public Date getImplDate() {
		return _implDate;
	}

	@Override
	public void setImplDate(Date implDate) {
		_implDate = implDate;
	}

	@Override
	public String getWaiver() {
		if (_waiver == null) {
			return StringPool.BLANK;
		}
		else {
			return _waiver;
		}
	}

	@Override
	public void setWaiver(String waiver) {
		_waiver = waiver;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getChange() {
		if (_change == null) {
			return StringPool.BLANK;
		}
		else {
			return _change;
		}
	}

	@Override
	public void setChange(String change) {
		_change = change;
	}

	@Override
	public String getIsGlobal() {
		if (_isGlobal == null) {
			return StringPool.BLANK;
		}
		else {
			return _isGlobal;
		}
	}

	@Override
	public void setIsGlobal(String isGlobal) {
		_isGlobal = isGlobal;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_regionCode = regionCode;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public String getFramework() {
		if (_framework == null) {
			return StringPool.BLANK;
		}
		else {
			return _framework;
		}
	}

	@Override
	public void setFramework(String framework) {
		_framework = framework;
	}

	@Override
	public String getInternalReference() {
		if (_internalReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _internalReference;
		}
	}

	@Override
	public void setInternalReference(String internalReference) {
		_internalReference = internalReference;
	}

	@Override
	public long getOrderNumber() {
		return _orderNumber;
	}

	@Override
	public void setOrderNumber(long orderNumber) {
		_orderNumber = orderNumber;
	}

	@Override
	public long getStatusIdentifier() {
		return _statusIdentifier;
	}

	@Override
	public void setStatusIdentifier(long statusIdentifier) {
		_statusIdentifier = statusIdentifier;
	}

	@Override
	public long getRegionIdentifier() {
		return _regionIdentifier;
	}

	@Override
	public void setRegionIdentifier(long regionIdentifier) {
		_regionIdentifier = regionIdentifier;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublishStd.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PublishStd toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublishStd)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublishStdImpl publishStdImpl = new PublishStdImpl();

		publishStdImpl.setPublishStdVerId(getPublishStdVerId());
		publishStdImpl.setStdId(getStdId());
		publishStdImpl.setParentId(getParentId());
		publishStdImpl.setStdTyp(getStdTyp());
		publishStdImpl.setTitle(getTitle());
		publishStdImpl.setDescription(getDescription());
		publishStdImpl.setAuthor(getAuthor());
		publishStdImpl.setBusinessOwner(getBusinessOwner());
		publishStdImpl.setEffectiveDate(getEffectiveDate());
		publishStdImpl.setImplDate(getImplDate());
		publishStdImpl.setWaiver(getWaiver());
		publishStdImpl.setStatus(getStatus());
		publishStdImpl.setCategory(getCategory());
		publishStdImpl.setCreatedBy(getCreatedBy());
		publishStdImpl.setChange(getChange());
		publishStdImpl.setIsGlobal(getIsGlobal());
		publishStdImpl.setRegionCode(getRegionCode());
		publishStdImpl.setNotes(getNotes());
		publishStdImpl.setFramework(getFramework());
		publishStdImpl.setInternalReference(getInternalReference());
		publishStdImpl.setOrderNumber(getOrderNumber());
		publishStdImpl.setStatusIdentifier(getStatusIdentifier());
		publishStdImpl.setRegionIdentifier(getRegionIdentifier());
		publishStdImpl.setPublishId(getPublishId());
		publishStdImpl.setCreatorId(getCreatorId());
		publishStdImpl.setCreatedDate(getCreatedDate());
		publishStdImpl.setUpdatedBy(getUpdatedBy());
		publishStdImpl.setUpdatedDate(getUpdatedDate());

		publishStdImpl.resetOriginalValues();

		return publishStdImpl;
	}

	@Override
	public int compareTo(PublishStd publishStd) {
		long primaryKey = publishStd.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublishStd)) {
			return false;
		}

		PublishStd publishStd = (PublishStd)obj;

		long primaryKey = publishStd.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PublishStdModelImpl publishStdModelImpl = this;

		publishStdModelImpl._originalPublishStdVerId = publishStdModelImpl._publishStdVerId;

		publishStdModelImpl._setOriginalPublishStdVerId = false;

		publishStdModelImpl._originalStdId = publishStdModelImpl._stdId;

		publishStdModelImpl._setOriginalStdId = false;

		publishStdModelImpl._originalParentId = publishStdModelImpl._parentId;

		publishStdModelImpl._setOriginalParentId = false;

		publishStdModelImpl._originalStdTyp = publishStdModelImpl._stdTyp;

		publishStdModelImpl._originalStatus = publishStdModelImpl._status;

		publishStdModelImpl._originalPublishId = publishStdModelImpl._publishId;

		publishStdModelImpl._setOriginalPublishId = false;

		publishStdModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PublishStd> toCacheModel() {
		PublishStdCacheModel publishStdCacheModel = new PublishStdCacheModel();

		publishStdCacheModel.publishStdVerId = getPublishStdVerId();

		publishStdCacheModel.stdId = getStdId();

		publishStdCacheModel.parentId = getParentId();

		publishStdCacheModel.stdTyp = getStdTyp();

		String stdTyp = publishStdCacheModel.stdTyp;

		if ((stdTyp != null) && (stdTyp.length() == 0)) {
			publishStdCacheModel.stdTyp = null;
		}

		publishStdCacheModel.title = getTitle();

		String title = publishStdCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			publishStdCacheModel.title = null;
		}

		publishStdCacheModel.description = getDescription();

		String description = publishStdCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			publishStdCacheModel.description = null;
		}

		publishStdCacheModel.author = getAuthor();

		String author = publishStdCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			publishStdCacheModel.author = null;
		}

		publishStdCacheModel.businessOwner = getBusinessOwner();

		String businessOwner = publishStdCacheModel.businessOwner;

		if ((businessOwner != null) && (businessOwner.length() == 0)) {
			publishStdCacheModel.businessOwner = null;
		}

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			publishStdCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			publishStdCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		Date implDate = getImplDate();

		if (implDate != null) {
			publishStdCacheModel.implDate = implDate.getTime();
		}
		else {
			publishStdCacheModel.implDate = Long.MIN_VALUE;
		}

		publishStdCacheModel.waiver = getWaiver();

		String waiver = publishStdCacheModel.waiver;

		if ((waiver != null) && (waiver.length() == 0)) {
			publishStdCacheModel.waiver = null;
		}

		publishStdCacheModel.status = getStatus();

		String status = publishStdCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			publishStdCacheModel.status = null;
		}

		publishStdCacheModel.category = getCategory();

		String category = publishStdCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			publishStdCacheModel.category = null;
		}

		publishStdCacheModel.createdBy = getCreatedBy();

		String createdBy = publishStdCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			publishStdCacheModel.createdBy = null;
		}

		publishStdCacheModel.change = getChange();

		String change = publishStdCacheModel.change;

		if ((change != null) && (change.length() == 0)) {
			publishStdCacheModel.change = null;
		}

		publishStdCacheModel.isGlobal = getIsGlobal();

		String isGlobal = publishStdCacheModel.isGlobal;

		if ((isGlobal != null) && (isGlobal.length() == 0)) {
			publishStdCacheModel.isGlobal = null;
		}

		publishStdCacheModel.regionCode = getRegionCode();

		String regionCode = publishStdCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			publishStdCacheModel.regionCode = null;
		}

		publishStdCacheModel.notes = getNotes();

		String notes = publishStdCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			publishStdCacheModel.notes = null;
		}

		publishStdCacheModel.framework = getFramework();

		String framework = publishStdCacheModel.framework;

		if ((framework != null) && (framework.length() == 0)) {
			publishStdCacheModel.framework = null;
		}

		publishStdCacheModel.internalReference = getInternalReference();

		String internalReference = publishStdCacheModel.internalReference;

		if ((internalReference != null) && (internalReference.length() == 0)) {
			publishStdCacheModel.internalReference = null;
		}

		publishStdCacheModel.orderNumber = getOrderNumber();

		publishStdCacheModel.statusIdentifier = getStatusIdentifier();

		publishStdCacheModel.regionIdentifier = getRegionIdentifier();

		publishStdCacheModel.publishId = getPublishId();

		publishStdCacheModel.creatorId = getCreatorId();

		String creatorId = publishStdCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			publishStdCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			publishStdCacheModel.createdDate = createdDate.getTime();
		}
		else {
			publishStdCacheModel.createdDate = Long.MIN_VALUE;
		}

		publishStdCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = publishStdCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			publishStdCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			publishStdCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			publishStdCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return publishStdCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{publishStdVerId=");
		sb.append(getPublishStdVerId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", stdTyp=");
		sb.append(getStdTyp());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", businessOwner=");
		sb.append(getBusinessOwner());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", implDate=");
		sb.append(getImplDate());
		sb.append(", waiver=");
		sb.append(getWaiver());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", change=");
		sb.append(getChange());
		sb.append(", isGlobal=");
		sb.append(getIsGlobal());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", framework=");
		sb.append(getFramework());
		sb.append(", internalReference=");
		sb.append(getInternalReference());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", statusIdentifier=");
		sb.append(getStatusIdentifier());
		sb.append(", regionIdentifier=");
		sb.append(getRegionIdentifier());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.PublishStd");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishStdVerId</column-name><column-value><![CDATA[");
		sb.append(getPublishStdVerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdTyp</column-name><column-value><![CDATA[");
		sb.append(getStdTyp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessOwner</column-name><column-value><![CDATA[");
		sb.append(getBusinessOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>implDate</column-name><column-value><![CDATA[");
		sb.append(getImplDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>waiver</column-name><column-value><![CDATA[");
		sb.append(getWaiver());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>change</column-name><column-value><![CDATA[");
		sb.append(getChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isGlobal</column-name><column-value><![CDATA[");
		sb.append(getIsGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>framework</column-name><column-value><![CDATA[");
		sb.append(getFramework());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalReference</column-name><column-value><![CDATA[");
		sb.append(getInternalReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusIdentifier</column-name><column-value><![CDATA[");
		sb.append(getStatusIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionIdentifier</column-name><column-value><![CDATA[");
		sb.append(getRegionIdentifier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PublishStd.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PublishStd.class
		};
	private long _publishStdVerId;
	private long _originalPublishStdVerId;
	private boolean _setOriginalPublishStdVerId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private String _stdTyp;
	private String _originalStdTyp;
	private String _title;
	private String _description;
	private String _author;
	private String _businessOwner;
	private Date _effectiveDate;
	private Date _implDate;
	private String _waiver;
	private String _status;
	private String _originalStatus;
	private String _category;
	private String _createdBy;
	private String _change;
	private String _isGlobal;
	private String _regionCode;
	private String _notes;
	private String _framework;
	private String _internalReference;
	private long _orderNumber;
	private long _statusIdentifier;
	private long _regionIdentifier;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private PublishStd _escapedModel;
}