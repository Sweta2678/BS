/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMGeneratedReport;
import com.ihg.brandstandards.db.model.GEMGeneratedReportModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMGeneratedReport service. Represents a row in the &quot;GEM_GEN_RPT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMGeneratedReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMGeneratedReportImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMGeneratedReportImpl
 * @see com.ihg.brandstandards.db.model.GEMGeneratedReport
 * @see com.ihg.brandstandards.db.model.GEMGeneratedReportModel
 * @generated
 */
public class GEMGeneratedReportModelImpl extends BaseModelImpl<GEMGeneratedReport>
	implements GEMGeneratedReportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m generated report model instance should use the {@link com.ihg.brandstandards.db.model.GEMGeneratedReport} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_GEN_RPT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_GEN_RPT_ID", Types.BIGINT },
			{ "GEM_TEMPLATE_ID", Types.BIGINT },
			{ "GEM_UNIQUE_GRP_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_GEN_RPT (GEM_GEN_RPT_ID LONG not null primary key,GEM_TEMPLATE_ID LONG,GEM_UNIQUE_GRP_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_GEN_RPT";
	public static final String ORDER_BY_JPQL = " ORDER BY gemGeneratedReport.reportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_GEN_RPT.GEM_GEN_RPT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMGeneratedReport"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMGeneratedReport"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.GEMGeneratedReport"),
			true);
	public static long TEMPLATEID_COLUMN_BITMASK = 1L;
	public static long REPORTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMGeneratedReport"));

	public GEMGeneratedReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMGeneratedReport.class;
	}

	@Override
	public String getModelClassName() {
		return GEMGeneratedReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reportId", getReportId());
		attributes.put("templateId", getTemplateId());
		attributes.put("uniqueGroupId", getUniqueGroupId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reportId = (Long)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		Long uniqueGroupId = (Long)attributes.get("uniqueGroupId");

		if (uniqueGroupId != null) {
			setUniqueGroupId(uniqueGroupId);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_columnBitmask = -1L;

		_reportId = reportId;
	}

	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		_columnBitmask |= TEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalTemplateId) {
			_setOriginalTemplateId = true;

			_originalTemplateId = _templateId;
		}

		_templateId = templateId;
	}

	public long getOriginalTemplateId() {
		return _originalTemplateId;
	}

	@Override
	public long getUniqueGroupId() {
		return _uniqueGroupId;
	}

	@Override
	public void setUniqueGroupId(long uniqueGroupId) {
		_uniqueGroupId = uniqueGroupId;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMGeneratedReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMGeneratedReport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMGeneratedReport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMGeneratedReportImpl gemGeneratedReportImpl = new GEMGeneratedReportImpl();

		gemGeneratedReportImpl.setReportId(getReportId());
		gemGeneratedReportImpl.setTemplateId(getTemplateId());
		gemGeneratedReportImpl.setUniqueGroupId(getUniqueGroupId());
		gemGeneratedReportImpl.setCreatorId(getCreatorId());
		gemGeneratedReportImpl.setCreatedDate(getCreatedDate());
		gemGeneratedReportImpl.setUpdatedBy(getUpdatedBy());
		gemGeneratedReportImpl.setUpdatedDate(getUpdatedDate());

		gemGeneratedReportImpl.resetOriginalValues();

		return gemGeneratedReportImpl;
	}

	@Override
	public int compareTo(GEMGeneratedReport gemGeneratedReport) {
		int value = 0;

		if (getReportId() < gemGeneratedReport.getReportId()) {
			value = -1;
		}
		else if (getReportId() > gemGeneratedReport.getReportId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMGeneratedReport)) {
			return false;
		}

		GEMGeneratedReport gemGeneratedReport = (GEMGeneratedReport)obj;

		long primaryKey = gemGeneratedReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GEMGeneratedReportModelImpl gemGeneratedReportModelImpl = this;

		gemGeneratedReportModelImpl._originalTemplateId = gemGeneratedReportModelImpl._templateId;

		gemGeneratedReportModelImpl._setOriginalTemplateId = false;

		gemGeneratedReportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GEMGeneratedReport> toCacheModel() {
		GEMGeneratedReportCacheModel gemGeneratedReportCacheModel = new GEMGeneratedReportCacheModel();

		gemGeneratedReportCacheModel.reportId = getReportId();

		gemGeneratedReportCacheModel.templateId = getTemplateId();

		gemGeneratedReportCacheModel.uniqueGroupId = getUniqueGroupId();

		gemGeneratedReportCacheModel.creatorId = getCreatorId();

		String creatorId = gemGeneratedReportCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemGeneratedReportCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemGeneratedReportCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemGeneratedReportCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemGeneratedReportCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemGeneratedReportCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemGeneratedReportCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemGeneratedReportCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemGeneratedReportCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemGeneratedReportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{reportId=");
		sb.append(getReportId());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append(", uniqueGroupId=");
		sb.append(getUniqueGroupId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMGeneratedReport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uniqueGroupId</column-name><column-value><![CDATA[");
		sb.append(getUniqueGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMGeneratedReport.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMGeneratedReport.class
		};
	private long _reportId;
	private long _templateId;
	private long _originalTemplateId;
	private boolean _setOriginalTemplateId;
	private long _uniqueGroupId;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private GEMGeneratedReport _escapedModel;
}