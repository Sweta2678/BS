/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgePublishImport;
import com.ihg.brandstandards.db.model.BridgePublishImportModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgePublishImport service. Represents a row in the &quot;BRIDGE_PUBLISH_IMPORT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgePublishImportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgePublishImportImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgePublishImportImpl
 * @see com.ihg.brandstandards.db.model.BridgePublishImport
 * @see com.ihg.brandstandards.db.model.BridgePublishImportModel
 * @generated
 */
public class BridgePublishImportModelImpl extends BaseModelImpl<BridgePublishImport>
	implements BridgePublishImportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge publish import model instance should use the {@link com.ihg.brandstandards.db.model.BridgePublishImport} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH_IMPORT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUBLICATION_IMPORT_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "SELECTION_ID", Types.VARCHAR },
			{ "RGN_ID", Types.BIGINT },
			{ "VLD_STAT_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH_IMPORT (BRIDGE_PUBLICATION_IMPORT_ID LONG not null primary key,PUBLISH_ID LONG,STD_ID LONG,SELECTION_ID VARCHAR(75) null,RGN_ID LONG,VLD_STAT_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH_IMPORT";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgePublishImport.publishImportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH_IMPORT.BRIDGE_PUBLICATION_IMPORT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishImport"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishImport"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.BridgePublishImport"),
			true);
	public static long PUBLISHID_COLUMN_BITMASK = 1L;
	public static long REGIONID_COLUMN_BITMASK = 2L;
	public static long STDID_COLUMN_BITMASK = 4L;
	public static long PUBLISHIMPORTID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgePublishImport"));

	public BridgePublishImportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publishImportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublishImportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishImportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BridgePublishImport.class;
	}

	@Override
	public String getModelClassName() {
		return BridgePublishImport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishImportId", getPublishImportId());
		attributes.put("publishId", getPublishId());
		attributes.put("stdId", getStdId());
		attributes.put("selectInd", getSelectInd());
		attributes.put("regionId", getRegionId());
		attributes.put("status", getStatus());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishImportId = (Long)attributes.get("publishImportId");

		if (publishImportId != null) {
			setPublishImportId(publishImportId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String selectInd = (String)attributes.get("selectInd");

		if (selectInd != null) {
			setSelectInd(selectInd);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPublishImportId() {
		return _publishImportId;
	}

	@Override
	public void setPublishImportId(long publishImportId) {
		_publishImportId = publishImportId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public String getSelectInd() {
		if (_selectInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _selectInd;
		}
	}

	@Override
	public void setSelectInd(String selectInd) {
		_selectInd = selectInd;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BridgePublishImport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BridgePublishImport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgePublishImport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgePublishImportImpl bridgePublishImportImpl = new BridgePublishImportImpl();

		bridgePublishImportImpl.setPublishImportId(getPublishImportId());
		bridgePublishImportImpl.setPublishId(getPublishId());
		bridgePublishImportImpl.setStdId(getStdId());
		bridgePublishImportImpl.setSelectInd(getSelectInd());
		bridgePublishImportImpl.setRegionId(getRegionId());
		bridgePublishImportImpl.setStatus(getStatus());
		bridgePublishImportImpl.setCreatorId(getCreatorId());
		bridgePublishImportImpl.setCreatedDate(getCreatedDate());
		bridgePublishImportImpl.setUpdatedBy(getUpdatedBy());
		bridgePublishImportImpl.setUpdatedDate(getUpdatedDate());

		bridgePublishImportImpl.resetOriginalValues();

		return bridgePublishImportImpl;
	}

	@Override
	public int compareTo(BridgePublishImport bridgePublishImport) {
		long primaryKey = bridgePublishImport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgePublishImport)) {
			return false;
		}

		BridgePublishImport bridgePublishImport = (BridgePublishImport)obj;

		long primaryKey = bridgePublishImport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BridgePublishImportModelImpl bridgePublishImportModelImpl = this;

		bridgePublishImportModelImpl._originalPublishId = bridgePublishImportModelImpl._publishId;

		bridgePublishImportModelImpl._setOriginalPublishId = false;

		bridgePublishImportModelImpl._originalStdId = bridgePublishImportModelImpl._stdId;

		bridgePublishImportModelImpl._setOriginalStdId = false;

		bridgePublishImportModelImpl._originalRegionId = bridgePublishImportModelImpl._regionId;

		bridgePublishImportModelImpl._setOriginalRegionId = false;

		bridgePublishImportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BridgePublishImport> toCacheModel() {
		BridgePublishImportCacheModel bridgePublishImportCacheModel = new BridgePublishImportCacheModel();

		bridgePublishImportCacheModel.publishImportId = getPublishImportId();

		bridgePublishImportCacheModel.publishId = getPublishId();

		bridgePublishImportCacheModel.stdId = getStdId();

		bridgePublishImportCacheModel.selectInd = getSelectInd();

		String selectInd = bridgePublishImportCacheModel.selectInd;

		if ((selectInd != null) && (selectInd.length() == 0)) {
			bridgePublishImportCacheModel.selectInd = null;
		}

		bridgePublishImportCacheModel.regionId = getRegionId();

		bridgePublishImportCacheModel.status = getStatus();

		String status = bridgePublishImportCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			bridgePublishImportCacheModel.status = null;
		}

		bridgePublishImportCacheModel.creatorId = getCreatorId();

		String creatorId = bridgePublishImportCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			bridgePublishImportCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bridgePublishImportCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bridgePublishImportCacheModel.createdDate = Long.MIN_VALUE;
		}

		bridgePublishImportCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bridgePublishImportCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bridgePublishImportCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			bridgePublishImportCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			bridgePublishImportCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return bridgePublishImportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{publishImportId=");
		sb.append(getPublishImportId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", selectInd=");
		sb.append(getSelectInd());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgePublishImport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishImportId</column-name><column-value><![CDATA[");
		sb.append(getPublishImportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>selectInd</column-name><column-value><![CDATA[");
		sb.append(getSelectInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgePublishImport.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgePublishImport.class
		};
	private long _publishImportId;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private String _selectInd;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _status;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private BridgePublishImport _escapedModel;
}