/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.FlagCategory;
import com.ihg.brandstandards.db.model.FlagCategoryModel;
import com.ihg.brandstandards.db.service.persistence.FlagCategoryPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FlagCategory service. Represents a row in the &quot;FLAG_CATGY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.FlagCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlagCategoryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see FlagCategoryImpl
 * @see com.ihg.brandstandards.db.model.FlagCategory
 * @see com.ihg.brandstandards.db.model.FlagCategoryModel
 * @generated
 */
public class FlagCategoryModelImpl extends BaseModelImpl<FlagCategory>
	implements FlagCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flag category model instance should use the {@link com.ihg.brandstandards.db.model.FlagCategory} interface instead.
	 */
	public static final String TABLE_NAME = "FLAG_CATGY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FLAG_CATGY_ID", Types.BIGINT },
			{ "ACTV_IND", Types.VARCHAR },
			{ "PRNT_FLAG_CATGY_ID", Types.BIGINT },
			{ "CATGY_CD", Types.VARCHAR },
			{ "FLAG_CATGY_VAL", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table FLAG_CATGY (FLAG_CATGY_ID LONG not null,ACTV_IND VARCHAR(75) not null,PRNT_FLAG_CATGY_ID LONG,CATGY_CD VARCHAR(75) null,FLAG_CATGY_VAL VARCHAR(75) null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (FLAG_CATGY_ID, ACTV_IND))";
	public static final String TABLE_SQL_DROP = "drop table FLAG_CATGY";
	public static final String ORDER_BY_JPQL = " ORDER BY flagCategory.orderNumber ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FLAG_CATGY.DISP_ORDER_NBR ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.FlagCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.FlagCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.FlagCategory"),
			true);
	public static long ACTIVEIND_COLUMN_BITMASK = 1L;
	public static long CATORFIELD_COLUMN_BITMASK = 2L;
	public static long PARENTCATID_COLUMN_BITMASK = 4L;
	public static long ORDERNUMBER_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.FlagCategory"));

	public FlagCategoryModelImpl() {
	}

	@Override
	public FlagCategoryPK getPrimaryKey() {
		return new FlagCategoryPK(_flagCatId, _activeInd);
	}

	@Override
	public void setPrimaryKey(FlagCategoryPK primaryKey) {
		setFlagCatId(primaryKey.flagCatId);
		setActiveInd(primaryKey.activeInd);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new FlagCategoryPK(_flagCatId, _activeInd);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((FlagCategoryPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return FlagCategory.class;
	}

	@Override
	public String getModelClassName() {
		return FlagCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("flagCatId", getFlagCatId());
		attributes.put("activeInd", getActiveInd());
		attributes.put("parentCatId", getParentCatId());
		attributes.put("catOrField", getCatOrField());
		attributes.put("txtValue", getTxtValue());
		attributes.put("orderNumber", getOrderNumber());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long flagCatId = (Long)attributes.get("flagCatId");

		if (flagCatId != null) {
			setFlagCatId(flagCatId);
		}

		String activeInd = (String)attributes.get("activeInd");

		if (activeInd != null) {
			setActiveInd(activeInd);
		}

		Long parentCatId = (Long)attributes.get("parentCatId");

		if (parentCatId != null) {
			setParentCatId(parentCatId);
		}

		String catOrField = (String)attributes.get("catOrField");

		if (catOrField != null) {
			setCatOrField(catOrField);
		}

		String txtValue = (String)attributes.get("txtValue");

		if (txtValue != null) {
			setTxtValue(txtValue);
		}

		Long orderNumber = (Long)attributes.get("orderNumber");

		if (orderNumber != null) {
			setOrderNumber(orderNumber);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getFlagCatId() {
		return _flagCatId;
	}

	@Override
	public void setFlagCatId(long flagCatId) {
		_flagCatId = flagCatId;
	}

	@Override
	public String getActiveInd() {
		if (_activeInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeInd;
		}
	}

	@Override
	public void setActiveInd(String activeInd) {
		_columnBitmask |= ACTIVEIND_COLUMN_BITMASK;

		if (_originalActiveInd == null) {
			_originalActiveInd = _activeInd;
		}

		_activeInd = activeInd;
	}

	public String getOriginalActiveInd() {
		return GetterUtil.getString(_originalActiveInd);
	}

	@Override
	public long getParentCatId() {
		return _parentCatId;
	}

	@Override
	public void setParentCatId(long parentCatId) {
		_columnBitmask |= PARENTCATID_COLUMN_BITMASK;

		if (!_setOriginalParentCatId) {
			_setOriginalParentCatId = true;

			_originalParentCatId = _parentCatId;
		}

		_parentCatId = parentCatId;
	}

	public long getOriginalParentCatId() {
		return _originalParentCatId;
	}

	@Override
	public String getCatOrField() {
		if (_catOrField == null) {
			return StringPool.BLANK;
		}
		else {
			return _catOrField;
		}
	}

	@Override
	public void setCatOrField(String catOrField) {
		_columnBitmask |= CATORFIELD_COLUMN_BITMASK;

		if (_originalCatOrField == null) {
			_originalCatOrField = _catOrField;
		}

		_catOrField = catOrField;
	}

	public String getOriginalCatOrField() {
		return GetterUtil.getString(_originalCatOrField);
	}

	@Override
	public String getTxtValue() {
		if (_txtValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _txtValue;
		}
	}

	@Override
	public void setTxtValue(String txtValue) {
		_txtValue = txtValue;
	}

	@Override
	public long getOrderNumber() {
		return _orderNumber;
	}

	@Override
	public void setOrderNumber(long orderNumber) {
		_columnBitmask = -1L;

		_orderNumber = orderNumber;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public FlagCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlagCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlagCategoryImpl flagCategoryImpl = new FlagCategoryImpl();

		flagCategoryImpl.setFlagCatId(getFlagCatId());
		flagCategoryImpl.setActiveInd(getActiveInd());
		flagCategoryImpl.setParentCatId(getParentCatId());
		flagCategoryImpl.setCatOrField(getCatOrField());
		flagCategoryImpl.setTxtValue(getTxtValue());
		flagCategoryImpl.setOrderNumber(getOrderNumber());
		flagCategoryImpl.setCreatorId(getCreatorId());
		flagCategoryImpl.setCreatedDate(getCreatedDate());
		flagCategoryImpl.setUpdatedBy(getUpdatedBy());
		flagCategoryImpl.setUpdatedDate(getUpdatedDate());

		flagCategoryImpl.resetOriginalValues();

		return flagCategoryImpl;
	}

	@Override
	public int compareTo(FlagCategory flagCategory) {
		int value = 0;

		if (getOrderNumber() < flagCategory.getOrderNumber()) {
			value = -1;
		}
		else if (getOrderNumber() > flagCategory.getOrderNumber()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlagCategory)) {
			return false;
		}

		FlagCategory flagCategory = (FlagCategory)obj;

		FlagCategoryPK primaryKey = flagCategory.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		FlagCategoryModelImpl flagCategoryModelImpl = this;

		flagCategoryModelImpl._originalActiveInd = flagCategoryModelImpl._activeInd;

		flagCategoryModelImpl._originalParentCatId = flagCategoryModelImpl._parentCatId;

		flagCategoryModelImpl._setOriginalParentCatId = false;

		flagCategoryModelImpl._originalCatOrField = flagCategoryModelImpl._catOrField;

		flagCategoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FlagCategory> toCacheModel() {
		FlagCategoryCacheModel flagCategoryCacheModel = new FlagCategoryCacheModel();

		flagCategoryCacheModel.flagCatId = getFlagCatId();

		flagCategoryCacheModel.activeInd = getActiveInd();

		String activeInd = flagCategoryCacheModel.activeInd;

		if ((activeInd != null) && (activeInd.length() == 0)) {
			flagCategoryCacheModel.activeInd = null;
		}

		flagCategoryCacheModel.parentCatId = getParentCatId();

		flagCategoryCacheModel.catOrField = getCatOrField();

		String catOrField = flagCategoryCacheModel.catOrField;

		if ((catOrField != null) && (catOrField.length() == 0)) {
			flagCategoryCacheModel.catOrField = null;
		}

		flagCategoryCacheModel.txtValue = getTxtValue();

		String txtValue = flagCategoryCacheModel.txtValue;

		if ((txtValue != null) && (txtValue.length() == 0)) {
			flagCategoryCacheModel.txtValue = null;
		}

		flagCategoryCacheModel.orderNumber = getOrderNumber();

		flagCategoryCacheModel.creatorId = getCreatorId();

		String creatorId = flagCategoryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			flagCategoryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			flagCategoryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			flagCategoryCacheModel.createdDate = Long.MIN_VALUE;
		}

		flagCategoryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = flagCategoryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			flagCategoryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			flagCategoryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			flagCategoryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return flagCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{flagCatId=");
		sb.append(getFlagCatId());
		sb.append(", activeInd=");
		sb.append(getActiveInd());
		sb.append(", parentCatId=");
		sb.append(getParentCatId());
		sb.append(", catOrField=");
		sb.append(getCatOrField());
		sb.append(", txtValue=");
		sb.append(getTxtValue());
		sb.append(", orderNumber=");
		sb.append(getOrderNumber());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.FlagCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>flagCatId</column-name><column-value><![CDATA[");
		sb.append(getFlagCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeInd</column-name><column-value><![CDATA[");
		sb.append(getActiveInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentCatId</column-name><column-value><![CDATA[");
		sb.append(getParentCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catOrField</column-name><column-value><![CDATA[");
		sb.append(getCatOrField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>txtValue</column-name><column-value><![CDATA[");
		sb.append(getTxtValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderNumber</column-name><column-value><![CDATA[");
		sb.append(getOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlagCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlagCategory.class
		};
	private long _flagCatId;
	private String _activeInd;
	private String _originalActiveInd;
	private long _parentCatId;
	private long _originalParentCatId;
	private boolean _setOriginalParentCatId;
	private String _catOrField;
	private String _originalCatOrField;
	private String _txtValue;
	private long _orderNumber;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private FlagCategory _escapedModel;
}