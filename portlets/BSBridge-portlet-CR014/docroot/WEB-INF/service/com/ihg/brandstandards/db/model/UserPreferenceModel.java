/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the UserPreference service. Represents a row in the &quot;USR_PREF&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ihg.brandstandards.db.model.impl.UserPreferenceModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ihg.brandstandards.db.model.impl.UserPreferenceImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see UserPreference
 * @see com.ihg.brandstandards.db.model.impl.UserPreferenceImpl
 * @see com.ihg.brandstandards.db.model.impl.UserPreferenceModelImpl
 * @generated
 */
public interface UserPreferenceModel extends BaseModel<UserPreference> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a user preference model instance should use the {@link UserPreference} interface instead.
	 */

	/**
	 * Returns the primary key of this user preference.
	 *
	 * @return the primary key of this user preference
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this user preference.
	 *
	 * @param primaryKey the primary key of this user preference
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the preference ID of this user preference.
	 *
	 * @return the preference ID of this user preference
	 */
	public long getPreferenceId();

	/**
	 * Sets the preference ID of this user preference.
	 *
	 * @param preferenceId the preference ID of this user preference
	 */
	public void setPreferenceId(long preferenceId);

	/**
	 * Returns the user ID of this user preference.
	 *
	 * @return the user ID of this user preference
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this user preference.
	 *
	 * @param userId the user ID of this user preference
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this user preference.
	 *
	 * @return the user uuid of this user preference
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this user preference.
	 *
	 * @param userUuid the user uuid of this user preference
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the lang code of this user preference.
	 *
	 * @return the lang code of this user preference
	 */
	@AutoEscape
	public String getLangCode();

	/**
	 * Sets the lang code of this user preference.
	 *
	 * @param langCode the lang code of this user preference
	 */
	public void setLangCode(String langCode);

	/**
	 * Returns the pdf lang code of this user preference.
	 *
	 * @return the pdf lang code of this user preference
	 */
	@AutoEscape
	public String getPdfLangCode();

	/**
	 * Sets the pdf lang code of this user preference.
	 *
	 * @param pdfLangCode the pdf lang code of this user preference
	 */
	public void setPdfLangCode(String pdfLangCode);

	/**
	 * Returns the build type of this user preference.
	 *
	 * @return the build type of this user preference
	 */
	@AutoEscape
	public String getBuildType();

	/**
	 * Sets the build type of this user preference.
	 *
	 * @param buildType the build type of this user preference
	 */
	public void setBuildType(String buildType);

	/**
	 * Returns the chain code of this user preference.
	 *
	 * @return the chain code of this user preference
	 */
	@AutoEscape
	public String getChainCode();

	/**
	 * Sets the chain code of this user preference.
	 *
	 * @param chainCode the chain code of this user preference
	 */
	public void setChainCode(String chainCode);

	/**
	 * Returns the report type of this user preference.
	 *
	 * @return the report type of this user preference
	 */
	@AutoEscape
	public String getReportType();

	/**
	 * Sets the report type of this user preference.
	 *
	 * @param reportType the report type of this user preference
	 */
	public void setReportType(String reportType);

	/**
	 * Returns the paper size of this user preference.
	 *
	 * @return the paper size of this user preference
	 */
	@AutoEscape
	public String getPaperSize();

	/**
	 * Sets the paper size of this user preference.
	 *
	 * @param paperSize the paper size of this user preference
	 */
	public void setPaperSize(String paperSize);

	/**
	 * Returns the items per page of this user preference.
	 *
	 * @return the items per page of this user preference
	 */
	@AutoEscape
	public String getItemsPerPage();

	/**
	 * Sets the items per page of this user preference.
	 *
	 * @param itemsPerPage the items per page of this user preference
	 */
	public void setItemsPerPage(String itemsPerPage);

	/**
	 * Returns the info display of this user preference.
	 *
	 * @return the info display of this user preference
	 */
	@AutoEscape
	public String getInfoDisplay();

	/**
	 * Sets the info display of this user preference.
	 *
	 * @param infoDisplay the info display of this user preference
	 */
	public void setInfoDisplay(String infoDisplay);

	/**
	 * Returns the country code of this user preference.
	 *
	 * @return the country code of this user preference
	 */
	@AutoEscape
	public String getCountryCode();

	/**
	 * Sets the country code of this user preference.
	 *
	 * @param CountryCode the country code of this user preference
	 */
	public void setCountryCode(String CountryCode);

	/**
	 * Returns the unsubscribe email of this user preference.
	 *
	 * @return the unsubscribe email of this user preference
	 */
	@AutoEscape
	public String getUnsubscribeEmail();

	/**
	 * Sets the unsubscribe email of this user preference.
	 *
	 * @param unsubscribeEmail the unsubscribe email of this user preference
	 */
	public void setUnsubscribeEmail(String unsubscribeEmail);

	/**
	 * Returns the module name of this user preference.
	 *
	 * @return the module name of this user preference
	 */
	@AutoEscape
	public String getModuleName();

	/**
	 * Sets the module name of this user preference.
	 *
	 * @param moduleName the module name of this user preference
	 */
	public void setModuleName(String moduleName);

	/**
	 * Returns the creator ID of this user preference.
	 *
	 * @return the creator ID of this user preference
	 */
	@AutoEscape
	public String getCreatorId();

	/**
	 * Sets the creator ID of this user preference.
	 *
	 * @param creatorId the creator ID of this user preference
	 */
	public void setCreatorId(String creatorId);

	/**
	 * Returns the created date of this user preference.
	 *
	 * @return the created date of this user preference
	 */
	public Date getCreatedDate();

	/**
	 * Sets the created date of this user preference.
	 *
	 * @param createdDate the created date of this user preference
	 */
	public void setCreatedDate(Date createdDate);

	/**
	 * Returns the updated by of this user preference.
	 *
	 * @return the updated by of this user preference
	 */
	@AutoEscape
	public String getUpdatedBy();

	/**
	 * Sets the updated by of this user preference.
	 *
	 * @param updatedBy the updated by of this user preference
	 */
	public void setUpdatedBy(String updatedBy);

	/**
	 * Returns the updated date of this user preference.
	 *
	 * @return the updated date of this user preference
	 */
	public Date getUpdatedDate();

	/**
	 * Sets the updated date of this user preference.
	 *
	 * @param updatedDate the updated date of this user preference
	 */
	public void setUpdatedDate(Date updatedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(UserPreference userPreference);

	@Override
	public int hashCode();

	@Override
	public CacheModel<UserPreference> toCacheModel();

	@Override
	public UserPreference toEscapedModel();

	@Override
	public UserPreference toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}