/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.grs.common.service.base;

import com.ihg.grs.common.model.Directory;
import com.ihg.grs.common.service.DirectoryLocalService;
import com.ihg.grs.common.service.persistence.DirectoryPersistence;
import com.ihg.grs.common.service.persistence.FeedbackDetailPersistence;
import com.ihg.grs.common.service.persistence.FeedbackPersistence;
import com.ihg.grs.common.service.persistence.GlossaryPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the directory local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ihg.grs.common.service.impl.DirectoryLocalServiceImpl}.
 * </p>
 *
 * @author gulam.vora
 * @see com.ihg.grs.common.service.impl.DirectoryLocalServiceImpl
 * @see com.ihg.grs.common.service.DirectoryLocalServiceUtil
 * @generated
 */
public abstract class DirectoryLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements DirectoryLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ihg.grs.common.service.DirectoryLocalServiceUtil} to access the directory local service.
	 */

	/**
	 * Adds the directory to the database. Also notifies the appropriate model listeners.
	 *
	 * @param directory the directory
	 * @return the directory that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Directory addDirectory(Directory directory)
		throws SystemException {
		directory.setNew(true);

		return directoryPersistence.update(directory);
	}

	/**
	 * Creates a new directory with the primary key. Does not add the directory to the database.
	 *
	 * @param directoryId the primary key for the new directory
	 * @return the new directory
	 */
	@Override
	public Directory createDirectory(int directoryId) {
		return directoryPersistence.create(directoryId);
	}

	/**
	 * Deletes the directory with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param directoryId the primary key of the directory
	 * @return the directory that was removed
	 * @throws PortalException if a directory with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Directory deleteDirectory(int directoryId)
		throws PortalException, SystemException {
		return directoryPersistence.remove(directoryId);
	}

	/**
	 * Deletes the directory from the database. Also notifies the appropriate model listeners.
	 *
	 * @param directory the directory
	 * @return the directory that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Directory deleteDirectory(Directory directory)
		throws SystemException {
		return directoryPersistence.remove(directory);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Directory.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return directoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.grs.common.model.impl.DirectoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return directoryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.grs.common.model.impl.DirectoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return directoryPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return directoryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return directoryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Directory fetchDirectory(int directoryId) throws SystemException {
		return directoryPersistence.fetchByPrimaryKey(directoryId);
	}

	/**
	 * Returns the directory with the primary key.
	 *
	 * @param directoryId the primary key of the directory
	 * @return the directory
	 * @throws PortalException if a directory with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Directory getDirectory(int directoryId)
		throws PortalException, SystemException {
		return directoryPersistence.findByPrimaryKey(directoryId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return directoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the directories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.grs.common.model.impl.DirectoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of directories
	 * @param end the upper bound of the range of directories (not inclusive)
	 * @return the range of directories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Directory> getDirectories(int start, int end)
		throws SystemException {
		return directoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of directories.
	 *
	 * @return the number of directories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDirectoriesCount() throws SystemException {
		return directoryPersistence.countAll();
	}

	/**
	 * Updates the directory in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param directory the directory
	 * @return the directory that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Directory updateDirectory(Directory directory)
		throws SystemException {
		return directoryPersistence.update(directory);
	}

	/**
	 * Returns the directory local service.
	 *
	 * @return the directory local service
	 */
	public com.ihg.grs.common.service.DirectoryLocalService getDirectoryLocalService() {
		return directoryLocalService;
	}

	/**
	 * Sets the directory local service.
	 *
	 * @param directoryLocalService the directory local service
	 */
	public void setDirectoryLocalService(
		com.ihg.grs.common.service.DirectoryLocalService directoryLocalService) {
		this.directoryLocalService = directoryLocalService;
	}

	/**
	 * Returns the directory persistence.
	 *
	 * @return the directory persistence
	 */
	public DirectoryPersistence getDirectoryPersistence() {
		return directoryPersistence;
	}

	/**
	 * Sets the directory persistence.
	 *
	 * @param directoryPersistence the directory persistence
	 */
	public void setDirectoryPersistence(
		DirectoryPersistence directoryPersistence) {
		this.directoryPersistence = directoryPersistence;
	}

	/**
	 * Returns the feedback local service.
	 *
	 * @return the feedback local service
	 */
	public com.ihg.grs.common.service.FeedbackLocalService getFeedbackLocalService() {
		return feedbackLocalService;
	}

	/**
	 * Sets the feedback local service.
	 *
	 * @param feedbackLocalService the feedback local service
	 */
	public void setFeedbackLocalService(
		com.ihg.grs.common.service.FeedbackLocalService feedbackLocalService) {
		this.feedbackLocalService = feedbackLocalService;
	}

	/**
	 * Returns the feedback persistence.
	 *
	 * @return the feedback persistence
	 */
	public FeedbackPersistence getFeedbackPersistence() {
		return feedbackPersistence;
	}

	/**
	 * Sets the feedback persistence.
	 *
	 * @param feedbackPersistence the feedback persistence
	 */
	public void setFeedbackPersistence(FeedbackPersistence feedbackPersistence) {
		this.feedbackPersistence = feedbackPersistence;
	}

	/**
	 * Returns the feedback detail local service.
	 *
	 * @return the feedback detail local service
	 */
	public com.ihg.grs.common.service.FeedbackDetailLocalService getFeedbackDetailLocalService() {
		return feedbackDetailLocalService;
	}

	/**
	 * Sets the feedback detail local service.
	 *
	 * @param feedbackDetailLocalService the feedback detail local service
	 */
	public void setFeedbackDetailLocalService(
		com.ihg.grs.common.service.FeedbackDetailLocalService feedbackDetailLocalService) {
		this.feedbackDetailLocalService = feedbackDetailLocalService;
	}

	/**
	 * Returns the feedback detail persistence.
	 *
	 * @return the feedback detail persistence
	 */
	public FeedbackDetailPersistence getFeedbackDetailPersistence() {
		return feedbackDetailPersistence;
	}

	/**
	 * Sets the feedback detail persistence.
	 *
	 * @param feedbackDetailPersistence the feedback detail persistence
	 */
	public void setFeedbackDetailPersistence(
		FeedbackDetailPersistence feedbackDetailPersistence) {
		this.feedbackDetailPersistence = feedbackDetailPersistence;
	}

	/**
	 * Returns the glossary local service.
	 *
	 * @return the glossary local service
	 */
	public com.ihg.grs.common.service.GlossaryLocalService getGlossaryLocalService() {
		return glossaryLocalService;
	}

	/**
	 * Sets the glossary local service.
	 *
	 * @param glossaryLocalService the glossary local service
	 */
	public void setGlossaryLocalService(
		com.ihg.grs.common.service.GlossaryLocalService glossaryLocalService) {
		this.glossaryLocalService = glossaryLocalService;
	}

	/**
	 * Returns the glossary persistence.
	 *
	 * @return the glossary persistence
	 */
	public GlossaryPersistence getGlossaryPersistence() {
		return glossaryPersistence;
	}

	/**
	 * Sets the glossary persistence.
	 *
	 * @param glossaryPersistence the glossary persistence
	 */
	public void setGlossaryPersistence(GlossaryPersistence glossaryPersistence) {
		this.glossaryPersistence = glossaryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.ihg.grs.common.model.Directory",
			directoryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.ihg.grs.common.model.Directory");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Directory.class;
	}

	protected String getModelClassName() {
		return Directory.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = directoryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.ihg.grs.common.service.DirectoryLocalService.class)
	protected com.ihg.grs.common.service.DirectoryLocalService directoryLocalService;
	@BeanReference(type = DirectoryPersistence.class)
	protected DirectoryPersistence directoryPersistence;
	@BeanReference(type = com.ihg.grs.common.service.FeedbackLocalService.class)
	protected com.ihg.grs.common.service.FeedbackLocalService feedbackLocalService;
	@BeanReference(type = FeedbackPersistence.class)
	protected FeedbackPersistence feedbackPersistence;
	@BeanReference(type = com.ihg.grs.common.service.FeedbackDetailLocalService.class)
	protected com.ihg.grs.common.service.FeedbackDetailLocalService feedbackDetailLocalService;
	@BeanReference(type = FeedbackDetailPersistence.class)
	protected FeedbackDetailPersistence feedbackDetailPersistence;
	@BeanReference(type = com.ihg.grs.common.service.GlossaryLocalService.class)
	protected com.ihg.grs.common.service.GlossaryLocalService glossaryLocalService;
	@BeanReference(type = GlossaryPersistence.class)
	protected GlossaryPersistence glossaryPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DirectoryLocalServiceClpInvoker _clpInvoker = new DirectoryLocalServiceClpInvoker();
}