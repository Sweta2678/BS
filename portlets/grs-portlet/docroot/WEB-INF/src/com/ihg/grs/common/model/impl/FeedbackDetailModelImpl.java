/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.grs.common.model.impl;

import com.ihg.grs.common.model.FeedbackDetail;
import com.ihg.grs.common.model.FeedbackDetailFileContentBlobModel;
import com.ihg.grs.common.model.FeedbackDetailModel;
import com.ihg.grs.common.service.FeedbackDetailLocalServiceUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FeedbackDetail service. Represents a row in the &quot;GRS_COMM.PORTAL_FEEDBACK_DTL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.grs.common.model.FeedbackDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FeedbackDetailImpl}.
 * </p>
 *
 * @author gulam.vora
 * @see FeedbackDetailImpl
 * @see com.ihg.grs.common.model.FeedbackDetail
 * @see com.ihg.grs.common.model.FeedbackDetailModel
 * @generated
 */
public class FeedbackDetailModelImpl extends BaseModelImpl<FeedbackDetail>
	implements FeedbackDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a feedback detail model instance should use the {@link com.ihg.grs.common.model.FeedbackDetail} interface instead.
	 */
	public static final String TABLE_NAME = "GRS_COMM.PORTAL_FEEDBACK_DTL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PORTAL_FEEDBACK_DTL_ID", Types.INTEGER },
			{ "PORTAL_USR_ID", Types.INTEGER },
			{ "FEEDBACK_TYP_NM", Types.VARCHAR },
			{ "SUBJECT_NM", Types.VARCHAR },
			{ "MSG_TXT", Types.VARCHAR },
			{ "FILE_NM", Types.VARCHAR },
			{ "FILE_BLOB", Types.BLOB },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GRS_COMM.PORTAL_FEEDBACK_DTL (PORTAL_FEEDBACK_DTL_ID INTEGER not null primary key,PORTAL_USR_ID INTEGER,FEEDBACK_TYP_NM VARCHAR(75) null,SUBJECT_NM VARCHAR(75) null,MSG_TXT VARCHAR(75) null,FILE_NM VARCHAR(75) null,FILE_BLOB BLOB,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GRS_COMM.PORTAL_FEEDBACK_DTL";
	public static final String ORDER_BY_JPQL = " ORDER BY feedbackDetail.PORTAL_FEEDBACK_DTL_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GRS_COMM.PORTAL_FEEDBACK_DTL.PORTAL_FEEDBACK_DTL_ID ASC";
	public static final String DATA_SOURCE = "grsDataSource";
	public static final String SESSION_FACTORY = "grsSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.grs.common.model.FeedbackDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.grs.common.model.FeedbackDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.grs.common.model.FeedbackDetail"));

	public FeedbackDetailModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _PORTAL_FEEDBACK_DTL_ID;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setPORTAL_FEEDBACK_DTL_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PORTAL_FEEDBACK_DTL_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FeedbackDetail.class;
	}

	@Override
	public String getModelClassName() {
		return FeedbackDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PORTAL_FEEDBACK_DTL_ID", getPORTAL_FEEDBACK_DTL_ID());
		attributes.put("feedbackId", getFeedbackId());
		attributes.put("feedbackType", getFeedbackType());
		attributes.put("subject", getSubject());
		attributes.put("message", getMessage());
		attributes.put("fileName", getFileName());
		attributes.put("fileContent", getFileContent());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createdate", getCreatedate());
		attributes.put("lastUpdateUserId", getLastUpdateUserId());
		attributes.put("updatedate", getUpdatedate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer PORTAL_FEEDBACK_DTL_ID = (Integer)attributes.get(
				"PORTAL_FEEDBACK_DTL_ID");

		if (PORTAL_FEEDBACK_DTL_ID != null) {
			setPORTAL_FEEDBACK_DTL_ID(PORTAL_FEEDBACK_DTL_ID);
		}

		Integer feedbackId = (Integer)attributes.get("feedbackId");

		if (feedbackId != null) {
			setFeedbackId(feedbackId);
		}

		String feedbackType = (String)attributes.get("feedbackType");

		if (feedbackType != null) {
			setFeedbackType(feedbackType);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		Blob fileContent = (Blob)attributes.get("fileContent");

		if (fileContent != null) {
			setFileContent(fileContent);
		}

		String createUserId = (String)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Date createdate = (Date)attributes.get("createdate");

		if (createdate != null) {
			setCreatedate(createdate);
		}

		String lastUpdateUserId = (String)attributes.get("lastUpdateUserId");

		if (lastUpdateUserId != null) {
			setLastUpdateUserId(lastUpdateUserId);
		}

		Date updatedate = (Date)attributes.get("updatedate");

		if (updatedate != null) {
			setUpdatedate(updatedate);
		}
	}

	@Override
	public int getPORTAL_FEEDBACK_DTL_ID() {
		return _PORTAL_FEEDBACK_DTL_ID;
	}

	@Override
	public void setPORTAL_FEEDBACK_DTL_ID(int PORTAL_FEEDBACK_DTL_ID) {
		_PORTAL_FEEDBACK_DTL_ID = PORTAL_FEEDBACK_DTL_ID;
	}

	@Override
	public int getFeedbackId() {
		return _feedbackId;
	}

	@Override
	public void setFeedbackId(int feedbackId) {
		_feedbackId = feedbackId;
	}

	@Override
	public String getFeedbackType() {
		if (_feedbackType == null) {
			return StringPool.BLANK;
		}
		else {
			return _feedbackType;
		}
	}

	@Override
	public void setFeedbackType(String feedbackType) {
		_feedbackType = feedbackType;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public Blob getFileContent() {
		if (_fileContentBlobModel == null) {
			try {
				_fileContentBlobModel = FeedbackDetailLocalServiceUtil.getFileContentBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_fileContentBlobModel != null) {
			blob = _fileContentBlobModel.getFileContentBlob();
		}

		return blob;
	}

	@Override
	public void setFileContent(Blob fileContent) {
		if (_fileContentBlobModel == null) {
			_fileContentBlobModel = new FeedbackDetailFileContentBlobModel(getPrimaryKey(),
					fileContent);
		}
		else {
			_fileContentBlobModel.setFileContentBlob(fileContent);
		}
	}

	@Override
	public String getCreateUserId() {
		if (_createUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserId;
		}
	}

	@Override
	public void setCreateUserId(String createUserId) {
		_createUserId = createUserId;
	}

	@Override
	public Date getCreatedate() {
		return _createdate;
	}

	@Override
	public void setCreatedate(Date createdate) {
		_createdate = createdate;
	}

	@Override
	public String getLastUpdateUserId() {
		if (_lastUpdateUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserId;
		}
	}

	@Override
	public void setLastUpdateUserId(String lastUpdateUserId) {
		_lastUpdateUserId = lastUpdateUserId;
	}

	@Override
	public Date getUpdatedate() {
		return _updatedate;
	}

	@Override
	public void setUpdatedate(Date updatedate) {
		_updatedate = updatedate;
	}

	@Override
	public FeedbackDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FeedbackDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FeedbackDetailImpl feedbackDetailImpl = new FeedbackDetailImpl();

		feedbackDetailImpl.setPORTAL_FEEDBACK_DTL_ID(getPORTAL_FEEDBACK_DTL_ID());
		feedbackDetailImpl.setFeedbackId(getFeedbackId());
		feedbackDetailImpl.setFeedbackType(getFeedbackType());
		feedbackDetailImpl.setSubject(getSubject());
		feedbackDetailImpl.setMessage(getMessage());
		feedbackDetailImpl.setFileName(getFileName());
		feedbackDetailImpl.setCreateUserId(getCreateUserId());
		feedbackDetailImpl.setCreatedate(getCreatedate());
		feedbackDetailImpl.setLastUpdateUserId(getLastUpdateUserId());
		feedbackDetailImpl.setUpdatedate(getUpdatedate());

		feedbackDetailImpl.resetOriginalValues();

		return feedbackDetailImpl;
	}

	@Override
	public int compareTo(FeedbackDetail feedbackDetail) {
		int primaryKey = feedbackDetail.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FeedbackDetail)) {
			return false;
		}

		FeedbackDetail feedbackDetail = (FeedbackDetail)obj;

		int primaryKey = feedbackDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FeedbackDetailModelImpl feedbackDetailModelImpl = this;

		feedbackDetailModelImpl._fileContentBlobModel = null;
	}

	@Override
	public CacheModel<FeedbackDetail> toCacheModel() {
		FeedbackDetailCacheModel feedbackDetailCacheModel = new FeedbackDetailCacheModel();

		feedbackDetailCacheModel.PORTAL_FEEDBACK_DTL_ID = getPORTAL_FEEDBACK_DTL_ID();

		feedbackDetailCacheModel.feedbackId = getFeedbackId();

		feedbackDetailCacheModel.feedbackType = getFeedbackType();

		String feedbackType = feedbackDetailCacheModel.feedbackType;

		if ((feedbackType != null) && (feedbackType.length() == 0)) {
			feedbackDetailCacheModel.feedbackType = null;
		}

		feedbackDetailCacheModel.subject = getSubject();

		String subject = feedbackDetailCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			feedbackDetailCacheModel.subject = null;
		}

		feedbackDetailCacheModel.message = getMessage();

		String message = feedbackDetailCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			feedbackDetailCacheModel.message = null;
		}

		feedbackDetailCacheModel.fileName = getFileName();

		String fileName = feedbackDetailCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			feedbackDetailCacheModel.fileName = null;
		}

		feedbackDetailCacheModel.createUserId = getCreateUserId();

		String createUserId = feedbackDetailCacheModel.createUserId;

		if ((createUserId != null) && (createUserId.length() == 0)) {
			feedbackDetailCacheModel.createUserId = null;
		}

		Date createdate = getCreatedate();

		if (createdate != null) {
			feedbackDetailCacheModel.createdate = createdate.getTime();
		}
		else {
			feedbackDetailCacheModel.createdate = Long.MIN_VALUE;
		}

		feedbackDetailCacheModel.lastUpdateUserId = getLastUpdateUserId();

		String lastUpdateUserId = feedbackDetailCacheModel.lastUpdateUserId;

		if ((lastUpdateUserId != null) && (lastUpdateUserId.length() == 0)) {
			feedbackDetailCacheModel.lastUpdateUserId = null;
		}

		Date updatedate = getUpdatedate();

		if (updatedate != null) {
			feedbackDetailCacheModel.updatedate = updatedate.getTime();
		}
		else {
			feedbackDetailCacheModel.updatedate = Long.MIN_VALUE;
		}

		return feedbackDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{PORTAL_FEEDBACK_DTL_ID=");
		sb.append(getPORTAL_FEEDBACK_DTL_ID());
		sb.append(", feedbackId=");
		sb.append(getFeedbackId());
		sb.append(", feedbackType=");
		sb.append(getFeedbackType());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createdate=");
		sb.append(getCreatedate());
		sb.append(", lastUpdateUserId=");
		sb.append(getLastUpdateUserId());
		sb.append(", updatedate=");
		sb.append(getUpdatedate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ihg.grs.common.model.FeedbackDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PORTAL_FEEDBACK_DTL_ID</column-name><column-value><![CDATA[");
		sb.append(getPORTAL_FEEDBACK_DTL_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackId</column-name><column-value><![CDATA[");
		sb.append(getFeedbackId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackType</column-name><column-value><![CDATA[");
		sb.append(getFeedbackType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdate</column-name><column-value><![CDATA[");
		sb.append(getCreatedate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserId</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FeedbackDetail.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FeedbackDetail.class
		};
	private int _PORTAL_FEEDBACK_DTL_ID;
	private int _feedbackId;
	private String _feedbackType;
	private String _subject;
	private String _message;
	private String _fileName;
	private FeedbackDetailFileContentBlobModel _fileContentBlobModel;
	private String _createUserId;
	private Date _createdate;
	private String _lastUpdateUserId;
	private Date _updatedate;
	private FeedbackDetail _escapedModel;
}