/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgePublishCountry;
import com.ihg.brandstandards.db.model.BridgePublishCountryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgePublishCountry service. Represents a row in the &quot;BRIDGE_PUBLISH_CTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgePublishCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgePublishCountryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgePublishCountryImpl
 * @see com.ihg.brandstandards.db.model.BridgePublishCountry
 * @see com.ihg.brandstandards.db.model.BridgePublishCountryModel
 * @generated
 */
public class BridgePublishCountryModelImpl extends BaseModelImpl<BridgePublishCountry>
	implements BridgePublishCountryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge publish country model instance should use the {@link com.ihg.brandstandards.db.model.BridgePublishCountry} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH_CTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUBLISH_CTRY_ID", Types.BIGINT },
			{ "BRIDGE_PUBLISH_ID", Types.BIGINT },
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "BRIDGE_PUBLISH_STAT_CD", Types.VARCHAR },
			{ "PUBLISH_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH_CTRY (BRIDGE_PUBLISH_CTRY_ID LONG not null primary key,BRIDGE_PUBLISH_ID LONG,CTRY_NM_CD VARCHAR(75) null,BRIDGE_PUBLISH_STAT_CD VARCHAR(75) null,PUBLISH_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH_CTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgePublishCountry.publishCtryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH_CTRY.BRIDGE_PUBLISH_CTRY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishCountry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishCountry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.BridgePublishCountry"),
			true);
	public static long BRIDGEPUBLISHID_COLUMN_BITMASK = 1L;
	public static long COUNTRYCODE_COLUMN_BITMASK = 2L;
	public static long PUBLISHCTRYID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgePublishCountry"));

	public BridgePublishCountryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publishCtryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublishCtryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishCtryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BridgePublishCountry.class;
	}

	@Override
	public String getModelClassName() {
		return BridgePublishCountry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishCtryId", getPublishCtryId());
		attributes.put("bridgePublishId", getBridgePublishId());
		attributes.put("countryCode", getCountryCode());
		attributes.put("statusCode", getStatusCode());
		attributes.put("publishInd", getPublishInd());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishCtryId = (Long)attributes.get("publishCtryId");

		if (publishCtryId != null) {
			setPublishCtryId(publishCtryId);
		}

		Long bridgePublishId = (Long)attributes.get("bridgePublishId");

		if (bridgePublishId != null) {
			setBridgePublishId(bridgePublishId);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String statusCode = (String)attributes.get("statusCode");

		if (statusCode != null) {
			setStatusCode(statusCode);
		}

		String publishInd = (String)attributes.get("publishInd");

		if (publishInd != null) {
			setPublishInd(publishInd);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPublishCtryId() {
		return _publishCtryId;
	}

	@Override
	public void setPublishCtryId(long publishCtryId) {
		_columnBitmask = -1L;

		_publishCtryId = publishCtryId;
	}

	@Override
	public long getBridgePublishId() {
		return _bridgePublishId;
	}

	@Override
	public void setBridgePublishId(long bridgePublishId) {
		_columnBitmask |= BRIDGEPUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalBridgePublishId) {
			_setOriginalBridgePublishId = true;

			_originalBridgePublishId = _bridgePublishId;
		}

		_bridgePublishId = bridgePublishId;
	}

	public long getOriginalBridgePublishId() {
		return _originalBridgePublishId;
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_columnBitmask |= COUNTRYCODE_COLUMN_BITMASK;

		if (_originalCountryCode == null) {
			_originalCountryCode = _countryCode;
		}

		_countryCode = countryCode;
	}

	public String getOriginalCountryCode() {
		return GetterUtil.getString(_originalCountryCode);
	}

	@Override
	public String getStatusCode() {
		if (_statusCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusCode;
		}
	}

	@Override
	public void setStatusCode(String statusCode) {
		_statusCode = statusCode;
	}

	@Override
	public String getPublishInd() {
		if (_publishInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishInd;
		}
	}

	@Override
	public void setPublishInd(String publishInd) {
		_publishInd = publishInd;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BridgePublishCountry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BridgePublishCountry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgePublishCountry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgePublishCountryImpl bridgePublishCountryImpl = new BridgePublishCountryImpl();

		bridgePublishCountryImpl.setPublishCtryId(getPublishCtryId());
		bridgePublishCountryImpl.setBridgePublishId(getBridgePublishId());
		bridgePublishCountryImpl.setCountryCode(getCountryCode());
		bridgePublishCountryImpl.setStatusCode(getStatusCode());
		bridgePublishCountryImpl.setPublishInd(getPublishInd());
		bridgePublishCountryImpl.setCreatorId(getCreatorId());
		bridgePublishCountryImpl.setCreatedDate(getCreatedDate());
		bridgePublishCountryImpl.setUpdatedBy(getUpdatedBy());
		bridgePublishCountryImpl.setUpdatedDate(getUpdatedDate());

		bridgePublishCountryImpl.resetOriginalValues();

		return bridgePublishCountryImpl;
	}

	@Override
	public int compareTo(BridgePublishCountry bridgePublishCountry) {
		int value = 0;

		if (getPublishCtryId() < bridgePublishCountry.getPublishCtryId()) {
			value = -1;
		}
		else if (getPublishCtryId() > bridgePublishCountry.getPublishCtryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgePublishCountry)) {
			return false;
		}

		BridgePublishCountry bridgePublishCountry = (BridgePublishCountry)obj;

		long primaryKey = bridgePublishCountry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BridgePublishCountryModelImpl bridgePublishCountryModelImpl = this;

		bridgePublishCountryModelImpl._originalBridgePublishId = bridgePublishCountryModelImpl._bridgePublishId;

		bridgePublishCountryModelImpl._setOriginalBridgePublishId = false;

		bridgePublishCountryModelImpl._originalCountryCode = bridgePublishCountryModelImpl._countryCode;

		bridgePublishCountryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BridgePublishCountry> toCacheModel() {
		BridgePublishCountryCacheModel bridgePublishCountryCacheModel = new BridgePublishCountryCacheModel();

		bridgePublishCountryCacheModel.publishCtryId = getPublishCtryId();

		bridgePublishCountryCacheModel.bridgePublishId = getBridgePublishId();

		bridgePublishCountryCacheModel.countryCode = getCountryCode();

		String countryCode = bridgePublishCountryCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			bridgePublishCountryCacheModel.countryCode = null;
		}

		bridgePublishCountryCacheModel.statusCode = getStatusCode();

		String statusCode = bridgePublishCountryCacheModel.statusCode;

		if ((statusCode != null) && (statusCode.length() == 0)) {
			bridgePublishCountryCacheModel.statusCode = null;
		}

		bridgePublishCountryCacheModel.publishInd = getPublishInd();

		String publishInd = bridgePublishCountryCacheModel.publishInd;

		if ((publishInd != null) && (publishInd.length() == 0)) {
			bridgePublishCountryCacheModel.publishInd = null;
		}

		bridgePublishCountryCacheModel.creatorId = getCreatorId();

		String creatorId = bridgePublishCountryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			bridgePublishCountryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			bridgePublishCountryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			bridgePublishCountryCacheModel.createdDate = Long.MIN_VALUE;
		}

		bridgePublishCountryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = bridgePublishCountryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			bridgePublishCountryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			bridgePublishCountryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			bridgePublishCountryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return bridgePublishCountryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{publishCtryId=");
		sb.append(getPublishCtryId());
		sb.append(", bridgePublishId=");
		sb.append(getBridgePublishId());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", statusCode=");
		sb.append(getStatusCode());
		sb.append(", publishInd=");
		sb.append(getPublishInd());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgePublishCountry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishCtryId</column-name><column-value><![CDATA[");
		sb.append(getPublishCtryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bridgePublishId</column-name><column-value><![CDATA[");
		sb.append(getBridgePublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCode</column-name><column-value><![CDATA[");
		sb.append(getStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishInd</column-name><column-value><![CDATA[");
		sb.append(getPublishInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgePublishCountry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgePublishCountry.class
		};
	private long _publishCtryId;
	private long _bridgePublishId;
	private long _originalBridgePublishId;
	private boolean _setOriginalBridgePublishId;
	private String _countryCode;
	private String _originalCountryCode;
	private String _statusCode;
	private String _publishInd;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private BridgePublishCountry _escapedModel;
}