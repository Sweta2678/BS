/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsTranslate;
import com.ihg.brandstandards.db.model.StandardsTranslateModel;
import com.ihg.brandstandards.db.service.persistence.StandardsTranslatePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsTranslate service. Represents a row in the &quot;STD_XLAT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsTranslateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsTranslateImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsTranslateImpl
 * @see com.ihg.brandstandards.db.model.StandardsTranslate
 * @see com.ihg.brandstandards.db.model.StandardsTranslateModel
 * @generated
 */
public class StandardsTranslateModelImpl extends BaseModelImpl<StandardsTranslate>
	implements StandardsTranslateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards translate model instance should use the {@link com.ihg.brandstandards.db.model.StandardsTranslate} interface instead.
	 */
	public static final String TABLE_NAME = "STD_XLAT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_ID", Types.BIGINT },
			{ "LOCALE_CD", Types.VARCHAR },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "STD_DESC", Types.VARCHAR },
			{ "NOTE_TXT", Types.VARCHAR },
			{ "CMT_TXT", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP },
			{ "TITLE_TXT_VLD_IND", Types.VARCHAR },
			{ "STD_DESC_VLD_IND", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_XLAT (STD_ID LONG not null,LOCALE_CD VARCHAR(75) not null,TITLE_TXT VARCHAR(75) null,STD_DESC VARCHAR(75) null,NOTE_TXT VARCHAR(75) null,CMT_TXT VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,TITLE_TXT_VLD_IND VARCHAR(75) null,STD_DESC_VLD_IND VARCHAR(75) null,primary key (STD_ID, LOCALE_CD))";
	public static final String TABLE_SQL_DROP = "drop table STD_XLAT";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsTranslate.id.stdId ASC, standardsTranslate.id.localeCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_XLAT.STD_ID ASC, STD_XLAT.LOCALE_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsTranslate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsTranslate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsTranslate"),
			true);
	public static long STDID_COLUMN_BITMASK = 1L;
	public static long LOCALECODE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsTranslate"));

	public StandardsTranslateModelImpl() {
	}

	@Override
	public StandardsTranslatePK getPrimaryKey() {
		return new StandardsTranslatePK(_stdId, _localeCode);
	}

	@Override
	public void setPrimaryKey(StandardsTranslatePK primaryKey) {
		setStdId(primaryKey.stdId);
		setLocaleCode(primaryKey.localeCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StandardsTranslatePK(_stdId, _localeCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StandardsTranslatePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsTranslate.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsTranslate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdId", getStdId());
		attributes.put("localeCode", getLocaleCode());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("note", getNote());
		attributes.put("comment", getComment());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());
		attributes.put("isValidTxt", getIsValidTxt());
		attributes.put("isValidCntxt", getIsValidCntxt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String localeCode = (String)attributes.get("localeCode");

		if (localeCode != null) {
			setLocaleCode(localeCode);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}

		String isValidTxt = (String)attributes.get("isValidTxt");

		if (isValidTxt != null) {
			setIsValidTxt(isValidTxt);
		}

		String isValidCntxt = (String)attributes.get("isValidCntxt");

		if (isValidCntxt != null) {
			setIsValidCntxt(isValidCntxt);
		}
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public String getLocaleCode() {
		if (_localeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _localeCode;
		}
	}

	@Override
	public void setLocaleCode(String localeCode) {
		_localeCode = localeCode;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return StringPool.BLANK;
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public String getIsValidTxt() {
		if (_isValidTxt == null) {
			return StringPool.BLANK;
		}
		else {
			return _isValidTxt;
		}
	}

	@Override
	public void setIsValidTxt(String isValidTxt) {
		_isValidTxt = isValidTxt;
	}

	@Override
	public String getIsValidCntxt() {
		if (_isValidCntxt == null) {
			return StringPool.BLANK;
		}
		else {
			return _isValidCntxt;
		}
	}

	@Override
	public void setIsValidCntxt(String isValidCntxt) {
		_isValidCntxt = isValidCntxt;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsTranslate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsTranslate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsTranslateImpl standardsTranslateImpl = new StandardsTranslateImpl();

		standardsTranslateImpl.setStdId(getStdId());
		standardsTranslateImpl.setLocaleCode(getLocaleCode());
		standardsTranslateImpl.setTitle(getTitle());
		standardsTranslateImpl.setDescription(getDescription());
		standardsTranslateImpl.setNote(getNote());
		standardsTranslateImpl.setComment(getComment());
		standardsTranslateImpl.setCreatorId(getCreatorId());
		standardsTranslateImpl.setCreatedDate(getCreatedDate());
		standardsTranslateImpl.setUpdatedBy(getUpdatedBy());
		standardsTranslateImpl.setUpdatedDate(getUpdatedDate());
		standardsTranslateImpl.setIsValidTxt(getIsValidTxt());
		standardsTranslateImpl.setIsValidCntxt(getIsValidCntxt());

		standardsTranslateImpl.resetOriginalValues();

		return standardsTranslateImpl;
	}

	@Override
	public int compareTo(StandardsTranslate standardsTranslate) {
		StandardsTranslatePK primaryKey = standardsTranslate.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsTranslate)) {
			return false;
		}

		StandardsTranslate standardsTranslate = (StandardsTranslate)obj;

		StandardsTranslatePK primaryKey = standardsTranslate.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsTranslateModelImpl standardsTranslateModelImpl = this;

		standardsTranslateModelImpl._originalStdId = standardsTranslateModelImpl._stdId;

		standardsTranslateModelImpl._setOriginalStdId = false;

		standardsTranslateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsTranslate> toCacheModel() {
		StandardsTranslateCacheModel standardsTranslateCacheModel = new StandardsTranslateCacheModel();

		standardsTranslateCacheModel.stdId = getStdId();

		standardsTranslateCacheModel.localeCode = getLocaleCode();

		String localeCode = standardsTranslateCacheModel.localeCode;

		if ((localeCode != null) && (localeCode.length() == 0)) {
			standardsTranslateCacheModel.localeCode = null;
		}

		standardsTranslateCacheModel.title = getTitle();

		String title = standardsTranslateCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			standardsTranslateCacheModel.title = null;
		}

		standardsTranslateCacheModel.description = getDescription();

		String description = standardsTranslateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			standardsTranslateCacheModel.description = null;
		}

		standardsTranslateCacheModel.note = getNote();

		String note = standardsTranslateCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			standardsTranslateCacheModel.note = null;
		}

		standardsTranslateCacheModel.comment = getComment();

		String comment = standardsTranslateCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			standardsTranslateCacheModel.comment = null;
		}

		standardsTranslateCacheModel.creatorId = getCreatorId();

		String creatorId = standardsTranslateCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsTranslateCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsTranslateCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsTranslateCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsTranslateCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsTranslateCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsTranslateCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsTranslateCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsTranslateCacheModel.updatedDate = Long.MIN_VALUE;
		}

		standardsTranslateCacheModel.isValidTxt = getIsValidTxt();

		String isValidTxt = standardsTranslateCacheModel.isValidTxt;

		if ((isValidTxt != null) && (isValidTxt.length() == 0)) {
			standardsTranslateCacheModel.isValidTxt = null;
		}

		standardsTranslateCacheModel.isValidCntxt = getIsValidCntxt();

		String isValidCntxt = standardsTranslateCacheModel.isValidCntxt;

		if ((isValidCntxt != null) && (isValidCntxt.length() == 0)) {
			standardsTranslateCacheModel.isValidCntxt = null;
		}

		return standardsTranslateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{stdId=");
		sb.append(getStdId());
		sb.append(", localeCode=");
		sb.append(getLocaleCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", isValidTxt=");
		sb.append(getIsValidTxt());
		sb.append(", isValidCntxt=");
		sb.append(getIsValidCntxt());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsTranslate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localeCode</column-name><column-value><![CDATA[");
		sb.append(getLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isValidTxt</column-name><column-value><![CDATA[");
		sb.append(getIsValidTxt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isValidCntxt</column-name><column-value><![CDATA[");
		sb.append(getIsValidCntxt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsTranslate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsTranslate.class
		};
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private String _localeCode;
	private String _title;
	private String _description;
	private String _note;
	private String _comment;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private String _isValidTxt;
	private String _isValidCntxt;
	private long _columnBitmask;
	private StandardsTranslate _escapedModel;
}