/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.ErrNotification;
import com.ihg.brandstandards.db.model.ErrNotificationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ErrNotification service. Represents a row in the &quot;ERR_NOTIFICATION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.ErrNotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ErrNotificationImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see ErrNotificationImpl
 * @see com.ihg.brandstandards.db.model.ErrNotification
 * @see com.ihg.brandstandards.db.model.ErrNotificationModel
 * @generated
 */
public class ErrNotificationModelImpl extends BaseModelImpl<ErrNotification>
	implements ErrNotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a err notification model instance should use the {@link com.ihg.brandstandards.db.model.ErrNotification} interface instead.
	 */
	public static final String TABLE_NAME = "ERR_NOTIFICATION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ERR_NOTIFICATION_ID", Types.BIGINT },
			{ "COMPONENT_NM", Types.VARCHAR },
			{ "REF_ID", Types.BIGINT },
			{ "SEVERITY_LVL_CD", Types.VARCHAR },
			{ "ERR_TITLE_TXT", Types.VARCHAR },
			{ "ERR_DESC", Types.VARCHAR },
			{ "STAT_CD", Types.VARCHAR },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ERR_NOTIFICATION (ERR_NOTIFICATION_ID LONG not null primary key,COMPONENT_NM VARCHAR(75) null,REF_ID LONG,SEVERITY_LVL_CD VARCHAR(75) null,ERR_TITLE_TXT VARCHAR(75) null,ERR_DESC VARCHAR(75) null,STAT_CD VARCHAR(75) null,PUBLISH_ID LONG,RGN_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ERR_NOTIFICATION";
	public static final String ORDER_BY_JPQL = " ORDER BY errNotification.notificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ERR_NOTIFICATION.ERR_NOTIFICATION_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.ErrNotification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.ErrNotification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.ErrNotification"),
			true);
	public static long COMPONENTNAME_COLUMN_BITMASK = 1L;
	public static long CREATORID_COLUMN_BITMASK = 2L;
	public static long PUBLISHID_COLUMN_BITMASK = 4L;
	public static long REFERENCEID_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long NOTIFICATIONID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.ErrNotification"));

	public ErrNotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ErrNotification.class;
	}

	@Override
	public String getModelClassName() {
		return ErrNotification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificationId", getNotificationId());
		attributes.put("componentName", getComponentName());
		attributes.put("referenceId", getReferenceId());
		attributes.put("severity", getSeverity());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("status", getStatus());
		attributes.put("publishId", getPublishId());
		attributes.put("regionId", getRegionId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificationId = (Long)attributes.get("notificationId");

		if (notificationId != null) {
			setNotificationId(notificationId);
		}

		String componentName = (String)attributes.get("componentName");

		if (componentName != null) {
			setComponentName(componentName);
		}

		Long referenceId = (Long)attributes.get("referenceId");

		if (referenceId != null) {
			setReferenceId(referenceId);
		}

		String severity = (String)attributes.get("severity");

		if (severity != null) {
			setSeverity(severity);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		_notificationId = notificationId;
	}

	@Override
	public String getComponentName() {
		if (_componentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _componentName;
		}
	}

	@Override
	public void setComponentName(String componentName) {
		_columnBitmask |= COMPONENTNAME_COLUMN_BITMASK;

		if (_originalComponentName == null) {
			_originalComponentName = _componentName;
		}

		_componentName = componentName;
	}

	public String getOriginalComponentName() {
		return GetterUtil.getString(_originalComponentName);
	}

	@Override
	public long getReferenceId() {
		return _referenceId;
	}

	@Override
	public void setReferenceId(long referenceId) {
		_columnBitmask |= REFERENCEID_COLUMN_BITMASK;

		if (!_setOriginalReferenceId) {
			_setOriginalReferenceId = true;

			_originalReferenceId = _referenceId;
		}

		_referenceId = referenceId;
	}

	public long getOriginalReferenceId() {
		return _originalReferenceId;
	}

	@Override
	public String getSeverity() {
		if (_severity == null) {
			return StringPool.BLANK;
		}
		else {
			return _severity;
		}
	}

	@Override
	public void setSeverity(String severity) {
		_severity = severity;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_columnBitmask |= CREATORID_COLUMN_BITMASK;

		if (_originalCreatorId == null) {
			_originalCreatorId = _creatorId;
		}

		_creatorId = creatorId;
	}

	public String getOriginalCreatorId() {
		return GetterUtil.getString(_originalCreatorId);
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ErrNotification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ErrNotification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ErrNotification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ErrNotificationImpl errNotificationImpl = new ErrNotificationImpl();

		errNotificationImpl.setNotificationId(getNotificationId());
		errNotificationImpl.setComponentName(getComponentName());
		errNotificationImpl.setReferenceId(getReferenceId());
		errNotificationImpl.setSeverity(getSeverity());
		errNotificationImpl.setTitle(getTitle());
		errNotificationImpl.setDescription(getDescription());
		errNotificationImpl.setStatus(getStatus());
		errNotificationImpl.setPublishId(getPublishId());
		errNotificationImpl.setRegionId(getRegionId());
		errNotificationImpl.setCreatorId(getCreatorId());
		errNotificationImpl.setCreatedDate(getCreatedDate());
		errNotificationImpl.setUpdatedBy(getUpdatedBy());
		errNotificationImpl.setUpdatedDate(getUpdatedDate());

		errNotificationImpl.resetOriginalValues();

		return errNotificationImpl;
	}

	@Override
	public int compareTo(ErrNotification errNotification) {
		long primaryKey = errNotification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ErrNotification)) {
			return false;
		}

		ErrNotification errNotification = (ErrNotification)obj;

		long primaryKey = errNotification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ErrNotificationModelImpl errNotificationModelImpl = this;

		errNotificationModelImpl._originalComponentName = errNotificationModelImpl._componentName;

		errNotificationModelImpl._originalReferenceId = errNotificationModelImpl._referenceId;

		errNotificationModelImpl._setOriginalReferenceId = false;

		errNotificationModelImpl._originalStatus = errNotificationModelImpl._status;

		errNotificationModelImpl._originalPublishId = errNotificationModelImpl._publishId;

		errNotificationModelImpl._setOriginalPublishId = false;

		errNotificationModelImpl._originalCreatorId = errNotificationModelImpl._creatorId;

		errNotificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ErrNotification> toCacheModel() {
		ErrNotificationCacheModel errNotificationCacheModel = new ErrNotificationCacheModel();

		errNotificationCacheModel.notificationId = getNotificationId();

		errNotificationCacheModel.componentName = getComponentName();

		String componentName = errNotificationCacheModel.componentName;

		if ((componentName != null) && (componentName.length() == 0)) {
			errNotificationCacheModel.componentName = null;
		}

		errNotificationCacheModel.referenceId = getReferenceId();

		errNotificationCacheModel.severity = getSeverity();

		String severity = errNotificationCacheModel.severity;

		if ((severity != null) && (severity.length() == 0)) {
			errNotificationCacheModel.severity = null;
		}

		errNotificationCacheModel.title = getTitle();

		String title = errNotificationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			errNotificationCacheModel.title = null;
		}

		errNotificationCacheModel.description = getDescription();

		String description = errNotificationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			errNotificationCacheModel.description = null;
		}

		errNotificationCacheModel.status = getStatus();

		String status = errNotificationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			errNotificationCacheModel.status = null;
		}

		errNotificationCacheModel.publishId = getPublishId();

		errNotificationCacheModel.regionId = getRegionId();

		errNotificationCacheModel.creatorId = getCreatorId();

		String creatorId = errNotificationCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			errNotificationCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			errNotificationCacheModel.createdDate = createdDate.getTime();
		}
		else {
			errNotificationCacheModel.createdDate = Long.MIN_VALUE;
		}

		errNotificationCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = errNotificationCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			errNotificationCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			errNotificationCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			errNotificationCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return errNotificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{notificationId=");
		sb.append(getNotificationId());
		sb.append(", componentName=");
		sb.append(getComponentName());
		sb.append(", referenceId=");
		sb.append(getReferenceId());
		sb.append(", severity=");
		sb.append(getSeverity());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.ErrNotification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificationId</column-name><column-value><![CDATA[");
		sb.append(getNotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentName</column-name><column-value><![CDATA[");
		sb.append(getComponentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceId</column-name><column-value><![CDATA[");
		sb.append(getReferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>severity</column-name><column-value><![CDATA[");
		sb.append(getSeverity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ErrNotification.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ErrNotification.class
		};
	private long _notificationId;
	private String _componentName;
	private String _originalComponentName;
	private long _referenceId;
	private long _originalReferenceId;
	private boolean _setOriginalReferenceId;
	private String _severity;
	private String _title;
	private String _description;
	private String _status;
	private String _originalStatus;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private long _regionId;
	private String _creatorId;
	private String _originalCreatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private ErrNotification _escapedModel;
}