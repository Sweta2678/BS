/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.Department;
import com.ihg.brandstandards.db.model.DepartmentModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;GEM_DEPT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.DepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see DepartmentImpl
 * @see com.ihg.brandstandards.db.model.Department
 * @see com.ihg.brandstandards.db.model.DepartmentModel
 * @generated
 */
public class DepartmentModelImpl extends BaseModelImpl<Department>
	implements DepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link com.ihg.brandstandards.db.model.Department} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_DEPT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_DEPT_ID", Types.BIGINT },
			{ "GEM_DEPT_NM", Types.VARCHAR },
			{ "GEM_DEPT_DESC", Types.VARCHAR },
			{ "ACTV_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_DEPT (GEM_DEPT_ID LONG not null primary key,GEM_DEPT_NM VARCHAR(75) null,GEM_DEPT_DESC VARCHAR(75) null,ACTV_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_DEPT";
	public static final String ORDER_BY_JPQL = " ORDER BY department.departmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_DEPT.GEM_DEPT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.Department"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.Department"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.Department"),
			true);
	public static long ACTIVEIND_COLUMN_BITMASK = 1L;
	public static long DEPARTMENTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.Department"));

	public DepartmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _departmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDepartmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _departmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Department.class;
	}

	@Override
	public String getModelClassName() {
		return Department.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("departmentId", getDepartmentId());
		attributes.put("departmentName", getDepartmentName());
		attributes.put("description", getDescription());
		attributes.put("activeInd", getActiveInd());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		String departmentName = (String)attributes.get("departmentName");

		if (departmentName != null) {
			setDepartmentName(departmentName);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String activeInd = (String)attributes.get("activeInd");

		if (activeInd != null) {
			setActiveInd(activeInd);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getDepartmentId() {
		return _departmentId;
	}

	@Override
	public void setDepartmentId(long departmentId) {
		_columnBitmask = -1L;

		_departmentId = departmentId;
	}

	@Override
	public String getDepartmentName() {
		if (_departmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentName;
		}
	}

	@Override
	public void setDepartmentName(String departmentName) {
		_departmentName = departmentName;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getActiveInd() {
		if (_activeInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeInd;
		}
	}

	@Override
	public void setActiveInd(String activeInd) {
		_columnBitmask |= ACTIVEIND_COLUMN_BITMASK;

		if (_originalActiveInd == null) {
			_originalActiveInd = _activeInd;
		}

		_activeInd = activeInd;
	}

	public String getOriginalActiveInd() {
		return GetterUtil.getString(_originalActiveInd);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Department.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Department toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Department)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DepartmentImpl departmentImpl = new DepartmentImpl();

		departmentImpl.setDepartmentId(getDepartmentId());
		departmentImpl.setDepartmentName(getDepartmentName());
		departmentImpl.setDescription(getDescription());
		departmentImpl.setActiveInd(getActiveInd());
		departmentImpl.setCreatorId(getCreatorId());
		departmentImpl.setCreatedDate(getCreatedDate());
		departmentImpl.setUpdatedBy(getUpdatedBy());
		departmentImpl.setUpdatedDate(getUpdatedDate());

		departmentImpl.resetOriginalValues();

		return departmentImpl;
	}

	@Override
	public int compareTo(Department department) {
		int value = 0;

		if (getDepartmentId() < department.getDepartmentId()) {
			value = -1;
		}
		else if (getDepartmentId() > department.getDepartmentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Department)) {
			return false;
		}

		Department department = (Department)obj;

		long primaryKey = department.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DepartmentModelImpl departmentModelImpl = this;

		departmentModelImpl._originalActiveInd = departmentModelImpl._activeInd;

		departmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Department> toCacheModel() {
		DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

		departmentCacheModel.departmentId = getDepartmentId();

		departmentCacheModel.departmentName = getDepartmentName();

		String departmentName = departmentCacheModel.departmentName;

		if ((departmentName != null) && (departmentName.length() == 0)) {
			departmentCacheModel.departmentName = null;
		}

		departmentCacheModel.description = getDescription();

		String description = departmentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			departmentCacheModel.description = null;
		}

		departmentCacheModel.activeInd = getActiveInd();

		String activeInd = departmentCacheModel.activeInd;

		if ((activeInd != null) && (activeInd.length() == 0)) {
			departmentCacheModel.activeInd = null;
		}

		departmentCacheModel.creatorId = getCreatorId();

		String creatorId = departmentCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			departmentCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			departmentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			departmentCacheModel.createdDate = Long.MIN_VALUE;
		}

		departmentCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = departmentCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			departmentCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			departmentCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			departmentCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return departmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{departmentId=");
		sb.append(getDepartmentId());
		sb.append(", departmentName=");
		sb.append(getDepartmentName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", activeInd=");
		sb.append(getActiveInd());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.Department");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentName</column-name><column-value><![CDATA[");
		sb.append(getDepartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeInd</column-name><column-value><![CDATA[");
		sb.append(getActiveInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Department.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Department.class
		};
	private long _departmentId;
	private String _departmentName;
	private String _description;
	private String _activeInd;
	private String _originalActiveInd;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private Department _escapedModel;
}