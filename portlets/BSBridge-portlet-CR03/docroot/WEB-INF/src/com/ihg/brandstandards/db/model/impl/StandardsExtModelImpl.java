/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsExt;
import com.ihg.brandstandards.db.model.StandardsExtModel;
import com.ihg.brandstandards.db.service.persistence.StandardsExtPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsExt service. Represents a row in the &quot;STD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsExtImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsExtImpl
 * @see com.ihg.brandstandards.db.model.StandardsExt
 * @see com.ihg.brandstandards.db.model.StandardsExtModel
 * @generated
 */
public class StandardsExtModelImpl extends BaseModelImpl<StandardsExt>
	implements StandardsExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Custom Query mapping between STD and Taxonomy tables. model instance should use the {@link com.ihg.brandstandards.db.model.StandardsExt} interface instead.
	 */
	public static final String TABLE_NAME = "STD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_ID", Types.BIGINT },
			{ "WORKFLOW_ACTV_LOG_ID", Types.BIGINT },
			{ "STD_MANUAL_FLG", Types.VARCHAR },
			{ "STD_CORP_DEPMNT_FLG", Types.VARCHAR },
			{ "STD_BRAND_CD", Types.VARCHAR },
			{ "BI_ASSMT_ID", Types.BIGINT },
			{ "STD_CTRY_CD", Types.VARCHAR },
			{ "STD_PRNT_STD_ID", Types.BIGINT },
			{ "STD_ORIG_STD_ID", Types.BIGINT },
			{ "STD_PUBLISH_STAT_CD", Types.VARCHAR },
			{ "STD_TYP", Types.VARCHAR },
			{ "STD_TITLE_TXT", Types.VARCHAR },
			{ "STD_DESC", Types.VARCHAR },
			{ "STD_BUS_OWNER_NM", Types.VARCHAR },
			{ "STD_STAT_DESC", Types.VARCHAR },
			{ "STD_AUTHOR_NM", Types.VARCHAR },
			{ "STD_AREA_CATGY_CD", Types.VARCHAR },
			{ "STD_GBL_RGN_IND", Types.VARCHAR },
			{ "STD_RGN_CD", Types.VARCHAR },
			{ "FRAMEWORK_STD_IND", Types.VARCHAR },
			{ "STD_CHNG_DESC", Types.VARCHAR },
			{ "STD_CREATOR_SCRN_NM", Types.VARCHAR },
			{ "STD_LST_UPDT_TS", Types.TIMESTAMP },
			{ "STD_IMG_CNT", Types.BIGINT },
			{ "STD_IMG_TITLE", Types.VARCHAR },
			{ "STD_MGR_ID", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "INDX_TAXONOMY_ID", Types.BIGINT },
			{ "ORIG_INDX_TAXONOMY_ID", Types.BIGINT },
			{ "INDX_PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "INDX_TITLE_TXT", Types.VARCHAR },
			{ "INDX_LEVEL", Types.BIGINT },
			{ "INDX_HIER_LVL_NBR", Types.BIGINT },
			{ "INDX_PATH", Types.VARCHAR },
			{ "AUDIT_LOG_TXT", Types.VARCHAR },
			{ "AUDIT_LOG_TITLE_TXT", Types.VARCHAR },
			{ "AUDIT_LOG_UPD_TS", Types.TIMESTAMP },
			{ "AUDIT_LOG_CURRENT_STAT_CD", Types.VARCHAR },
			{ "AUDIT_LOG_PREV_STAT_CD", Types.VARCHAR },
			{ "MNL_TITLE", Types.VARCHAR },
			{ "SEC_LANG_INDX_TITLE", Types.VARCHAR },
			{ "SEC_LANG_INDX_DESC", Types.VARCHAR },
			{ "SEC_LANG_INDX_IMG_PATH", Types.VARCHAR },
			{ "SEC_LANG_STD_TITLE", Types.VARCHAR },
			{ "SEC_LANG_STD_DESC", Types.VARCHAR },
			{ "BI_CHG_FROM_RGN", Types.VARCHAR },
			{ "BI_RGN_CD", Types.VARCHAR },
			{ "BI_PROFIT_LOSS_IMPACT_CD", Types.VARCHAR },
			{ "BI_CAP_EXPENSE_IMPACT_CD", Types.VARCHAR },
			{ "BI_IMPLMNT_TIMESCALE_CD", Types.VARCHAR },
			{ "BI_DESC", Types.VARCHAR },
			{ "BI_CHAIN_CD", Types.VARCHAR },
			{ "REFERENCED_STD_ID", Types.VARCHAR },
			{ "AUDIT_BRAND", Types.VARCHAR },
			{ "GLBL_RUL", Types.BIGINT },
			{ "AMEA_RUL", Types.BIGINT },
			{ "AMER_RUL", Types.BIGINT },
			{ "EURO_RUL", Types.BIGINT },
			{ "GC_RUL", Types.BIGINT },
			{ "EXPIRES", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table STD (STD_ID LONG not null,WORKFLOW_ACTV_LOG_ID LONG not null,STD_MANUAL_FLG VARCHAR(75) not null,STD_CORP_DEPMNT_FLG VARCHAR(75) not null,STD_BRAND_CD VARCHAR(75) not null,BI_ASSMT_ID LONG not null,STD_CTRY_CD VARCHAR(75) not null,STD_PRNT_STD_ID LONG,STD_ORIG_STD_ID LONG,STD_PUBLISH_STAT_CD VARCHAR(75) null,STD_TYP VARCHAR(75) null,STD_TITLE_TXT VARCHAR(75) null,STD_DESC VARCHAR(75) null,STD_BUS_OWNER_NM VARCHAR(75) null,STD_STAT_DESC VARCHAR(75) null,STD_AUTHOR_NM VARCHAR(75) null,STD_AREA_CATGY_CD VARCHAR(75) null,STD_GBL_RGN_IND VARCHAR(75) null,STD_RGN_CD VARCHAR(75) null,FRAMEWORK_STD_IND VARCHAR(75) null,STD_CHNG_DESC VARCHAR(75) null,STD_CREATOR_SCRN_NM VARCHAR(75) null,STD_LST_UPDT_TS DATE null,STD_IMG_CNT LONG,STD_IMG_TITLE VARCHAR(75) null,STD_MGR_ID VARCHAR(75) null,DISP_ORDER_NBR LONG,INDX_TAXONOMY_ID LONG,ORIG_INDX_TAXONOMY_ID LONG,INDX_PRNT_TAXONOMY_ID LONG,INDX_TITLE_TXT VARCHAR(75) null,INDX_LEVEL LONG,INDX_HIER_LVL_NBR LONG,INDX_PATH VARCHAR(75) null,AUDIT_LOG_TXT VARCHAR(75) null,AUDIT_LOG_TITLE_TXT VARCHAR(75) null,AUDIT_LOG_UPD_TS DATE null,AUDIT_LOG_CURRENT_STAT_CD VARCHAR(75) null,AUDIT_LOG_PREV_STAT_CD VARCHAR(75) null,MNL_TITLE VARCHAR(75) null,SEC_LANG_INDX_TITLE VARCHAR(75) null,SEC_LANG_INDX_DESC VARCHAR(75) null,SEC_LANG_INDX_IMG_PATH VARCHAR(75) null,SEC_LANG_STD_TITLE VARCHAR(75) null,SEC_LANG_STD_DESC VARCHAR(75) null,BI_CHG_FROM_RGN VARCHAR(75) null,BI_RGN_CD VARCHAR(75) null,BI_PROFIT_LOSS_IMPACT_CD VARCHAR(75) null,BI_CAP_EXPENSE_IMPACT_CD VARCHAR(75) null,BI_IMPLMNT_TIMESCALE_CD VARCHAR(75) null,BI_DESC VARCHAR(75) null,BI_CHAIN_CD VARCHAR(75) null,REFERENCED_STD_ID VARCHAR(75) null,AUDIT_BRAND VARCHAR(75) null,GLBL_RUL LONG,AMEA_RUL LONG,AMER_RUL LONG,EURO_RUL LONG,GC_RUL LONG,EXPIRES VARCHAR(75) null,primary key (STD_ID, WORKFLOW_ACTV_LOG_ID, STD_MANUAL_FLG, STD_CORP_DEPMNT_FLG, STD_BRAND_CD, BI_ASSMT_ID, STD_CTRY_CD))";
	public static final String TABLE_SQL_DROP = "drop table STD";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsExt.id.stdId ASC, standardsExt.id.auditLogId ASC, standardsExt.id.stdManual ASC, standardsExt.id.stdCorporateDepartment ASC, standardsExt.id.stdBrandCd ASC, standardsExt.id.biImpactAssmntId ASC, standardsExt.id.stdCountryCd ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD.STD_ID ASC, STD.WORKFLOW_ACTV_LOG_ID ASC, STD.STD_MANUAL_FLG ASC, STD.STD_CORP_DEPMNT_FLG ASC, STD.STD_BRAND_CD ASC, STD.BI_ASSMT_ID ASC, STD.STD_CTRY_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsExt"),
			true);
	public static long STDID_COLUMN_BITMASK = 1L;
	public static long AUDITLOGID_COLUMN_BITMASK = 2L;
	public static long STDMANUAL_COLUMN_BITMASK = 4L;
	public static long STDCORPORATEDEPARTMENT_COLUMN_BITMASK = 8L;
	public static long STDBRANDCD_COLUMN_BITMASK = 16L;
	public static long BIIMPACTASSMNTID_COLUMN_BITMASK = 32L;
	public static long STDCOUNTRYCD_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsExt"));

	public StandardsExtModelImpl() {
	}

	@Override
	public StandardsExtPK getPrimaryKey() {
		return new StandardsExtPK(_stdId, _auditLogId, _stdManual,
			_stdCorporateDepartment, _stdBrandCd, _biImpactAssmntId,
			_stdCountryCd);
	}

	@Override
	public void setPrimaryKey(StandardsExtPK primaryKey) {
		setStdId(primaryKey.stdId);
		setAuditLogId(primaryKey.auditLogId);
		setStdManual(primaryKey.stdManual);
		setStdCorporateDepartment(primaryKey.stdCorporateDepartment);
		setStdBrandCd(primaryKey.stdBrandCd);
		setBiImpactAssmntId(primaryKey.biImpactAssmntId);
		setStdCountryCd(primaryKey.stdCountryCd);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StandardsExtPK(_stdId, _auditLogId, _stdManual,
			_stdCorporateDepartment, _stdBrandCd, _biImpactAssmntId,
			_stdCountryCd);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StandardsExtPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsExt.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsExt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdId", getStdId());
		attributes.put("auditLogId", getAuditLogId());
		attributes.put("stdManual", getStdManual());
		attributes.put("stdCorporateDepartment", getStdCorporateDepartment());
		attributes.put("stdBrandCd", getStdBrandCd());
		attributes.put("biImpactAssmntId", getBiImpactAssmntId());
		attributes.put("stdCountryCd", getStdCountryCd());
		attributes.put("stdPrntId", getStdPrntId());
		attributes.put("stdOrigStdId", getStdOrigStdId());
		attributes.put("stdPubStatCd", getStdPubStatCd());
		attributes.put("stdType", getStdType());
		attributes.put("stdTitle", getStdTitle());
		attributes.put("stdDescription", getStdDescription());
		attributes.put("stdBusinessOwner", getStdBusinessOwner());
		attributes.put("stdStatus", getStdStatus());
		attributes.put("stdAuthor", getStdAuthor());
		attributes.put("stdCategory", getStdCategory());
		attributes.put("stdGlobal", getStdGlobal());
		attributes.put("stdRegionCode", getStdRegionCode());
		attributes.put("stdFramework", getStdFramework());
		attributes.put("stdChange", getStdChange());
		attributes.put("stdCreatedBy", getStdCreatedBy());
		attributes.put("stdUpdatedDate", getStdUpdatedDate());
		attributes.put("stdImageCount", getStdImageCount());
		attributes.put("stdImageTitle", getStdImageTitle());
		attributes.put("stdInternalReference", getStdInternalReference());
		attributes.put("stdOrderNumber", getStdOrderNumber());
		attributes.put("indexId", getIndexId());
		attributes.put("indexOrigId", getIndexOrigId());
		attributes.put("indexPrntId", getIndexPrntId());
		attributes.put("indexTitle", getIndexTitle());
		attributes.put("indexLevel", getIndexLevel());
		attributes.put("indexLevelSortOrder", getIndexLevelSortOrder());
		attributes.put("indexPath", getIndexPath());
		attributes.put("auditLogComments", getAuditLogComments());
		attributes.put("auditLogTitle", getAuditLogTitle());
		attributes.put("auditLogDate", getAuditLogDate());
		attributes.put("auditLogStatus", getAuditLogStatus());
		attributes.put("auditLogPrevStatus", getAuditLogPrevStatus());
		attributes.put("histManualDesc", getHistManualDesc());
		attributes.put("secLangIndexTitle", getSecLangIndexTitle());
		attributes.put("secLangIndexDesc", getSecLangIndexDesc());
		attributes.put("secLangIndexImgPath", getSecLangIndexImgPath());
		attributes.put("secLangStdTitle", getSecLangStdTitle());
		attributes.put("secLangStdDesc", getSecLangStdDesc());
		attributes.put("biChangeTypeCd", getBiChangeTypeCd());
		attributes.put("biRegionCd", getBiRegionCd());
		attributes.put("biProfileLossImpactCd", getBiProfileLossImpactCd());
		attributes.put("biCapExpenseImpactCd", getBiCapExpenseImpactCd());
		attributes.put("biImplTimeScaleCd", getBiImplTimeScaleCd());
		attributes.put("biComments", getBiComments());
		attributes.put("biBrandCd", getBiBrandCd());
		attributes.put("stdCrossReferences", getStdCrossReferences());
		attributes.put("auditBrand", getAuditBrand());
		attributes.put("globalRule", getGlobalRule());
		attributes.put("ameaRule", getAmeaRule());
		attributes.put("amerRule", getAmerRule());
		attributes.put("euroRule", getEuroRule());
		attributes.put("gcRule", getGcRule());
		attributes.put("expires", getExpires());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long auditLogId = (Long)attributes.get("auditLogId");

		if (auditLogId != null) {
			setAuditLogId(auditLogId);
		}

		String stdManual = (String)attributes.get("stdManual");

		if (stdManual != null) {
			setStdManual(stdManual);
		}

		String stdCorporateDepartment = (String)attributes.get(
				"stdCorporateDepartment");

		if (stdCorporateDepartment != null) {
			setStdCorporateDepartment(stdCorporateDepartment);
		}

		String stdBrandCd = (String)attributes.get("stdBrandCd");

		if (stdBrandCd != null) {
			setStdBrandCd(stdBrandCd);
		}

		Long biImpactAssmntId = (Long)attributes.get("biImpactAssmntId");

		if (biImpactAssmntId != null) {
			setBiImpactAssmntId(biImpactAssmntId);
		}

		String stdCountryCd = (String)attributes.get("stdCountryCd");

		if (stdCountryCd != null) {
			setStdCountryCd(stdCountryCd);
		}

		Long stdPrntId = (Long)attributes.get("stdPrntId");

		if (stdPrntId != null) {
			setStdPrntId(stdPrntId);
		}

		Long stdOrigStdId = (Long)attributes.get("stdOrigStdId");

		if (stdOrigStdId != null) {
			setStdOrigStdId(stdOrigStdId);
		}

		String stdPubStatCd = (String)attributes.get("stdPubStatCd");

		if (stdPubStatCd != null) {
			setStdPubStatCd(stdPubStatCd);
		}

		String stdType = (String)attributes.get("stdType");

		if (stdType != null) {
			setStdType(stdType);
		}

		String stdTitle = (String)attributes.get("stdTitle");

		if (stdTitle != null) {
			setStdTitle(stdTitle);
		}

		String stdDescription = (String)attributes.get("stdDescription");

		if (stdDescription != null) {
			setStdDescription(stdDescription);
		}

		String stdBusinessOwner = (String)attributes.get("stdBusinessOwner");

		if (stdBusinessOwner != null) {
			setStdBusinessOwner(stdBusinessOwner);
		}

		String stdStatus = (String)attributes.get("stdStatus");

		if (stdStatus != null) {
			setStdStatus(stdStatus);
		}

		String stdAuthor = (String)attributes.get("stdAuthor");

		if (stdAuthor != null) {
			setStdAuthor(stdAuthor);
		}

		String stdCategory = (String)attributes.get("stdCategory");

		if (stdCategory != null) {
			setStdCategory(stdCategory);
		}

		String stdGlobal = (String)attributes.get("stdGlobal");

		if (stdGlobal != null) {
			setStdGlobal(stdGlobal);
		}

		String stdRegionCode = (String)attributes.get("stdRegionCode");

		if (stdRegionCode != null) {
			setStdRegionCode(stdRegionCode);
		}

		String stdFramework = (String)attributes.get("stdFramework");

		if (stdFramework != null) {
			setStdFramework(stdFramework);
		}

		String stdChange = (String)attributes.get("stdChange");

		if (stdChange != null) {
			setStdChange(stdChange);
		}

		String stdCreatedBy = (String)attributes.get("stdCreatedBy");

		if (stdCreatedBy != null) {
			setStdCreatedBy(stdCreatedBy);
		}

		Date stdUpdatedDate = (Date)attributes.get("stdUpdatedDate");

		if (stdUpdatedDate != null) {
			setStdUpdatedDate(stdUpdatedDate);
		}

		Long stdImageCount = (Long)attributes.get("stdImageCount");

		if (stdImageCount != null) {
			setStdImageCount(stdImageCount);
		}

		String stdImageTitle = (String)attributes.get("stdImageTitle");

		if (stdImageTitle != null) {
			setStdImageTitle(stdImageTitle);
		}

		String stdInternalReference = (String)attributes.get(
				"stdInternalReference");

		if (stdInternalReference != null) {
			setStdInternalReference(stdInternalReference);
		}

		Long stdOrderNumber = (Long)attributes.get("stdOrderNumber");

		if (stdOrderNumber != null) {
			setStdOrderNumber(stdOrderNumber);
		}

		Long indexId = (Long)attributes.get("indexId");

		if (indexId != null) {
			setIndexId(indexId);
		}

		Long indexOrigId = (Long)attributes.get("indexOrigId");

		if (indexOrigId != null) {
			setIndexOrigId(indexOrigId);
		}

		Long indexPrntId = (Long)attributes.get("indexPrntId");

		if (indexPrntId != null) {
			setIndexPrntId(indexPrntId);
		}

		String indexTitle = (String)attributes.get("indexTitle");

		if (indexTitle != null) {
			setIndexTitle(indexTitle);
		}

		Long indexLevel = (Long)attributes.get("indexLevel");

		if (indexLevel != null) {
			setIndexLevel(indexLevel);
		}

		Long indexLevelSortOrder = (Long)attributes.get("indexLevelSortOrder");

		if (indexLevelSortOrder != null) {
			setIndexLevelSortOrder(indexLevelSortOrder);
		}

		String indexPath = (String)attributes.get("indexPath");

		if (indexPath != null) {
			setIndexPath(indexPath);
		}

		String auditLogComments = (String)attributes.get("auditLogComments");

		if (auditLogComments != null) {
			setAuditLogComments(auditLogComments);
		}

		String auditLogTitle = (String)attributes.get("auditLogTitle");

		if (auditLogTitle != null) {
			setAuditLogTitle(auditLogTitle);
		}

		Date auditLogDate = (Date)attributes.get("auditLogDate");

		if (auditLogDate != null) {
			setAuditLogDate(auditLogDate);
		}

		String auditLogStatus = (String)attributes.get("auditLogStatus");

		if (auditLogStatus != null) {
			setAuditLogStatus(auditLogStatus);
		}

		String auditLogPrevStatus = (String)attributes.get("auditLogPrevStatus");

		if (auditLogPrevStatus != null) {
			setAuditLogPrevStatus(auditLogPrevStatus);
		}

		String histManualDesc = (String)attributes.get("histManualDesc");

		if (histManualDesc != null) {
			setHistManualDesc(histManualDesc);
		}

		String secLangIndexTitle = (String)attributes.get("secLangIndexTitle");

		if (secLangIndexTitle != null) {
			setSecLangIndexTitle(secLangIndexTitle);
		}

		String secLangIndexDesc = (String)attributes.get("secLangIndexDesc");

		if (secLangIndexDesc != null) {
			setSecLangIndexDesc(secLangIndexDesc);
		}

		String secLangIndexImgPath = (String)attributes.get(
				"secLangIndexImgPath");

		if (secLangIndexImgPath != null) {
			setSecLangIndexImgPath(secLangIndexImgPath);
		}

		String secLangStdTitle = (String)attributes.get("secLangStdTitle");

		if (secLangStdTitle != null) {
			setSecLangStdTitle(secLangStdTitle);
		}

		String secLangStdDesc = (String)attributes.get("secLangStdDesc");

		if (secLangStdDesc != null) {
			setSecLangStdDesc(secLangStdDesc);
		}

		String biChangeTypeCd = (String)attributes.get("biChangeTypeCd");

		if (biChangeTypeCd != null) {
			setBiChangeTypeCd(biChangeTypeCd);
		}

		String biRegionCd = (String)attributes.get("biRegionCd");

		if (biRegionCd != null) {
			setBiRegionCd(biRegionCd);
		}

		String biProfileLossImpactCd = (String)attributes.get(
				"biProfileLossImpactCd");

		if (biProfileLossImpactCd != null) {
			setBiProfileLossImpactCd(biProfileLossImpactCd);
		}

		String biCapExpenseImpactCd = (String)attributes.get(
				"biCapExpenseImpactCd");

		if (biCapExpenseImpactCd != null) {
			setBiCapExpenseImpactCd(biCapExpenseImpactCd);
		}

		String biImplTimeScaleCd = (String)attributes.get("biImplTimeScaleCd");

		if (biImplTimeScaleCd != null) {
			setBiImplTimeScaleCd(biImplTimeScaleCd);
		}

		String biComments = (String)attributes.get("biComments");

		if (biComments != null) {
			setBiComments(biComments);
		}

		String biBrandCd = (String)attributes.get("biBrandCd");

		if (biBrandCd != null) {
			setBiBrandCd(biBrandCd);
		}

		String stdCrossReferences = (String)attributes.get("stdCrossReferences");

		if (stdCrossReferences != null) {
			setStdCrossReferences(stdCrossReferences);
		}

		String auditBrand = (String)attributes.get("auditBrand");

		if (auditBrand != null) {
			setAuditBrand(auditBrand);
		}

		Long globalRule = (Long)attributes.get("globalRule");

		if (globalRule != null) {
			setGlobalRule(globalRule);
		}

		Long ameaRule = (Long)attributes.get("ameaRule");

		if (ameaRule != null) {
			setAmeaRule(ameaRule);
		}

		Long amerRule = (Long)attributes.get("amerRule");

		if (amerRule != null) {
			setAmerRule(amerRule);
		}

		Long euroRule = (Long)attributes.get("euroRule");

		if (euroRule != null) {
			setEuroRule(euroRule);
		}

		Long gcRule = (Long)attributes.get("gcRule");

		if (gcRule != null) {
			setGcRule(gcRule);
		}

		String expires = (String)attributes.get("expires");

		if (expires != null) {
			setExpires(expires);
		}
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public long getAuditLogId() {
		return _auditLogId;
	}

	@Override
	public void setAuditLogId(long auditLogId) {
		_auditLogId = auditLogId;
	}

	@Override
	public String getStdManual() {
		if (_stdManual == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdManual;
		}
	}

	@Override
	public void setStdManual(String stdManual) {
		_stdManual = stdManual;
	}

	@Override
	public String getStdCorporateDepartment() {
		if (_stdCorporateDepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdCorporateDepartment;
		}
	}

	@Override
	public void setStdCorporateDepartment(String stdCorporateDepartment) {
		_stdCorporateDepartment = stdCorporateDepartment;
	}

	@Override
	public String getStdBrandCd() {
		if (_stdBrandCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdBrandCd;
		}
	}

	@Override
	public void setStdBrandCd(String stdBrandCd) {
		_stdBrandCd = stdBrandCd;
	}

	@Override
	public long getBiImpactAssmntId() {
		return _biImpactAssmntId;
	}

	@Override
	public void setBiImpactAssmntId(long biImpactAssmntId) {
		_biImpactAssmntId = biImpactAssmntId;
	}

	@Override
	public String getStdCountryCd() {
		if (_stdCountryCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdCountryCd;
		}
	}

	@Override
	public void setStdCountryCd(String stdCountryCd) {
		_stdCountryCd = stdCountryCd;
	}

	@Override
	public long getStdPrntId() {
		return _stdPrntId;
	}

	@Override
	public void setStdPrntId(long stdPrntId) {
		_stdPrntId = stdPrntId;
	}

	@Override
	public long getStdOrigStdId() {
		return _stdOrigStdId;
	}

	@Override
	public void setStdOrigStdId(long stdOrigStdId) {
		_stdOrigStdId = stdOrigStdId;
	}

	@Override
	public String getStdPubStatCd() {
		if (_stdPubStatCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdPubStatCd;
		}
	}

	@Override
	public void setStdPubStatCd(String stdPubStatCd) {
		_stdPubStatCd = stdPubStatCd;
	}

	@Override
	public String getStdType() {
		if (_stdType == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdType;
		}
	}

	@Override
	public void setStdType(String stdType) {
		_stdType = stdType;
	}

	@Override
	public String getStdTitle() {
		if (_stdTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdTitle;
		}
	}

	@Override
	public void setStdTitle(String stdTitle) {
		_stdTitle = stdTitle;
	}

	@Override
	public String getStdDescription() {
		if (_stdDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdDescription;
		}
	}

	@Override
	public void setStdDescription(String stdDescription) {
		_stdDescription = stdDescription;
	}

	@Override
	public String getStdBusinessOwner() {
		if (_stdBusinessOwner == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdBusinessOwner;
		}
	}

	@Override
	public void setStdBusinessOwner(String stdBusinessOwner) {
		_stdBusinessOwner = stdBusinessOwner;
	}

	@Override
	public String getStdStatus() {
		if (_stdStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdStatus;
		}
	}

	@Override
	public void setStdStatus(String stdStatus) {
		_stdStatus = stdStatus;
	}

	@Override
	public String getStdAuthor() {
		if (_stdAuthor == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdAuthor;
		}
	}

	@Override
	public void setStdAuthor(String stdAuthor) {
		_stdAuthor = stdAuthor;
	}

	@Override
	public String getStdCategory() {
		if (_stdCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdCategory;
		}
	}

	@Override
	public void setStdCategory(String stdCategory) {
		_stdCategory = stdCategory;
	}

	@Override
	public String getStdGlobal() {
		if (_stdGlobal == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdGlobal;
		}
	}

	@Override
	public void setStdGlobal(String stdGlobal) {
		_stdGlobal = stdGlobal;
	}

	@Override
	public String getStdRegionCode() {
		if (_stdRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdRegionCode;
		}
	}

	@Override
	public void setStdRegionCode(String stdRegionCode) {
		_stdRegionCode = stdRegionCode;
	}

	@Override
	public String getStdFramework() {
		if (_stdFramework == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdFramework;
		}
	}

	@Override
	public void setStdFramework(String stdFramework) {
		_stdFramework = stdFramework;
	}

	@Override
	public String getStdChange() {
		if (_stdChange == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdChange;
		}
	}

	@Override
	public void setStdChange(String stdChange) {
		_stdChange = stdChange;
	}

	@Override
	public String getStdCreatedBy() {
		if (_stdCreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdCreatedBy;
		}
	}

	@Override
	public void setStdCreatedBy(String stdCreatedBy) {
		_stdCreatedBy = stdCreatedBy;
	}

	@Override
	public Date getStdUpdatedDate() {
		return _stdUpdatedDate;
	}

	@Override
	public void setStdUpdatedDate(Date stdUpdatedDate) {
		_stdUpdatedDate = stdUpdatedDate;
	}

	@Override
	public long getStdImageCount() {
		return _stdImageCount;
	}

	@Override
	public void setStdImageCount(long stdImageCount) {
		_stdImageCount = stdImageCount;
	}

	@Override
	public String getStdImageTitle() {
		if (_stdImageTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdImageTitle;
		}
	}

	@Override
	public void setStdImageTitle(String stdImageTitle) {
		_stdImageTitle = stdImageTitle;
	}

	@Override
	public String getStdInternalReference() {
		if (_stdInternalReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdInternalReference;
		}
	}

	@Override
	public void setStdInternalReference(String stdInternalReference) {
		_stdInternalReference = stdInternalReference;
	}

	@Override
	public long getStdOrderNumber() {
		return _stdOrderNumber;
	}

	@Override
	public void setStdOrderNumber(long stdOrderNumber) {
		_stdOrderNumber = stdOrderNumber;
	}

	@Override
	public long getIndexId() {
		return _indexId;
	}

	@Override
	public void setIndexId(long indexId) {
		_indexId = indexId;
	}

	@Override
	public long getIndexOrigId() {
		return _indexOrigId;
	}

	@Override
	public void setIndexOrigId(long indexOrigId) {
		_indexOrigId = indexOrigId;
	}

	@Override
	public long getIndexPrntId() {
		return _indexPrntId;
	}

	@Override
	public void setIndexPrntId(long indexPrntId) {
		_indexPrntId = indexPrntId;
	}

	@Override
	public String getIndexTitle() {
		if (_indexTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _indexTitle;
		}
	}

	@Override
	public void setIndexTitle(String indexTitle) {
		_indexTitle = indexTitle;
	}

	@Override
	public long getIndexLevel() {
		return _indexLevel;
	}

	@Override
	public void setIndexLevel(long indexLevel) {
		_indexLevel = indexLevel;
	}

	@Override
	public long getIndexLevelSortOrder() {
		return _indexLevelSortOrder;
	}

	@Override
	public void setIndexLevelSortOrder(long indexLevelSortOrder) {
		_indexLevelSortOrder = indexLevelSortOrder;
	}

	@Override
	public String getIndexPath() {
		if (_indexPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _indexPath;
		}
	}

	@Override
	public void setIndexPath(String indexPath) {
		_indexPath = indexPath;
	}

	@Override
	public String getAuditLogComments() {
		if (_auditLogComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _auditLogComments;
		}
	}

	@Override
	public void setAuditLogComments(String auditLogComments) {
		_auditLogComments = auditLogComments;
	}

	@Override
	public String getAuditLogTitle() {
		if (_auditLogTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _auditLogTitle;
		}
	}

	@Override
	public void setAuditLogTitle(String auditLogTitle) {
		_auditLogTitle = auditLogTitle;
	}

	@Override
	public Date getAuditLogDate() {
		return _auditLogDate;
	}

	@Override
	public void setAuditLogDate(Date auditLogDate) {
		_auditLogDate = auditLogDate;
	}

	@Override
	public String getAuditLogStatus() {
		if (_auditLogStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _auditLogStatus;
		}
	}

	@Override
	public void setAuditLogStatus(String auditLogStatus) {
		_auditLogStatus = auditLogStatus;
	}

	@Override
	public String getAuditLogPrevStatus() {
		if (_auditLogPrevStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _auditLogPrevStatus;
		}
	}

	@Override
	public void setAuditLogPrevStatus(String auditLogPrevStatus) {
		_auditLogPrevStatus = auditLogPrevStatus;
	}

	@Override
	public String getHistManualDesc() {
		if (_histManualDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _histManualDesc;
		}
	}

	@Override
	public void setHistManualDesc(String histManualDesc) {
		_histManualDesc = histManualDesc;
	}

	@Override
	public String getSecLangIndexTitle() {
		if (_secLangIndexTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _secLangIndexTitle;
		}
	}

	@Override
	public void setSecLangIndexTitle(String secLangIndexTitle) {
		_secLangIndexTitle = secLangIndexTitle;
	}

	@Override
	public String getSecLangIndexDesc() {
		if (_secLangIndexDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _secLangIndexDesc;
		}
	}

	@Override
	public void setSecLangIndexDesc(String secLangIndexDesc) {
		_secLangIndexDesc = secLangIndexDesc;
	}

	@Override
	public String getSecLangIndexImgPath() {
		if (_secLangIndexImgPath == null) {
			return StringPool.BLANK;
		}
		else {
			return _secLangIndexImgPath;
		}
	}

	@Override
	public void setSecLangIndexImgPath(String secLangIndexImgPath) {
		_secLangIndexImgPath = secLangIndexImgPath;
	}

	@Override
	public String getSecLangStdTitle() {
		if (_secLangStdTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _secLangStdTitle;
		}
	}

	@Override
	public void setSecLangStdTitle(String secLangStdTitle) {
		_secLangStdTitle = secLangStdTitle;
	}

	@Override
	public String getSecLangStdDesc() {
		if (_secLangStdDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _secLangStdDesc;
		}
	}

	@Override
	public void setSecLangStdDesc(String secLangStdDesc) {
		_secLangStdDesc = secLangStdDesc;
	}

	@Override
	public String getBiChangeTypeCd() {
		if (_biChangeTypeCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biChangeTypeCd;
		}
	}

	@Override
	public void setBiChangeTypeCd(String biChangeTypeCd) {
		_biChangeTypeCd = biChangeTypeCd;
	}

	@Override
	public String getBiRegionCd() {
		if (_biRegionCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biRegionCd;
		}
	}

	@Override
	public void setBiRegionCd(String biRegionCd) {
		_biRegionCd = biRegionCd;
	}

	@Override
	public String getBiProfileLossImpactCd() {
		if (_biProfileLossImpactCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biProfileLossImpactCd;
		}
	}

	@Override
	public void setBiProfileLossImpactCd(String biProfileLossImpactCd) {
		_biProfileLossImpactCd = biProfileLossImpactCd;
	}

	@Override
	public String getBiCapExpenseImpactCd() {
		if (_biCapExpenseImpactCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biCapExpenseImpactCd;
		}
	}

	@Override
	public void setBiCapExpenseImpactCd(String biCapExpenseImpactCd) {
		_biCapExpenseImpactCd = biCapExpenseImpactCd;
	}

	@Override
	public String getBiImplTimeScaleCd() {
		if (_biImplTimeScaleCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biImplTimeScaleCd;
		}
	}

	@Override
	public void setBiImplTimeScaleCd(String biImplTimeScaleCd) {
		_biImplTimeScaleCd = biImplTimeScaleCd;
	}

	@Override
	public String getBiComments() {
		if (_biComments == null) {
			return StringPool.BLANK;
		}
		else {
			return _biComments;
		}
	}

	@Override
	public void setBiComments(String biComments) {
		_biComments = biComments;
	}

	@Override
	public String getBiBrandCd() {
		if (_biBrandCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _biBrandCd;
		}
	}

	@Override
	public void setBiBrandCd(String biBrandCd) {
		_biBrandCd = biBrandCd;
	}

	@Override
	public String getStdCrossReferences() {
		if (_stdCrossReferences == null) {
			return StringPool.BLANK;
		}
		else {
			return _stdCrossReferences;
		}
	}

	@Override
	public void setStdCrossReferences(String stdCrossReferences) {
		_stdCrossReferences = stdCrossReferences;
	}

	@Override
	public String getAuditBrand() {
		if (_auditBrand == null) {
			return StringPool.BLANK;
		}
		else {
			return _auditBrand;
		}
	}

	@Override
	public void setAuditBrand(String auditBrand) {
		_auditBrand = auditBrand;
	}

	@Override
	public long getGlobalRule() {
		return _globalRule;
	}

	@Override
	public void setGlobalRule(long globalRule) {
		_globalRule = globalRule;
	}

	@Override
	public long getAmeaRule() {
		return _ameaRule;
	}

	@Override
	public void setAmeaRule(long ameaRule) {
		_ameaRule = ameaRule;
	}

	@Override
	public long getAmerRule() {
		return _amerRule;
	}

	@Override
	public void setAmerRule(long amerRule) {
		_amerRule = amerRule;
	}

	@Override
	public long getEuroRule() {
		return _euroRule;
	}

	@Override
	public void setEuroRule(long euroRule) {
		_euroRule = euroRule;
	}

	@Override
	public long getGcRule() {
		return _gcRule;
	}

	@Override
	public void setGcRule(long gcRule) {
		_gcRule = gcRule;
	}

	@Override
	public String getExpires() {
		if (_expires == null) {
			return StringPool.BLANK;
		}
		else {
			return _expires;
		}
	}

	@Override
	public void setExpires(String expires) {
		_expires = expires;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsExt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsExtImpl standardsExtImpl = new StandardsExtImpl();

		standardsExtImpl.setStdId(getStdId());
		standardsExtImpl.setAuditLogId(getAuditLogId());
		standardsExtImpl.setStdManual(getStdManual());
		standardsExtImpl.setStdCorporateDepartment(getStdCorporateDepartment());
		standardsExtImpl.setStdBrandCd(getStdBrandCd());
		standardsExtImpl.setBiImpactAssmntId(getBiImpactAssmntId());
		standardsExtImpl.setStdCountryCd(getStdCountryCd());
		standardsExtImpl.setStdPrntId(getStdPrntId());
		standardsExtImpl.setStdOrigStdId(getStdOrigStdId());
		standardsExtImpl.setStdPubStatCd(getStdPubStatCd());
		standardsExtImpl.setStdType(getStdType());
		standardsExtImpl.setStdTitle(getStdTitle());
		standardsExtImpl.setStdDescription(getStdDescription());
		standardsExtImpl.setStdBusinessOwner(getStdBusinessOwner());
		standardsExtImpl.setStdStatus(getStdStatus());
		standardsExtImpl.setStdAuthor(getStdAuthor());
		standardsExtImpl.setStdCategory(getStdCategory());
		standardsExtImpl.setStdGlobal(getStdGlobal());
		standardsExtImpl.setStdRegionCode(getStdRegionCode());
		standardsExtImpl.setStdFramework(getStdFramework());
		standardsExtImpl.setStdChange(getStdChange());
		standardsExtImpl.setStdCreatedBy(getStdCreatedBy());
		standardsExtImpl.setStdUpdatedDate(getStdUpdatedDate());
		standardsExtImpl.setStdImageCount(getStdImageCount());
		standardsExtImpl.setStdImageTitle(getStdImageTitle());
		standardsExtImpl.setStdInternalReference(getStdInternalReference());
		standardsExtImpl.setStdOrderNumber(getStdOrderNumber());
		standardsExtImpl.setIndexId(getIndexId());
		standardsExtImpl.setIndexOrigId(getIndexOrigId());
		standardsExtImpl.setIndexPrntId(getIndexPrntId());
		standardsExtImpl.setIndexTitle(getIndexTitle());
		standardsExtImpl.setIndexLevel(getIndexLevel());
		standardsExtImpl.setIndexLevelSortOrder(getIndexLevelSortOrder());
		standardsExtImpl.setIndexPath(getIndexPath());
		standardsExtImpl.setAuditLogComments(getAuditLogComments());
		standardsExtImpl.setAuditLogTitle(getAuditLogTitle());
		standardsExtImpl.setAuditLogDate(getAuditLogDate());
		standardsExtImpl.setAuditLogStatus(getAuditLogStatus());
		standardsExtImpl.setAuditLogPrevStatus(getAuditLogPrevStatus());
		standardsExtImpl.setHistManualDesc(getHistManualDesc());
		standardsExtImpl.setSecLangIndexTitle(getSecLangIndexTitle());
		standardsExtImpl.setSecLangIndexDesc(getSecLangIndexDesc());
		standardsExtImpl.setSecLangIndexImgPath(getSecLangIndexImgPath());
		standardsExtImpl.setSecLangStdTitle(getSecLangStdTitle());
		standardsExtImpl.setSecLangStdDesc(getSecLangStdDesc());
		standardsExtImpl.setBiChangeTypeCd(getBiChangeTypeCd());
		standardsExtImpl.setBiRegionCd(getBiRegionCd());
		standardsExtImpl.setBiProfileLossImpactCd(getBiProfileLossImpactCd());
		standardsExtImpl.setBiCapExpenseImpactCd(getBiCapExpenseImpactCd());
		standardsExtImpl.setBiImplTimeScaleCd(getBiImplTimeScaleCd());
		standardsExtImpl.setBiComments(getBiComments());
		standardsExtImpl.setBiBrandCd(getBiBrandCd());
		standardsExtImpl.setStdCrossReferences(getStdCrossReferences());
		standardsExtImpl.setAuditBrand(getAuditBrand());
		standardsExtImpl.setGlobalRule(getGlobalRule());
		standardsExtImpl.setAmeaRule(getAmeaRule());
		standardsExtImpl.setAmerRule(getAmerRule());
		standardsExtImpl.setEuroRule(getEuroRule());
		standardsExtImpl.setGcRule(getGcRule());
		standardsExtImpl.setExpires(getExpires());

		standardsExtImpl.resetOriginalValues();

		return standardsExtImpl;
	}

	@Override
	public int compareTo(StandardsExt standardsExt) {
		StandardsExtPK primaryKey = standardsExt.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsExt)) {
			return false;
		}

		StandardsExt standardsExt = (StandardsExt)obj;

		StandardsExtPK primaryKey = standardsExt.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsExtModelImpl standardsExtModelImpl = this;

		standardsExtModelImpl._originalStdId = standardsExtModelImpl._stdId;

		standardsExtModelImpl._setOriginalStdId = false;

		standardsExtModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsExt> toCacheModel() {
		StandardsExtCacheModel standardsExtCacheModel = new StandardsExtCacheModel();

		standardsExtCacheModel.stdId = getStdId();

		standardsExtCacheModel.auditLogId = getAuditLogId();

		standardsExtCacheModel.stdManual = getStdManual();

		String stdManual = standardsExtCacheModel.stdManual;

		if ((stdManual != null) && (stdManual.length() == 0)) {
			standardsExtCacheModel.stdManual = null;
		}

		standardsExtCacheModel.stdCorporateDepartment = getStdCorporateDepartment();

		String stdCorporateDepartment = standardsExtCacheModel.stdCorporateDepartment;

		if ((stdCorporateDepartment != null) &&
				(stdCorporateDepartment.length() == 0)) {
			standardsExtCacheModel.stdCorporateDepartment = null;
		}

		standardsExtCacheModel.stdBrandCd = getStdBrandCd();

		String stdBrandCd = standardsExtCacheModel.stdBrandCd;

		if ((stdBrandCd != null) && (stdBrandCd.length() == 0)) {
			standardsExtCacheModel.stdBrandCd = null;
		}

		standardsExtCacheModel.biImpactAssmntId = getBiImpactAssmntId();

		standardsExtCacheModel.stdCountryCd = getStdCountryCd();

		String stdCountryCd = standardsExtCacheModel.stdCountryCd;

		if ((stdCountryCd != null) && (stdCountryCd.length() == 0)) {
			standardsExtCacheModel.stdCountryCd = null;
		}

		standardsExtCacheModel.stdPrntId = getStdPrntId();

		standardsExtCacheModel.stdOrigStdId = getStdOrigStdId();

		standardsExtCacheModel.stdPubStatCd = getStdPubStatCd();

		String stdPubStatCd = standardsExtCacheModel.stdPubStatCd;

		if ((stdPubStatCd != null) && (stdPubStatCd.length() == 0)) {
			standardsExtCacheModel.stdPubStatCd = null;
		}

		standardsExtCacheModel.stdType = getStdType();

		String stdType = standardsExtCacheModel.stdType;

		if ((stdType != null) && (stdType.length() == 0)) {
			standardsExtCacheModel.stdType = null;
		}

		standardsExtCacheModel.stdTitle = getStdTitle();

		String stdTitle = standardsExtCacheModel.stdTitle;

		if ((stdTitle != null) && (stdTitle.length() == 0)) {
			standardsExtCacheModel.stdTitle = null;
		}

		standardsExtCacheModel.stdDescription = getStdDescription();

		String stdDescription = standardsExtCacheModel.stdDescription;

		if ((stdDescription != null) && (stdDescription.length() == 0)) {
			standardsExtCacheModel.stdDescription = null;
		}

		standardsExtCacheModel.stdBusinessOwner = getStdBusinessOwner();

		String stdBusinessOwner = standardsExtCacheModel.stdBusinessOwner;

		if ((stdBusinessOwner != null) && (stdBusinessOwner.length() == 0)) {
			standardsExtCacheModel.stdBusinessOwner = null;
		}

		standardsExtCacheModel.stdStatus = getStdStatus();

		String stdStatus = standardsExtCacheModel.stdStatus;

		if ((stdStatus != null) && (stdStatus.length() == 0)) {
			standardsExtCacheModel.stdStatus = null;
		}

		standardsExtCacheModel.stdAuthor = getStdAuthor();

		String stdAuthor = standardsExtCacheModel.stdAuthor;

		if ((stdAuthor != null) && (stdAuthor.length() == 0)) {
			standardsExtCacheModel.stdAuthor = null;
		}

		standardsExtCacheModel.stdCategory = getStdCategory();

		String stdCategory = standardsExtCacheModel.stdCategory;

		if ((stdCategory != null) && (stdCategory.length() == 0)) {
			standardsExtCacheModel.stdCategory = null;
		}

		standardsExtCacheModel.stdGlobal = getStdGlobal();

		String stdGlobal = standardsExtCacheModel.stdGlobal;

		if ((stdGlobal != null) && (stdGlobal.length() == 0)) {
			standardsExtCacheModel.stdGlobal = null;
		}

		standardsExtCacheModel.stdRegionCode = getStdRegionCode();

		String stdRegionCode = standardsExtCacheModel.stdRegionCode;

		if ((stdRegionCode != null) && (stdRegionCode.length() == 0)) {
			standardsExtCacheModel.stdRegionCode = null;
		}

		standardsExtCacheModel.stdFramework = getStdFramework();

		String stdFramework = standardsExtCacheModel.stdFramework;

		if ((stdFramework != null) && (stdFramework.length() == 0)) {
			standardsExtCacheModel.stdFramework = null;
		}

		standardsExtCacheModel.stdChange = getStdChange();

		String stdChange = standardsExtCacheModel.stdChange;

		if ((stdChange != null) && (stdChange.length() == 0)) {
			standardsExtCacheModel.stdChange = null;
		}

		standardsExtCacheModel.stdCreatedBy = getStdCreatedBy();

		String stdCreatedBy = standardsExtCacheModel.stdCreatedBy;

		if ((stdCreatedBy != null) && (stdCreatedBy.length() == 0)) {
			standardsExtCacheModel.stdCreatedBy = null;
		}

		Date stdUpdatedDate = getStdUpdatedDate();

		if (stdUpdatedDate != null) {
			standardsExtCacheModel.stdUpdatedDate = stdUpdatedDate.getTime();
		}
		else {
			standardsExtCacheModel.stdUpdatedDate = Long.MIN_VALUE;
		}

		standardsExtCacheModel.stdImageCount = getStdImageCount();

		standardsExtCacheModel.stdImageTitle = getStdImageTitle();

		String stdImageTitle = standardsExtCacheModel.stdImageTitle;

		if ((stdImageTitle != null) && (stdImageTitle.length() == 0)) {
			standardsExtCacheModel.stdImageTitle = null;
		}

		standardsExtCacheModel.stdInternalReference = getStdInternalReference();

		String stdInternalReference = standardsExtCacheModel.stdInternalReference;

		if ((stdInternalReference != null) &&
				(stdInternalReference.length() == 0)) {
			standardsExtCacheModel.stdInternalReference = null;
		}

		standardsExtCacheModel.stdOrderNumber = getStdOrderNumber();

		standardsExtCacheModel.indexId = getIndexId();

		standardsExtCacheModel.indexOrigId = getIndexOrigId();

		standardsExtCacheModel.indexPrntId = getIndexPrntId();

		standardsExtCacheModel.indexTitle = getIndexTitle();

		String indexTitle = standardsExtCacheModel.indexTitle;

		if ((indexTitle != null) && (indexTitle.length() == 0)) {
			standardsExtCacheModel.indexTitle = null;
		}

		standardsExtCacheModel.indexLevel = getIndexLevel();

		standardsExtCacheModel.indexLevelSortOrder = getIndexLevelSortOrder();

		standardsExtCacheModel.indexPath = getIndexPath();

		String indexPath = standardsExtCacheModel.indexPath;

		if ((indexPath != null) && (indexPath.length() == 0)) {
			standardsExtCacheModel.indexPath = null;
		}

		standardsExtCacheModel.auditLogComments = getAuditLogComments();

		String auditLogComments = standardsExtCacheModel.auditLogComments;

		if ((auditLogComments != null) && (auditLogComments.length() == 0)) {
			standardsExtCacheModel.auditLogComments = null;
		}

		standardsExtCacheModel.auditLogTitle = getAuditLogTitle();

		String auditLogTitle = standardsExtCacheModel.auditLogTitle;

		if ((auditLogTitle != null) && (auditLogTitle.length() == 0)) {
			standardsExtCacheModel.auditLogTitle = null;
		}

		Date auditLogDate = getAuditLogDate();

		if (auditLogDate != null) {
			standardsExtCacheModel.auditLogDate = auditLogDate.getTime();
		}
		else {
			standardsExtCacheModel.auditLogDate = Long.MIN_VALUE;
		}

		standardsExtCacheModel.auditLogStatus = getAuditLogStatus();

		String auditLogStatus = standardsExtCacheModel.auditLogStatus;

		if ((auditLogStatus != null) && (auditLogStatus.length() == 0)) {
			standardsExtCacheModel.auditLogStatus = null;
		}

		standardsExtCacheModel.auditLogPrevStatus = getAuditLogPrevStatus();

		String auditLogPrevStatus = standardsExtCacheModel.auditLogPrevStatus;

		if ((auditLogPrevStatus != null) && (auditLogPrevStatus.length() == 0)) {
			standardsExtCacheModel.auditLogPrevStatus = null;
		}

		standardsExtCacheModel.histManualDesc = getHistManualDesc();

		String histManualDesc = standardsExtCacheModel.histManualDesc;

		if ((histManualDesc != null) && (histManualDesc.length() == 0)) {
			standardsExtCacheModel.histManualDesc = null;
		}

		standardsExtCacheModel.secLangIndexTitle = getSecLangIndexTitle();

		String secLangIndexTitle = standardsExtCacheModel.secLangIndexTitle;

		if ((secLangIndexTitle != null) && (secLangIndexTitle.length() == 0)) {
			standardsExtCacheModel.secLangIndexTitle = null;
		}

		standardsExtCacheModel.secLangIndexDesc = getSecLangIndexDesc();

		String secLangIndexDesc = standardsExtCacheModel.secLangIndexDesc;

		if ((secLangIndexDesc != null) && (secLangIndexDesc.length() == 0)) {
			standardsExtCacheModel.secLangIndexDesc = null;
		}

		standardsExtCacheModel.secLangIndexImgPath = getSecLangIndexImgPath();

		String secLangIndexImgPath = standardsExtCacheModel.secLangIndexImgPath;

		if ((secLangIndexImgPath != null) &&
				(secLangIndexImgPath.length() == 0)) {
			standardsExtCacheModel.secLangIndexImgPath = null;
		}

		standardsExtCacheModel.secLangStdTitle = getSecLangStdTitle();

		String secLangStdTitle = standardsExtCacheModel.secLangStdTitle;

		if ((secLangStdTitle != null) && (secLangStdTitle.length() == 0)) {
			standardsExtCacheModel.secLangStdTitle = null;
		}

		standardsExtCacheModel.secLangStdDesc = getSecLangStdDesc();

		String secLangStdDesc = standardsExtCacheModel.secLangStdDesc;

		if ((secLangStdDesc != null) && (secLangStdDesc.length() == 0)) {
			standardsExtCacheModel.secLangStdDesc = null;
		}

		standardsExtCacheModel.biChangeTypeCd = getBiChangeTypeCd();

		String biChangeTypeCd = standardsExtCacheModel.biChangeTypeCd;

		if ((biChangeTypeCd != null) && (biChangeTypeCd.length() == 0)) {
			standardsExtCacheModel.biChangeTypeCd = null;
		}

		standardsExtCacheModel.biRegionCd = getBiRegionCd();

		String biRegionCd = standardsExtCacheModel.biRegionCd;

		if ((biRegionCd != null) && (biRegionCd.length() == 0)) {
			standardsExtCacheModel.biRegionCd = null;
		}

		standardsExtCacheModel.biProfileLossImpactCd = getBiProfileLossImpactCd();

		String biProfileLossImpactCd = standardsExtCacheModel.biProfileLossImpactCd;

		if ((biProfileLossImpactCd != null) &&
				(biProfileLossImpactCd.length() == 0)) {
			standardsExtCacheModel.biProfileLossImpactCd = null;
		}

		standardsExtCacheModel.biCapExpenseImpactCd = getBiCapExpenseImpactCd();

		String biCapExpenseImpactCd = standardsExtCacheModel.biCapExpenseImpactCd;

		if ((biCapExpenseImpactCd != null) &&
				(biCapExpenseImpactCd.length() == 0)) {
			standardsExtCacheModel.biCapExpenseImpactCd = null;
		}

		standardsExtCacheModel.biImplTimeScaleCd = getBiImplTimeScaleCd();

		String biImplTimeScaleCd = standardsExtCacheModel.biImplTimeScaleCd;

		if ((biImplTimeScaleCd != null) && (biImplTimeScaleCd.length() == 0)) {
			standardsExtCacheModel.biImplTimeScaleCd = null;
		}

		standardsExtCacheModel.biComments = getBiComments();

		String biComments = standardsExtCacheModel.biComments;

		if ((biComments != null) && (biComments.length() == 0)) {
			standardsExtCacheModel.biComments = null;
		}

		standardsExtCacheModel.biBrandCd = getBiBrandCd();

		String biBrandCd = standardsExtCacheModel.biBrandCd;

		if ((biBrandCd != null) && (biBrandCd.length() == 0)) {
			standardsExtCacheModel.biBrandCd = null;
		}

		standardsExtCacheModel.stdCrossReferences = getStdCrossReferences();

		String stdCrossReferences = standardsExtCacheModel.stdCrossReferences;

		if ((stdCrossReferences != null) && (stdCrossReferences.length() == 0)) {
			standardsExtCacheModel.stdCrossReferences = null;
		}

		standardsExtCacheModel.auditBrand = getAuditBrand();

		String auditBrand = standardsExtCacheModel.auditBrand;

		if ((auditBrand != null) && (auditBrand.length() == 0)) {
			standardsExtCacheModel.auditBrand = null;
		}

		standardsExtCacheModel.globalRule = getGlobalRule();

		standardsExtCacheModel.ameaRule = getAmeaRule();

		standardsExtCacheModel.amerRule = getAmerRule();

		standardsExtCacheModel.euroRule = getEuroRule();

		standardsExtCacheModel.gcRule = getGcRule();

		standardsExtCacheModel.expires = getExpires();

		String expires = standardsExtCacheModel.expires;

		if ((expires != null) && (expires.length() == 0)) {
			standardsExtCacheModel.expires = null;
		}

		return standardsExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(121);

		sb.append("{stdId=");
		sb.append(getStdId());
		sb.append(", auditLogId=");
		sb.append(getAuditLogId());
		sb.append(", stdManual=");
		sb.append(getStdManual());
		sb.append(", stdCorporateDepartment=");
		sb.append(getStdCorporateDepartment());
		sb.append(", stdBrandCd=");
		sb.append(getStdBrandCd());
		sb.append(", biImpactAssmntId=");
		sb.append(getBiImpactAssmntId());
		sb.append(", stdCountryCd=");
		sb.append(getStdCountryCd());
		sb.append(", stdPrntId=");
		sb.append(getStdPrntId());
		sb.append(", stdOrigStdId=");
		sb.append(getStdOrigStdId());
		sb.append(", stdPubStatCd=");
		sb.append(getStdPubStatCd());
		sb.append(", stdType=");
		sb.append(getStdType());
		sb.append(", stdTitle=");
		sb.append(getStdTitle());
		sb.append(", stdDescription=");
		sb.append(getStdDescription());
		sb.append(", stdBusinessOwner=");
		sb.append(getStdBusinessOwner());
		sb.append(", stdStatus=");
		sb.append(getStdStatus());
		sb.append(", stdAuthor=");
		sb.append(getStdAuthor());
		sb.append(", stdCategory=");
		sb.append(getStdCategory());
		sb.append(", stdGlobal=");
		sb.append(getStdGlobal());
		sb.append(", stdRegionCode=");
		sb.append(getStdRegionCode());
		sb.append(", stdFramework=");
		sb.append(getStdFramework());
		sb.append(", stdChange=");
		sb.append(getStdChange());
		sb.append(", stdCreatedBy=");
		sb.append(getStdCreatedBy());
		sb.append(", stdUpdatedDate=");
		sb.append(getStdUpdatedDate());
		sb.append(", stdImageCount=");
		sb.append(getStdImageCount());
		sb.append(", stdImageTitle=");
		sb.append(getStdImageTitle());
		sb.append(", stdInternalReference=");
		sb.append(getStdInternalReference());
		sb.append(", stdOrderNumber=");
		sb.append(getStdOrderNumber());
		sb.append(", indexId=");
		sb.append(getIndexId());
		sb.append(", indexOrigId=");
		sb.append(getIndexOrigId());
		sb.append(", indexPrntId=");
		sb.append(getIndexPrntId());
		sb.append(", indexTitle=");
		sb.append(getIndexTitle());
		sb.append(", indexLevel=");
		sb.append(getIndexLevel());
		sb.append(", indexLevelSortOrder=");
		sb.append(getIndexLevelSortOrder());
		sb.append(", indexPath=");
		sb.append(getIndexPath());
		sb.append(", auditLogComments=");
		sb.append(getAuditLogComments());
		sb.append(", auditLogTitle=");
		sb.append(getAuditLogTitle());
		sb.append(", auditLogDate=");
		sb.append(getAuditLogDate());
		sb.append(", auditLogStatus=");
		sb.append(getAuditLogStatus());
		sb.append(", auditLogPrevStatus=");
		sb.append(getAuditLogPrevStatus());
		sb.append(", histManualDesc=");
		sb.append(getHistManualDesc());
		sb.append(", secLangIndexTitle=");
		sb.append(getSecLangIndexTitle());
		sb.append(", secLangIndexDesc=");
		sb.append(getSecLangIndexDesc());
		sb.append(", secLangIndexImgPath=");
		sb.append(getSecLangIndexImgPath());
		sb.append(", secLangStdTitle=");
		sb.append(getSecLangStdTitle());
		sb.append(", secLangStdDesc=");
		sb.append(getSecLangStdDesc());
		sb.append(", biChangeTypeCd=");
		sb.append(getBiChangeTypeCd());
		sb.append(", biRegionCd=");
		sb.append(getBiRegionCd());
		sb.append(", biProfileLossImpactCd=");
		sb.append(getBiProfileLossImpactCd());
		sb.append(", biCapExpenseImpactCd=");
		sb.append(getBiCapExpenseImpactCd());
		sb.append(", biImplTimeScaleCd=");
		sb.append(getBiImplTimeScaleCd());
		sb.append(", biComments=");
		sb.append(getBiComments());
		sb.append(", biBrandCd=");
		sb.append(getBiBrandCd());
		sb.append(", stdCrossReferences=");
		sb.append(getStdCrossReferences());
		sb.append(", auditBrand=");
		sb.append(getAuditBrand());
		sb.append(", globalRule=");
		sb.append(getGlobalRule());
		sb.append(", ameaRule=");
		sb.append(getAmeaRule());
		sb.append(", amerRule=");
		sb.append(getAmerRule());
		sb.append(", euroRule=");
		sb.append(getEuroRule());
		sb.append(", gcRule=");
		sb.append(getGcRule());
		sb.append(", expires=");
		sb.append(getExpires());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(184);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogId</column-name><column-value><![CDATA[");
		sb.append(getAuditLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdManual</column-name><column-value><![CDATA[");
		sb.append(getStdManual());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdCorporateDepartment</column-name><column-value><![CDATA[");
		sb.append(getStdCorporateDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdBrandCd</column-name><column-value><![CDATA[");
		sb.append(getStdBrandCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biImpactAssmntId</column-name><column-value><![CDATA[");
		sb.append(getBiImpactAssmntId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdCountryCd</column-name><column-value><![CDATA[");
		sb.append(getStdCountryCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdPrntId</column-name><column-value><![CDATA[");
		sb.append(getStdPrntId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdOrigStdId</column-name><column-value><![CDATA[");
		sb.append(getStdOrigStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdPubStatCd</column-name><column-value><![CDATA[");
		sb.append(getStdPubStatCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdType</column-name><column-value><![CDATA[");
		sb.append(getStdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdTitle</column-name><column-value><![CDATA[");
		sb.append(getStdTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdDescription</column-name><column-value><![CDATA[");
		sb.append(getStdDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdBusinessOwner</column-name><column-value><![CDATA[");
		sb.append(getStdBusinessOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdStatus</column-name><column-value><![CDATA[");
		sb.append(getStdStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdAuthor</column-name><column-value><![CDATA[");
		sb.append(getStdAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdCategory</column-name><column-value><![CDATA[");
		sb.append(getStdCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdGlobal</column-name><column-value><![CDATA[");
		sb.append(getStdGlobal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdRegionCode</column-name><column-value><![CDATA[");
		sb.append(getStdRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdFramework</column-name><column-value><![CDATA[");
		sb.append(getStdFramework());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdChange</column-name><column-value><![CDATA[");
		sb.append(getStdChange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdCreatedBy</column-name><column-value><![CDATA[");
		sb.append(getStdCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdUpdatedDate</column-name><column-value><![CDATA[");
		sb.append(getStdUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdImageCount</column-name><column-value><![CDATA[");
		sb.append(getStdImageCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdImageTitle</column-name><column-value><![CDATA[");
		sb.append(getStdImageTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdInternalReference</column-name><column-value><![CDATA[");
		sb.append(getStdInternalReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getStdOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexId</column-name><column-value><![CDATA[");
		sb.append(getIndexId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexOrigId</column-name><column-value><![CDATA[");
		sb.append(getIndexOrigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexPrntId</column-name><column-value><![CDATA[");
		sb.append(getIndexPrntId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexTitle</column-name><column-value><![CDATA[");
		sb.append(getIndexTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexLevel</column-name><column-value><![CDATA[");
		sb.append(getIndexLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexLevelSortOrder</column-name><column-value><![CDATA[");
		sb.append(getIndexLevelSortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexPath</column-name><column-value><![CDATA[");
		sb.append(getIndexPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogComments</column-name><column-value><![CDATA[");
		sb.append(getAuditLogComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogTitle</column-name><column-value><![CDATA[");
		sb.append(getAuditLogTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogDate</column-name><column-value><![CDATA[");
		sb.append(getAuditLogDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogStatus</column-name><column-value><![CDATA[");
		sb.append(getAuditLogStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditLogPrevStatus</column-name><column-value><![CDATA[");
		sb.append(getAuditLogPrevStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>histManualDesc</column-name><column-value><![CDATA[");
		sb.append(getHistManualDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secLangIndexTitle</column-name><column-value><![CDATA[");
		sb.append(getSecLangIndexTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secLangIndexDesc</column-name><column-value><![CDATA[");
		sb.append(getSecLangIndexDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secLangIndexImgPath</column-name><column-value><![CDATA[");
		sb.append(getSecLangIndexImgPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secLangStdTitle</column-name><column-value><![CDATA[");
		sb.append(getSecLangStdTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secLangStdDesc</column-name><column-value><![CDATA[");
		sb.append(getSecLangStdDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biChangeTypeCd</column-name><column-value><![CDATA[");
		sb.append(getBiChangeTypeCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biRegionCd</column-name><column-value><![CDATA[");
		sb.append(getBiRegionCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biProfileLossImpactCd</column-name><column-value><![CDATA[");
		sb.append(getBiProfileLossImpactCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biCapExpenseImpactCd</column-name><column-value><![CDATA[");
		sb.append(getBiCapExpenseImpactCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biImplTimeScaleCd</column-name><column-value><![CDATA[");
		sb.append(getBiImplTimeScaleCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biComments</column-name><column-value><![CDATA[");
		sb.append(getBiComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biBrandCd</column-name><column-value><![CDATA[");
		sb.append(getBiBrandCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdCrossReferences</column-name><column-value><![CDATA[");
		sb.append(getStdCrossReferences());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditBrand</column-name><column-value><![CDATA[");
		sb.append(getAuditBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>globalRule</column-name><column-value><![CDATA[");
		sb.append(getGlobalRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ameaRule</column-name><column-value><![CDATA[");
		sb.append(getAmeaRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amerRule</column-name><column-value><![CDATA[");
		sb.append(getAmerRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>euroRule</column-name><column-value><![CDATA[");
		sb.append(getEuroRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gcRule</column-name><column-value><![CDATA[");
		sb.append(getGcRule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expires</column-name><column-value><![CDATA[");
		sb.append(getExpires());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsExt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsExt.class
		};
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private long _auditLogId;
	private String _stdManual;
	private String _stdCorporateDepartment;
	private String _stdBrandCd;
	private long _biImpactAssmntId;
	private String _stdCountryCd;
	private long _stdPrntId;
	private long _stdOrigStdId;
	private String _stdPubStatCd;
	private String _stdType;
	private String _stdTitle;
	private String _stdDescription;
	private String _stdBusinessOwner;
	private String _stdStatus;
	private String _stdAuthor;
	private String _stdCategory;
	private String _stdGlobal;
	private String _stdRegionCode;
	private String _stdFramework;
	private String _stdChange;
	private String _stdCreatedBy;
	private Date _stdUpdatedDate;
	private long _stdImageCount;
	private String _stdImageTitle;
	private String _stdInternalReference;
	private long _stdOrderNumber;
	private long _indexId;
	private long _indexOrigId;
	private long _indexPrntId;
	private String _indexTitle;
	private long _indexLevel;
	private long _indexLevelSortOrder;
	private String _indexPath;
	private String _auditLogComments;
	private String _auditLogTitle;
	private Date _auditLogDate;
	private String _auditLogStatus;
	private String _auditLogPrevStatus;
	private String _histManualDesc;
	private String _secLangIndexTitle;
	private String _secLangIndexDesc;
	private String _secLangIndexImgPath;
	private String _secLangStdTitle;
	private String _secLangStdDesc;
	private String _biChangeTypeCd;
	private String _biRegionCd;
	private String _biProfileLossImpactCd;
	private String _biCapExpenseImpactCd;
	private String _biImplTimeScaleCd;
	private String _biComments;
	private String _biBrandCd;
	private String _stdCrossReferences;
	private String _auditBrand;
	private long _globalRule;
	private long _ameaRule;
	private long _amerRule;
	private long _euroRule;
	private long _gcRule;
	private String _expires;
	private long _columnBitmask;
	private StandardsExt _escapedModel;
}