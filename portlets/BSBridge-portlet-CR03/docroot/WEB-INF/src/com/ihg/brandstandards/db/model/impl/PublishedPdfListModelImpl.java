/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.PublishedPdfList;
import com.ihg.brandstandards.db.model.PublishedPdfListModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PublishedPdfList service. Represents a row in the &quot;PUBLISHED_PDF_LIST&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.PublishedPdfListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublishedPdfListImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see PublishedPdfListImpl
 * @see com.ihg.brandstandards.db.model.PublishedPdfList
 * @see com.ihg.brandstandards.db.model.PublishedPdfListModel
 * @generated
 */
public class PublishedPdfListModelImpl extends BaseModelImpl<PublishedPdfList>
	implements PublishedPdfListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a published pdf list model instance should use the {@link com.ihg.brandstandards.db.model.PublishedPdfList} interface instead.
	 */
	public static final String TABLE_NAME = "PUBLISHED_PDF_LIST";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PDF_ID", Types.BIGINT },
			{ "PDF_CHAIN_CD", Types.VARCHAR },
			{ "PDF_CTRY_CD", Types.VARCHAR },
			{ "PDF_BUILD_TYP", Types.VARCHAR },
			{ "PDF_YR_NBR", Types.INTEGER },
			{ "PDF_LOCALE_CD", Types.VARCHAR },
			{ "PDF_VER_NBR", Types.BIGINT },
			{ "PDF_FILE_NM", Types.VARCHAR },
			{ "PDF_FILE_URL_TXT", Types.VARCHAR },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "PAGE_SIZE_ORIENTATION_TYP", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table PUBLISHED_PDF_LIST (PDF_ID LONG not null primary key,PDF_CHAIN_CD VARCHAR(75) null,PDF_CTRY_CD VARCHAR(75) null,PDF_BUILD_TYP VARCHAR(75) null,PDF_YR_NBR INTEGER,PDF_LOCALE_CD VARCHAR(75) null,PDF_VER_NBR LONG,PDF_FILE_NM VARCHAR(75) null,PDF_FILE_URL_TXT VARCHAR(75) null,PUBLISH_ID LONG,PAGE_SIZE_ORIENTATION_TYP VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PUBLISHED_PDF_LIST";
	public static final String ORDER_BY_JPQL = " ORDER BY publishedPdfList.updatedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PUBLISHED_PDF_LIST.LST_UPDT_TS ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.PublishedPdfList"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.PublishedPdfList"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.PublishedPdfList"),
			true);
	public static long PAGESIZEORIENTATIONTYPE_COLUMN_BITMASK = 1L;
	public static long PDFBUILDTYPE_COLUMN_BITMASK = 2L;
	public static long PDFCHAINCODE_COLUMN_BITMASK = 4L;
	public static long PDFCTRYCODE_COLUMN_BITMASK = 8L;
	public static long PDFFILENAME_COLUMN_BITMASK = 16L;
	public static long PDFFILEURLTEXT_COLUMN_BITMASK = 32L;
	public static long PDFID_COLUMN_BITMASK = 64L;
	public static long PDFLOCALECODE_COLUMN_BITMASK = 128L;
	public static long PUBLISHID_COLUMN_BITMASK = 256L;
	public static long UPDATEDDATE_COLUMN_BITMASK = 512L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.PublishedPdfList"));

	public PublishedPdfListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pdfId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPdfId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pdfId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublishedPdfList.class;
	}

	@Override
	public String getModelClassName() {
		return PublishedPdfList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("pdfId", getPdfId());
		attributes.put("pdfChainCode", getPdfChainCode());
		attributes.put("pdfCtryCode", getPdfCtryCode());
		attributes.put("pdfBuildType", getPdfBuildType());
		attributes.put("pdfYearNumber", getPdfYearNumber());
		attributes.put("pdfLocaleCode", getPdfLocaleCode());
		attributes.put("pdfVersionNumber", getPdfVersionNumber());
		attributes.put("pdfFileName", getPdfFileName());
		attributes.put("pdfFileURLText", getPdfFileURLText());
		attributes.put("publishId", getPublishId());
		attributes.put("pageSizeOrientationType", getPageSizeOrientationType());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long pdfId = (Long)attributes.get("pdfId");

		if (pdfId != null) {
			setPdfId(pdfId);
		}

		String pdfChainCode = (String)attributes.get("pdfChainCode");

		if (pdfChainCode != null) {
			setPdfChainCode(pdfChainCode);
		}

		String pdfCtryCode = (String)attributes.get("pdfCtryCode");

		if (pdfCtryCode != null) {
			setPdfCtryCode(pdfCtryCode);
		}

		String pdfBuildType = (String)attributes.get("pdfBuildType");

		if (pdfBuildType != null) {
			setPdfBuildType(pdfBuildType);
		}

		Integer pdfYearNumber = (Integer)attributes.get("pdfYearNumber");

		if (pdfYearNumber != null) {
			setPdfYearNumber(pdfYearNumber);
		}

		String pdfLocaleCode = (String)attributes.get("pdfLocaleCode");

		if (pdfLocaleCode != null) {
			setPdfLocaleCode(pdfLocaleCode);
		}

		Long pdfVersionNumber = (Long)attributes.get("pdfVersionNumber");

		if (pdfVersionNumber != null) {
			setPdfVersionNumber(pdfVersionNumber);
		}

		String pdfFileName = (String)attributes.get("pdfFileName");

		if (pdfFileName != null) {
			setPdfFileName(pdfFileName);
		}

		String pdfFileURLText = (String)attributes.get("pdfFileURLText");

		if (pdfFileURLText != null) {
			setPdfFileURLText(pdfFileURLText);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		String pageSizeOrientationType = (String)attributes.get(
				"pageSizeOrientationType");

		if (pageSizeOrientationType != null) {
			setPageSizeOrientationType(pageSizeOrientationType);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPdfId() {
		return _pdfId;
	}

	@Override
	public void setPdfId(long pdfId) {
		_columnBitmask |= PDFID_COLUMN_BITMASK;

		if (!_setOriginalPdfId) {
			_setOriginalPdfId = true;

			_originalPdfId = _pdfId;
		}

		_pdfId = pdfId;
	}

	public long getOriginalPdfId() {
		return _originalPdfId;
	}

	@Override
	public String getPdfChainCode() {
		if (_pdfChainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfChainCode;
		}
	}

	@Override
	public void setPdfChainCode(String pdfChainCode) {
		_columnBitmask |= PDFCHAINCODE_COLUMN_BITMASK;

		if (_originalPdfChainCode == null) {
			_originalPdfChainCode = _pdfChainCode;
		}

		_pdfChainCode = pdfChainCode;
	}

	public String getOriginalPdfChainCode() {
		return GetterUtil.getString(_originalPdfChainCode);
	}

	@Override
	public String getPdfCtryCode() {
		if (_pdfCtryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfCtryCode;
		}
	}

	@Override
	public void setPdfCtryCode(String pdfCtryCode) {
		_columnBitmask |= PDFCTRYCODE_COLUMN_BITMASK;

		if (_originalPdfCtryCode == null) {
			_originalPdfCtryCode = _pdfCtryCode;
		}

		_pdfCtryCode = pdfCtryCode;
	}

	public String getOriginalPdfCtryCode() {
		return GetterUtil.getString(_originalPdfCtryCode);
	}

	@Override
	public String getPdfBuildType() {
		if (_pdfBuildType == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfBuildType;
		}
	}

	@Override
	public void setPdfBuildType(String pdfBuildType) {
		_columnBitmask |= PDFBUILDTYPE_COLUMN_BITMASK;

		if (_originalPdfBuildType == null) {
			_originalPdfBuildType = _pdfBuildType;
		}

		_pdfBuildType = pdfBuildType;
	}

	public String getOriginalPdfBuildType() {
		return GetterUtil.getString(_originalPdfBuildType);
	}

	@Override
	public int getPdfYearNumber() {
		return _pdfYearNumber;
	}

	@Override
	public void setPdfYearNumber(int pdfYearNumber) {
		_pdfYearNumber = pdfYearNumber;
	}

	@Override
	public String getPdfLocaleCode() {
		if (_pdfLocaleCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfLocaleCode;
		}
	}

	@Override
	public void setPdfLocaleCode(String pdfLocaleCode) {
		_columnBitmask |= PDFLOCALECODE_COLUMN_BITMASK;

		if (_originalPdfLocaleCode == null) {
			_originalPdfLocaleCode = _pdfLocaleCode;
		}

		_pdfLocaleCode = pdfLocaleCode;
	}

	public String getOriginalPdfLocaleCode() {
		return GetterUtil.getString(_originalPdfLocaleCode);
	}

	@Override
	public long getPdfVersionNumber() {
		return _pdfVersionNumber;
	}

	@Override
	public void setPdfVersionNumber(long pdfVersionNumber) {
		_pdfVersionNumber = pdfVersionNumber;
	}

	@Override
	public String getPdfFileName() {
		if (_pdfFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfFileName;
		}
	}

	@Override
	public void setPdfFileName(String pdfFileName) {
		_columnBitmask |= PDFFILENAME_COLUMN_BITMASK;

		if (_originalPdfFileName == null) {
			_originalPdfFileName = _pdfFileName;
		}

		_pdfFileName = pdfFileName;
	}

	public String getOriginalPdfFileName() {
		return GetterUtil.getString(_originalPdfFileName);
	}

	@Override
	public String getPdfFileURLText() {
		if (_pdfFileURLText == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdfFileURLText;
		}
	}

	@Override
	public void setPdfFileURLText(String pdfFileURLText) {
		_columnBitmask |= PDFFILEURLTEXT_COLUMN_BITMASK;

		if (_originalPdfFileURLText == null) {
			_originalPdfFileURLText = _pdfFileURLText;
		}

		_pdfFileURLText = pdfFileURLText;
	}

	public String getOriginalPdfFileURLText() {
		return GetterUtil.getString(_originalPdfFileURLText);
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public String getPageSizeOrientationType() {
		if (_pageSizeOrientationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageSizeOrientationType;
		}
	}

	@Override
	public void setPageSizeOrientationType(String pageSizeOrientationType) {
		_columnBitmask |= PAGESIZEORIENTATIONTYPE_COLUMN_BITMASK;

		if (_originalPageSizeOrientationType == null) {
			_originalPageSizeOrientationType = _pageSizeOrientationType;
		}

		_pageSizeOrientationType = pageSizeOrientationType;
	}

	public String getOriginalPageSizeOrientationType() {
		return GetterUtil.getString(_originalPageSizeOrientationType);
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_columnBitmask = -1L;

		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublishedPdfList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PublishedPdfList toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublishedPdfList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublishedPdfListImpl publishedPdfListImpl = new PublishedPdfListImpl();

		publishedPdfListImpl.setPdfId(getPdfId());
		publishedPdfListImpl.setPdfChainCode(getPdfChainCode());
		publishedPdfListImpl.setPdfCtryCode(getPdfCtryCode());
		publishedPdfListImpl.setPdfBuildType(getPdfBuildType());
		publishedPdfListImpl.setPdfYearNumber(getPdfYearNumber());
		publishedPdfListImpl.setPdfLocaleCode(getPdfLocaleCode());
		publishedPdfListImpl.setPdfVersionNumber(getPdfVersionNumber());
		publishedPdfListImpl.setPdfFileName(getPdfFileName());
		publishedPdfListImpl.setPdfFileURLText(getPdfFileURLText());
		publishedPdfListImpl.setPublishId(getPublishId());
		publishedPdfListImpl.setPageSizeOrientationType(getPageSizeOrientationType());
		publishedPdfListImpl.setCreatedBy(getCreatedBy());
		publishedPdfListImpl.setCreatedDate(getCreatedDate());
		publishedPdfListImpl.setUpdatedBy(getUpdatedBy());
		publishedPdfListImpl.setUpdatedDate(getUpdatedDate());

		publishedPdfListImpl.resetOriginalValues();

		return publishedPdfListImpl;
	}

	@Override
	public int compareTo(PublishedPdfList publishedPdfList) {
		int value = 0;

		value = DateUtil.compareTo(getUpdatedDate(),
				publishedPdfList.getUpdatedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublishedPdfList)) {
			return false;
		}

		PublishedPdfList publishedPdfList = (PublishedPdfList)obj;

		long primaryKey = publishedPdfList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PublishedPdfListModelImpl publishedPdfListModelImpl = this;

		publishedPdfListModelImpl._originalPdfId = publishedPdfListModelImpl._pdfId;

		publishedPdfListModelImpl._setOriginalPdfId = false;

		publishedPdfListModelImpl._originalPdfChainCode = publishedPdfListModelImpl._pdfChainCode;

		publishedPdfListModelImpl._originalPdfCtryCode = publishedPdfListModelImpl._pdfCtryCode;

		publishedPdfListModelImpl._originalPdfBuildType = publishedPdfListModelImpl._pdfBuildType;

		publishedPdfListModelImpl._originalPdfLocaleCode = publishedPdfListModelImpl._pdfLocaleCode;

		publishedPdfListModelImpl._originalPdfFileName = publishedPdfListModelImpl._pdfFileName;

		publishedPdfListModelImpl._originalPdfFileURLText = publishedPdfListModelImpl._pdfFileURLText;

		publishedPdfListModelImpl._originalPublishId = publishedPdfListModelImpl._publishId;

		publishedPdfListModelImpl._setOriginalPublishId = false;

		publishedPdfListModelImpl._originalPageSizeOrientationType = publishedPdfListModelImpl._pageSizeOrientationType;

		publishedPdfListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PublishedPdfList> toCacheModel() {
		PublishedPdfListCacheModel publishedPdfListCacheModel = new PublishedPdfListCacheModel();

		publishedPdfListCacheModel.pdfId = getPdfId();

		publishedPdfListCacheModel.pdfChainCode = getPdfChainCode();

		String pdfChainCode = publishedPdfListCacheModel.pdfChainCode;

		if ((pdfChainCode != null) && (pdfChainCode.length() == 0)) {
			publishedPdfListCacheModel.pdfChainCode = null;
		}

		publishedPdfListCacheModel.pdfCtryCode = getPdfCtryCode();

		String pdfCtryCode = publishedPdfListCacheModel.pdfCtryCode;

		if ((pdfCtryCode != null) && (pdfCtryCode.length() == 0)) {
			publishedPdfListCacheModel.pdfCtryCode = null;
		}

		publishedPdfListCacheModel.pdfBuildType = getPdfBuildType();

		String pdfBuildType = publishedPdfListCacheModel.pdfBuildType;

		if ((pdfBuildType != null) && (pdfBuildType.length() == 0)) {
			publishedPdfListCacheModel.pdfBuildType = null;
		}

		publishedPdfListCacheModel.pdfYearNumber = getPdfYearNumber();

		publishedPdfListCacheModel.pdfLocaleCode = getPdfLocaleCode();

		String pdfLocaleCode = publishedPdfListCacheModel.pdfLocaleCode;

		if ((pdfLocaleCode != null) && (pdfLocaleCode.length() == 0)) {
			publishedPdfListCacheModel.pdfLocaleCode = null;
		}

		publishedPdfListCacheModel.pdfVersionNumber = getPdfVersionNumber();

		publishedPdfListCacheModel.pdfFileName = getPdfFileName();

		String pdfFileName = publishedPdfListCacheModel.pdfFileName;

		if ((pdfFileName != null) && (pdfFileName.length() == 0)) {
			publishedPdfListCacheModel.pdfFileName = null;
		}

		publishedPdfListCacheModel.pdfFileURLText = getPdfFileURLText();

		String pdfFileURLText = publishedPdfListCacheModel.pdfFileURLText;

		if ((pdfFileURLText != null) && (pdfFileURLText.length() == 0)) {
			publishedPdfListCacheModel.pdfFileURLText = null;
		}

		publishedPdfListCacheModel.publishId = getPublishId();

		publishedPdfListCacheModel.pageSizeOrientationType = getPageSizeOrientationType();

		String pageSizeOrientationType = publishedPdfListCacheModel.pageSizeOrientationType;

		if ((pageSizeOrientationType != null) &&
				(pageSizeOrientationType.length() == 0)) {
			publishedPdfListCacheModel.pageSizeOrientationType = null;
		}

		publishedPdfListCacheModel.createdBy = getCreatedBy();

		String createdBy = publishedPdfListCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			publishedPdfListCacheModel.createdBy = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			publishedPdfListCacheModel.createdDate = createdDate.getTime();
		}
		else {
			publishedPdfListCacheModel.createdDate = Long.MIN_VALUE;
		}

		publishedPdfListCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = publishedPdfListCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			publishedPdfListCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			publishedPdfListCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			publishedPdfListCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return publishedPdfListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{pdfId=");
		sb.append(getPdfId());
		sb.append(", pdfChainCode=");
		sb.append(getPdfChainCode());
		sb.append(", pdfCtryCode=");
		sb.append(getPdfCtryCode());
		sb.append(", pdfBuildType=");
		sb.append(getPdfBuildType());
		sb.append(", pdfYearNumber=");
		sb.append(getPdfYearNumber());
		sb.append(", pdfLocaleCode=");
		sb.append(getPdfLocaleCode());
		sb.append(", pdfVersionNumber=");
		sb.append(getPdfVersionNumber());
		sb.append(", pdfFileName=");
		sb.append(getPdfFileName());
		sb.append(", pdfFileURLText=");
		sb.append(getPdfFileURLText());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", pageSizeOrientationType=");
		sb.append(getPageSizeOrientationType());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.PublishedPdfList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>pdfId</column-name><column-value><![CDATA[");
		sb.append(getPdfId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfChainCode</column-name><column-value><![CDATA[");
		sb.append(getPdfChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfCtryCode</column-name><column-value><![CDATA[");
		sb.append(getPdfCtryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfBuildType</column-name><column-value><![CDATA[");
		sb.append(getPdfBuildType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfYearNumber</column-name><column-value><![CDATA[");
		sb.append(getPdfYearNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfLocaleCode</column-name><column-value><![CDATA[");
		sb.append(getPdfLocaleCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfVersionNumber</column-name><column-value><![CDATA[");
		sb.append(getPdfVersionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfFileName</column-name><column-value><![CDATA[");
		sb.append(getPdfFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdfFileURLText</column-name><column-value><![CDATA[");
		sb.append(getPdfFileURLText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageSizeOrientationType</column-name><column-value><![CDATA[");
		sb.append(getPageSizeOrientationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PublishedPdfList.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PublishedPdfList.class
		};
	private long _pdfId;
	private long _originalPdfId;
	private boolean _setOriginalPdfId;
	private String _pdfChainCode;
	private String _originalPdfChainCode;
	private String _pdfCtryCode;
	private String _originalPdfCtryCode;
	private String _pdfBuildType;
	private String _originalPdfBuildType;
	private int _pdfYearNumber;
	private String _pdfLocaleCode;
	private String _originalPdfLocaleCode;
	private long _pdfVersionNumber;
	private String _pdfFileName;
	private String _originalPdfFileName;
	private String _pdfFileURLText;
	private String _originalPdfFileURLText;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private String _pageSizeOrientationType;
	private String _originalPageSizeOrientationType;
	private String _createdBy;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private PublishedPdfList _escapedModel;
}