/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsCountry;
import com.ihg.brandstandards.db.model.StandardsCountryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsCountry service. Represents a row in the &quot;BRNDSTND_CTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsCountryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsCountryImpl
 * @see com.ihg.brandstandards.db.model.StandardsCountry
 * @see com.ihg.brandstandards.db.model.StandardsCountryModel
 * @generated
 */
public class StandardsCountryModelImpl extends BaseModelImpl<StandardsCountry>
	implements StandardsCountryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards country model instance should use the {@link com.ihg.brandstandards.db.model.StandardsCountry} interface instead.
	 */
	public static final String TABLE_NAME = "BRNDSTND_CTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "RGN_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP },
			{ "SUB_RGN_ID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table BRNDSTND_CTRY (CTRY_NM_CD VARCHAR(75) not null primary key,RGN_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,SUB_RGN_ID LONG)";
	public static final String TABLE_SQL_DROP = "drop table BRNDSTND_CTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsCountry.regionId ASC, standardsCountry.countryNameCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRNDSTND_CTRY.RGN_ID ASC, BRNDSTND_CTRY.CTRY_NM_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsCountry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsCountry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsCountry"),
			true);
	public static long REGIONID_COLUMN_BITMASK = 1L;
	public static long COUNTRYNAMECODE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsCountry"));

	public StandardsCountryModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _countryNameCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCountryNameCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _countryNameCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsCountry.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsCountry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("countryNameCode", getCountryNameCode());
		attributes.put("regionId", getRegionId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());
		attributes.put("subRegionId", getSubRegionId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String countryNameCode = (String)attributes.get("countryNameCode");

		if (countryNameCode != null) {
			setCountryNameCode(countryNameCode);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}

		Long subRegionId = (Long)attributes.get("subRegionId");

		if (subRegionId != null) {
			setSubRegionId(subRegionId);
		}
	}

	@Override
	public String getCountryNameCode() {
		if (_countryNameCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryNameCode;
		}
	}

	@Override
	public void setCountryNameCode(String countryNameCode) {
		_columnBitmask = -1L;

		_countryNameCode = countryNameCode;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask = -1L;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public long getSubRegionId() {
		return _subRegionId;
	}

	@Override
	public void setSubRegionId(long subRegionId) {
		_subRegionId = subRegionId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsCountry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsCountry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsCountryImpl standardsCountryImpl = new StandardsCountryImpl();

		standardsCountryImpl.setCountryNameCode(getCountryNameCode());
		standardsCountryImpl.setRegionId(getRegionId());
		standardsCountryImpl.setCreatorId(getCreatorId());
		standardsCountryImpl.setCreatedDate(getCreatedDate());
		standardsCountryImpl.setUpdatedBy(getUpdatedBy());
		standardsCountryImpl.setUpdatedDate(getUpdatedDate());
		standardsCountryImpl.setSubRegionId(getSubRegionId());

		standardsCountryImpl.resetOriginalValues();

		return standardsCountryImpl;
	}

	@Override
	public int compareTo(StandardsCountry standardsCountry) {
		int value = 0;

		if (getRegionId() < standardsCountry.getRegionId()) {
			value = -1;
		}
		else if (getRegionId() > standardsCountry.getRegionId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getCountryNameCode()
					.compareTo(standardsCountry.getCountryNameCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsCountry)) {
			return false;
		}

		StandardsCountry standardsCountry = (StandardsCountry)obj;

		String primaryKey = standardsCountry.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsCountryModelImpl standardsCountryModelImpl = this;

		standardsCountryModelImpl._originalRegionId = standardsCountryModelImpl._regionId;

		standardsCountryModelImpl._setOriginalRegionId = false;

		standardsCountryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsCountry> toCacheModel() {
		StandardsCountryCacheModel standardsCountryCacheModel = new StandardsCountryCacheModel();

		standardsCountryCacheModel.countryNameCode = getCountryNameCode();

		String countryNameCode = standardsCountryCacheModel.countryNameCode;

		if ((countryNameCode != null) && (countryNameCode.length() == 0)) {
			standardsCountryCacheModel.countryNameCode = null;
		}

		standardsCountryCacheModel.regionId = getRegionId();

		standardsCountryCacheModel.creatorId = getCreatorId();

		String creatorId = standardsCountryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsCountryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsCountryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsCountryCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsCountryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsCountryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsCountryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsCountryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsCountryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		standardsCountryCacheModel.subRegionId = getSubRegionId();

		return standardsCountryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{countryNameCode=");
		sb.append(getCountryNameCode());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", subRegionId=");
		sb.append(getSubRegionId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsCountry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>countryNameCode</column-name><column-value><![CDATA[");
		sb.append(getCountryNameCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subRegionId</column-name><column-value><![CDATA[");
		sb.append(getSubRegionId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsCountry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsCountry.class
		};
	private String _countryNameCode;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _subRegionId;
	private long _columnBitmask;
	private StandardsCountry _escapedModel;
}