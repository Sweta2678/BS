/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry;
import com.ihg.brandstandards.db.model.ExternalLinkStandardsCountryModel;
import com.ihg.brandstandards.db.service.persistence.ExternalLinkStandardsCountryPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExternalLinkStandardsCountry service. Represents a row in the &quot;STD_LINK_CTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.ExternalLinkStandardsCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExternalLinkStandardsCountryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see ExternalLinkStandardsCountryImpl
 * @see com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry
 * @see com.ihg.brandstandards.db.model.ExternalLinkStandardsCountryModel
 * @generated
 */
public class ExternalLinkStandardsCountryModelImpl extends BaseModelImpl<ExternalLinkStandardsCountry>
	implements ExternalLinkStandardsCountryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a external link standards country model instance should use the {@link com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry} interface instead.
	 */
	public static final String TABLE_NAME = "STD_LINK_CTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_EXTL_LINK_ID", Types.BIGINT },
			{ "CTRY_NM_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_LINK_CTRY (STD_EXTL_LINK_ID LONG not null,CTRY_NM_CD VARCHAR(75) not null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (STD_EXTL_LINK_ID, CTRY_NM_CD))";
	public static final String TABLE_SQL_DROP = "drop table STD_LINK_CTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY externalLinkStandardsCountry.id.extLinkId ASC, externalLinkStandardsCountry.id.countryCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_LINK_CTRY.STD_EXTL_LINK_ID ASC, STD_LINK_CTRY.CTRY_NM_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry"),
			true);
	public static long EXTLINKID_COLUMN_BITMASK = 1L;
	public static long COUNTRYCODE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry"));

	public ExternalLinkStandardsCountryModelImpl() {
	}

	@Override
	public ExternalLinkStandardsCountryPK getPrimaryKey() {
		return new ExternalLinkStandardsCountryPK(_extLinkId, _countryCode);
	}

	@Override
	public void setPrimaryKey(ExternalLinkStandardsCountryPK primaryKey) {
		setExtLinkId(primaryKey.extLinkId);
		setCountryCode(primaryKey.countryCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ExternalLinkStandardsCountryPK(_extLinkId, _countryCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ExternalLinkStandardsCountryPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ExternalLinkStandardsCountry.class;
	}

	@Override
	public String getModelClassName() {
		return ExternalLinkStandardsCountry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("extLinkId", getExtLinkId());
		attributes.put("countryCode", getCountryCode());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long extLinkId = (Long)attributes.get("extLinkId");

		if (extLinkId != null) {
			setExtLinkId(extLinkId);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getExtLinkId() {
		return _extLinkId;
	}

	@Override
	public void setExtLinkId(long extLinkId) {
		_columnBitmask |= EXTLINKID_COLUMN_BITMASK;

		if (!_setOriginalExtLinkId) {
			_setOriginalExtLinkId = true;

			_originalExtLinkId = _extLinkId;
		}

		_extLinkId = extLinkId;
	}

	public long getOriginalExtLinkId() {
		return _originalExtLinkId;
	}

	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExternalLinkStandardsCountry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExternalLinkStandardsCountry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExternalLinkStandardsCountryImpl externalLinkStandardsCountryImpl = new ExternalLinkStandardsCountryImpl();

		externalLinkStandardsCountryImpl.setExtLinkId(getExtLinkId());
		externalLinkStandardsCountryImpl.setCountryCode(getCountryCode());
		externalLinkStandardsCountryImpl.setCreatorId(getCreatorId());
		externalLinkStandardsCountryImpl.setCreatedDate(getCreatedDate());
		externalLinkStandardsCountryImpl.setUpdatedBy(getUpdatedBy());
		externalLinkStandardsCountryImpl.setUpdatedDate(getUpdatedDate());

		externalLinkStandardsCountryImpl.resetOriginalValues();

		return externalLinkStandardsCountryImpl;
	}

	@Override
	public int compareTo(
		ExternalLinkStandardsCountry externalLinkStandardsCountry) {
		ExternalLinkStandardsCountryPK primaryKey = externalLinkStandardsCountry.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExternalLinkStandardsCountry)) {
			return false;
		}

		ExternalLinkStandardsCountry externalLinkStandardsCountry = (ExternalLinkStandardsCountry)obj;

		ExternalLinkStandardsCountryPK primaryKey = externalLinkStandardsCountry.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ExternalLinkStandardsCountryModelImpl externalLinkStandardsCountryModelImpl =
			this;

		externalLinkStandardsCountryModelImpl._originalExtLinkId = externalLinkStandardsCountryModelImpl._extLinkId;

		externalLinkStandardsCountryModelImpl._setOriginalExtLinkId = false;

		externalLinkStandardsCountryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExternalLinkStandardsCountry> toCacheModel() {
		ExternalLinkStandardsCountryCacheModel externalLinkStandardsCountryCacheModel =
			new ExternalLinkStandardsCountryCacheModel();

		externalLinkStandardsCountryCacheModel.extLinkId = getExtLinkId();

		externalLinkStandardsCountryCacheModel.countryCode = getCountryCode();

		String countryCode = externalLinkStandardsCountryCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			externalLinkStandardsCountryCacheModel.countryCode = null;
		}

		externalLinkStandardsCountryCacheModel.creatorId = getCreatorId();

		String creatorId = externalLinkStandardsCountryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			externalLinkStandardsCountryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			externalLinkStandardsCountryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			externalLinkStandardsCountryCacheModel.createdDate = Long.MIN_VALUE;
		}

		externalLinkStandardsCountryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = externalLinkStandardsCountryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			externalLinkStandardsCountryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			externalLinkStandardsCountryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			externalLinkStandardsCountryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return externalLinkStandardsCountryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{extLinkId=");
		sb.append(getExtLinkId());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"com.ihg.brandstandards.db.model.ExternalLinkStandardsCountry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extLinkId</column-name><column-value><![CDATA[");
		sb.append(getExtLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExternalLinkStandardsCountry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ExternalLinkStandardsCountry.class
		};
	private long _extLinkId;
	private long _originalExtLinkId;
	private boolean _setOriginalExtLinkId;
	private String _countryCode;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private ExternalLinkStandardsCountry _escapedModel;
}