/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.PublishParm;
import com.ihg.brandstandards.db.model.PublishParmModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PublishParm service. Represents a row in the &quot;PUBLISH_PARM&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.PublishParmModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublishParmImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see PublishParmImpl
 * @see com.ihg.brandstandards.db.model.PublishParm
 * @see com.ihg.brandstandards.db.model.PublishParmModel
 * @generated
 */
public class PublishParmModelImpl extends BaseModelImpl<PublishParm>
	implements PublishParmModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a publish parm model instance should use the {@link com.ihg.brandstandards.db.model.PublishParm} interface instead.
	 */
	public static final String TABLE_NAME = "PUBLISH_PARM";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PUBLISH_PARM_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "PARM_NM", Types.VARCHAR },
			{ "PARM_VAL", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table PUBLISH_PARM (PUBLISH_PARM_ID LONG not null primary key,PUBLISH_ID LONG,PARM_NM VARCHAR(75) null,PARM_VAL VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PUBLISH_PARM";
	public static final String ORDER_BY_JPQL = " ORDER BY publishParm.parmName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PUBLISH_PARM.PARM_NM ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.PublishParm"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.PublishParm"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.PublishParm"),
			true);
	public static long PUBLISHID_COLUMN_BITMASK = 1L;
	public static long PARMNAME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.PublishParm"));

	public PublishParmModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publishParmId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublishParmId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publishParmId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublishParm.class;
	}

	@Override
	public String getModelClassName() {
		return PublishParm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishParmId", getPublishParmId());
		attributes.put("publishId", getPublishId());
		attributes.put("parmName", getParmName());
		attributes.put("parmValue", getParmValue());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishParmId = (Long)attributes.get("publishParmId");

		if (publishParmId != null) {
			setPublishParmId(publishParmId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		String parmName = (String)attributes.get("parmName");

		if (parmName != null) {
			setParmName(parmName);
		}

		String parmValue = (String)attributes.get("parmValue");

		if (parmValue != null) {
			setParmValue(parmValue);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getPublishParmId() {
		return _publishParmId;
	}

	@Override
	public void setPublishParmId(long publishParmId) {
		_publishParmId = publishParmId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public String getParmName() {
		if (_parmName == null) {
			return StringPool.BLANK;
		}
		else {
			return _parmName;
		}
	}

	@Override
	public void setParmName(String parmName) {
		_columnBitmask = -1L;

		_parmName = parmName;
	}

	@Override
	public String getParmValue() {
		if (_parmValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _parmValue;
		}
	}

	@Override
	public void setParmValue(String parmValue) {
		_parmValue = parmValue;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublishParm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PublishParm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublishParm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublishParmImpl publishParmImpl = new PublishParmImpl();

		publishParmImpl.setPublishParmId(getPublishParmId());
		publishParmImpl.setPublishId(getPublishId());
		publishParmImpl.setParmName(getParmName());
		publishParmImpl.setParmValue(getParmValue());
		publishParmImpl.setCreatorId(getCreatorId());
		publishParmImpl.setCreatedDate(getCreatedDate());
		publishParmImpl.setUpdatedBy(getUpdatedBy());
		publishParmImpl.setUpdatedDate(getUpdatedDate());

		publishParmImpl.resetOriginalValues();

		return publishParmImpl;
	}

	@Override
	public int compareTo(PublishParm publishParm) {
		int value = 0;

		value = getParmName().compareTo(publishParm.getParmName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublishParm)) {
			return false;
		}

		PublishParm publishParm = (PublishParm)obj;

		long primaryKey = publishParm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PublishParmModelImpl publishParmModelImpl = this;

		publishParmModelImpl._originalPublishId = publishParmModelImpl._publishId;

		publishParmModelImpl._setOriginalPublishId = false;

		publishParmModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PublishParm> toCacheModel() {
		PublishParmCacheModel publishParmCacheModel = new PublishParmCacheModel();

		publishParmCacheModel.publishParmId = getPublishParmId();

		publishParmCacheModel.publishId = getPublishId();

		publishParmCacheModel.parmName = getParmName();

		String parmName = publishParmCacheModel.parmName;

		if ((parmName != null) && (parmName.length() == 0)) {
			publishParmCacheModel.parmName = null;
		}

		publishParmCacheModel.parmValue = getParmValue();

		String parmValue = publishParmCacheModel.parmValue;

		if ((parmValue != null) && (parmValue.length() == 0)) {
			publishParmCacheModel.parmValue = null;
		}

		publishParmCacheModel.creatorId = getCreatorId();

		String creatorId = publishParmCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			publishParmCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			publishParmCacheModel.createdDate = createdDate.getTime();
		}
		else {
			publishParmCacheModel.createdDate = Long.MIN_VALUE;
		}

		publishParmCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = publishParmCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			publishParmCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			publishParmCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			publishParmCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return publishParmCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{publishParmId=");
		sb.append(getPublishParmId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", parmName=");
		sb.append(getParmName());
		sb.append(", parmValue=");
		sb.append(getParmValue());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.PublishParm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishParmId</column-name><column-value><![CDATA[");
		sb.append(getPublishParmId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parmName</column-name><column-value><![CDATA[");
		sb.append(getParmName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parmValue</column-name><column-value><![CDATA[");
		sb.append(getParmValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PublishParm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PublishParm.class
		};
	private long _publishParmId;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private String _parmName;
	private String _parmValue;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private PublishParm _escapedModel;
}