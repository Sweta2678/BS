/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsStatus;
import com.ihg.brandstandards.db.model.StandardsStatusModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsStatus service. Represents a row in the &quot;STAT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsStatusImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsStatusImpl
 * @see com.ihg.brandstandards.db.model.StandardsStatus
 * @see com.ihg.brandstandards.db.model.StandardsStatusModel
 * @generated
 */
public class StandardsStatusModelImpl extends BaseModelImpl<StandardsStatus>
	implements StandardsStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards status model instance should use the {@link com.ihg.brandstandards.db.model.StandardsStatus} interface instead.
	 */
	public static final String TABLE_NAME = "STAT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STAT_ID", Types.BIGINT },
			{ "STAT_CD", Types.VARCHAR },
			{ "STAT_TITLE_TXT", Types.VARCHAR },
			{ "RGN_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STAT (STAT_ID LONG not null primary key,STAT_CD VARCHAR(75) null,STAT_TITLE_TXT VARCHAR(75) null,RGN_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table STAT";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsStatus.statusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STAT.STAT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsStatus"),
			true);
	public static long REGIONID_COLUMN_BITMASK = 1L;
	public static long STATUSCODE_COLUMN_BITMASK = 2L;
	public static long STATUSID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsStatus"));

	public StandardsStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _statusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _statusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsStatus.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("statusId", getStatusId());
		attributes.put("statusCode", getStatusCode());
		attributes.put("title", getTitle());
		attributes.put("regionId", getRegionId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long statusId = (Long)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		String statusCode = (String)attributes.get("statusCode");

		if (statusCode != null) {
			setStatusCode(statusCode);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(long statusId) {
		_columnBitmask = -1L;

		_statusId = statusId;
	}

	@Override
	public String getStatusCode() {
		if (_statusCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusCode;
		}
	}

	@Override
	public void setStatusCode(String statusCode) {
		_columnBitmask |= STATUSCODE_COLUMN_BITMASK;

		if (_originalStatusCode == null) {
			_originalStatusCode = _statusCode;
		}

		_statusCode = statusCode;
	}

	public String getOriginalStatusCode() {
		return GetterUtil.getString(_originalStatusCode);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			StandardsStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StandardsStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsStatusImpl standardsStatusImpl = new StandardsStatusImpl();

		standardsStatusImpl.setStatusId(getStatusId());
		standardsStatusImpl.setStatusCode(getStatusCode());
		standardsStatusImpl.setTitle(getTitle());
		standardsStatusImpl.setRegionId(getRegionId());
		standardsStatusImpl.setCreatorId(getCreatorId());
		standardsStatusImpl.setCreatedDate(getCreatedDate());
		standardsStatusImpl.setUpdatedBy(getUpdatedBy());
		standardsStatusImpl.setUpdatedDate(getUpdatedDate());

		standardsStatusImpl.resetOriginalValues();

		return standardsStatusImpl;
	}

	@Override
	public int compareTo(StandardsStatus standardsStatus) {
		int value = 0;

		if (getStatusId() < standardsStatus.getStatusId()) {
			value = -1;
		}
		else if (getStatusId() > standardsStatus.getStatusId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsStatus)) {
			return false;
		}

		StandardsStatus standardsStatus = (StandardsStatus)obj;

		long primaryKey = standardsStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		StandardsStatusModelImpl standardsStatusModelImpl = this;

		standardsStatusModelImpl._originalStatusCode = standardsStatusModelImpl._statusCode;

		standardsStatusModelImpl._originalRegionId = standardsStatusModelImpl._regionId;

		standardsStatusModelImpl._setOriginalRegionId = false;

		standardsStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsStatus> toCacheModel() {
		StandardsStatusCacheModel standardsStatusCacheModel = new StandardsStatusCacheModel();

		standardsStatusCacheModel.statusId = getStatusId();

		standardsStatusCacheModel.statusCode = getStatusCode();

		String statusCode = standardsStatusCacheModel.statusCode;

		if ((statusCode != null) && (statusCode.length() == 0)) {
			standardsStatusCacheModel.statusCode = null;
		}

		standardsStatusCacheModel.title = getTitle();

		String title = standardsStatusCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			standardsStatusCacheModel.title = null;
		}

		standardsStatusCacheModel.regionId = getRegionId();

		standardsStatusCacheModel.creatorId = getCreatorId();

		String creatorId = standardsStatusCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsStatusCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsStatusCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsStatusCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsStatusCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsStatusCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsStatusCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsStatusCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsStatusCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{statusId=");
		sb.append(getStatusId());
		sb.append(", statusCode=");
		sb.append(getStatusCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCode</column-name><column-value><![CDATA[");
		sb.append(getStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsStatus.class
		};
	private long _statusId;
	private String _statusCode;
	private String _originalStatusCode;
	private String _title;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsStatus _escapedModel;
}