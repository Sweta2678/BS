/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMQlReport;
import com.ihg.brandstandards.db.model.GEMQlReportModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMQlReport service. Represents a row in the &quot;QLTY_LEAD_RPT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMQlReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMQlReportImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMQlReportImpl
 * @see com.ihg.brandstandards.db.model.GEMQlReport
 * @see com.ihg.brandstandards.db.model.GEMQlReportModel
 * @generated
 */
public class GEMQlReportModelImpl extends BaseModelImpl<GEMQlReport>
	implements GEMQlReportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m ql report model instance should use the {@link com.ihg.brandstandards.db.model.GEMQlReport} interface instead.
	 */
	public static final String TABLE_NAME = "QLTY_LEAD_RPT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "QLTY_LEAD_RPT_ID", Types.BIGINT },
			{ "GEM_PUBLISH_DEPT_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "GEM_MGT_BUCKET_ID", Types.BIGINT },
			{ "GEM_SEVERITY_ID", Types.BIGINT },
			{ "GEM_MSRMNT_ID", Types.BIGINT },
			{ "GEM_TRIGGER_ID", Types.BIGINT },
			{ "GEM_CATGY_ID", Types.BIGINT },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "CMPLY_DUE_DY_QTY", Types.BIGINT },
			{ "GBL_MUST_MEASURE_STD_IND", Types.VARCHAR },
			{ "PRNT_QLTY_LEAD_RPT_ID", Types.BIGINT },
			{ "DUPLICATE_IND", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table QLTY_LEAD_RPT (QLTY_LEAD_RPT_ID LONG not null primary key,GEM_PUBLISH_DEPT_ID LONG,PUBLISH_ID LONG,STD_ID LONG,GEM_MGT_BUCKET_ID LONG,GEM_SEVERITY_ID LONG,GEM_MSRMNT_ID LONG,GEM_TRIGGER_ID LONG,GEM_CATGY_ID LONG,DISP_ORDER_NBR LONG,RGN_ID LONG,CMPLY_DUE_DY_QTY LONG,GBL_MUST_MEASURE_STD_IND VARCHAR(75) null,PRNT_QLTY_LEAD_RPT_ID LONG,DUPLICATE_IND VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table QLTY_LEAD_RPT";
	public static final String ORDER_BY_JPQL = " ORDER BY gemQlReport.qlReportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY QLTY_LEAD_RPT.QLTY_LEAD_RPT_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMQlReport"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMQlReport"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.GEMQlReport"),
			true);
	public static long DUPLICATE_COLUMN_BITMASK = 1L;
	public static long PARENTQLREPORTID_COLUMN_BITMASK = 2L;
	public static long PUBLISHID_COLUMN_BITMASK = 4L;
	public static long REGIONID_COLUMN_BITMASK = 8L;
	public static long STDID_COLUMN_BITMASK = 16L;
	public static long QLREPORTID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMQlReport"));

	public GEMQlReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _qlReportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQlReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _qlReportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMQlReport.class;
	}

	@Override
	public String getModelClassName() {
		return GEMQlReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("qlReportId", getQlReportId());
		attributes.put("publishDeptId", getPublishDeptId());
		attributes.put("publishId", getPublishId());
		attributes.put("stdId", getStdId());
		attributes.put("bucketId", getBucketId());
		attributes.put("severityId", getSeverityId());
		attributes.put("measurementId", getMeasurementId());
		attributes.put("triggerId", getTriggerId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("displayOrderNumber", getDisplayOrderNumber());
		attributes.put("regionId", getRegionId());
		attributes.put("complianceDueDays", getComplianceDueDays());
		attributes.put("glblMustMeasure", getGlblMustMeasure());
		attributes.put("parentQlReportId", getParentQlReportId());
		attributes.put("duplicate", getDuplicate());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long qlReportId = (Long)attributes.get("qlReportId");

		if (qlReportId != null) {
			setQlReportId(qlReportId);
		}

		Long publishDeptId = (Long)attributes.get("publishDeptId");

		if (publishDeptId != null) {
			setPublishDeptId(publishDeptId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		Long bucketId = (Long)attributes.get("bucketId");

		if (bucketId != null) {
			setBucketId(bucketId);
		}

		Long severityId = (Long)attributes.get("severityId");

		if (severityId != null) {
			setSeverityId(severityId);
		}

		Long measurementId = (Long)attributes.get("measurementId");

		if (measurementId != null) {
			setMeasurementId(measurementId);
		}

		Long triggerId = (Long)attributes.get("triggerId");

		if (triggerId != null) {
			setTriggerId(triggerId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long displayOrderNumber = (Long)attributes.get("displayOrderNumber");

		if (displayOrderNumber != null) {
			setDisplayOrderNumber(displayOrderNumber);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		Long complianceDueDays = (Long)attributes.get("complianceDueDays");

		if (complianceDueDays != null) {
			setComplianceDueDays(complianceDueDays);
		}

		String glblMustMeasure = (String)attributes.get("glblMustMeasure");

		if (glblMustMeasure != null) {
			setGlblMustMeasure(glblMustMeasure);
		}

		Long parentQlReportId = (Long)attributes.get("parentQlReportId");

		if (parentQlReportId != null) {
			setParentQlReportId(parentQlReportId);
		}

		String duplicate = (String)attributes.get("duplicate");

		if (duplicate != null) {
			setDuplicate(duplicate);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getQlReportId() {
		return _qlReportId;
	}

	@Override
	public void setQlReportId(long qlReportId) {
		_qlReportId = qlReportId;
	}

	@Override
	public long getPublishDeptId() {
		return _publishDeptId;
	}

	@Override
	public void setPublishDeptId(long publishDeptId) {
		_publishDeptId = publishDeptId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_columnBitmask |= PUBLISHID_COLUMN_BITMASK;

		if (!_setOriginalPublishId) {
			_setOriginalPublishId = true;

			_originalPublishId = _publishId;
		}

		_publishId = publishId;
	}

	public long getOriginalPublishId() {
		return _originalPublishId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public long getBucketId() {
		return _bucketId;
	}

	@Override
	public void setBucketId(long bucketId) {
		_bucketId = bucketId;
	}

	@Override
	public long getSeverityId() {
		return _severityId;
	}

	@Override
	public void setSeverityId(long severityId) {
		_severityId = severityId;
	}

	@Override
	public long getMeasurementId() {
		return _measurementId;
	}

	@Override
	public void setMeasurementId(long measurementId) {
		_measurementId = measurementId;
	}

	@Override
	public long getTriggerId() {
		return _triggerId;
	}

	@Override
	public void setTriggerId(long triggerId) {
		_triggerId = triggerId;
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@Override
	public long getDisplayOrderNumber() {
		return _displayOrderNumber;
	}

	@Override
	public void setDisplayOrderNumber(long displayOrderNumber) {
		_displayOrderNumber = displayOrderNumber;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (!_setOriginalRegionId) {
			_setOriginalRegionId = true;

			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public long getOriginalRegionId() {
		return _originalRegionId;
	}

	@Override
	public long getComplianceDueDays() {
		return _complianceDueDays;
	}

	@Override
	public void setComplianceDueDays(long complianceDueDays) {
		_complianceDueDays = complianceDueDays;
	}

	@Override
	public String getGlblMustMeasure() {
		if (_glblMustMeasure == null) {
			return StringPool.BLANK;
		}
		else {
			return _glblMustMeasure;
		}
	}

	@Override
	public void setGlblMustMeasure(String glblMustMeasure) {
		_glblMustMeasure = glblMustMeasure;
	}

	@Override
	public long getParentQlReportId() {
		return _parentQlReportId;
	}

	@Override
	public void setParentQlReportId(long parentQlReportId) {
		_columnBitmask |= PARENTQLREPORTID_COLUMN_BITMASK;

		if (!_setOriginalParentQlReportId) {
			_setOriginalParentQlReportId = true;

			_originalParentQlReportId = _parentQlReportId;
		}

		_parentQlReportId = parentQlReportId;
	}

	public long getOriginalParentQlReportId() {
		return _originalParentQlReportId;
	}

	@Override
	public String getDuplicate() {
		if (_duplicate == null) {
			return StringPool.BLANK;
		}
		else {
			return _duplicate;
		}
	}

	@Override
	public void setDuplicate(String duplicate) {
		_columnBitmask |= DUPLICATE_COLUMN_BITMASK;

		if (_originalDuplicate == null) {
			_originalDuplicate = _duplicate;
		}

		_duplicate = duplicate;
	}

	public String getOriginalDuplicate() {
		return GetterUtil.getString(_originalDuplicate);
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMQlReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMQlReport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMQlReport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMQlReportImpl gemQlReportImpl = new GEMQlReportImpl();

		gemQlReportImpl.setQlReportId(getQlReportId());
		gemQlReportImpl.setPublishDeptId(getPublishDeptId());
		gemQlReportImpl.setPublishId(getPublishId());
		gemQlReportImpl.setStdId(getStdId());
		gemQlReportImpl.setBucketId(getBucketId());
		gemQlReportImpl.setSeverityId(getSeverityId());
		gemQlReportImpl.setMeasurementId(getMeasurementId());
		gemQlReportImpl.setTriggerId(getTriggerId());
		gemQlReportImpl.setCategoryId(getCategoryId());
		gemQlReportImpl.setDisplayOrderNumber(getDisplayOrderNumber());
		gemQlReportImpl.setRegionId(getRegionId());
		gemQlReportImpl.setComplianceDueDays(getComplianceDueDays());
		gemQlReportImpl.setGlblMustMeasure(getGlblMustMeasure());
		gemQlReportImpl.setParentQlReportId(getParentQlReportId());
		gemQlReportImpl.setDuplicate(getDuplicate());
		gemQlReportImpl.setCreatorId(getCreatorId());
		gemQlReportImpl.setCreatedDate(getCreatedDate());
		gemQlReportImpl.setUpdatedBy(getUpdatedBy());
		gemQlReportImpl.setUpdatedDate(getUpdatedDate());

		gemQlReportImpl.resetOriginalValues();

		return gemQlReportImpl;
	}

	@Override
	public int compareTo(GEMQlReport gemQlReport) {
		long primaryKey = gemQlReport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMQlReport)) {
			return false;
		}

		GEMQlReport gemQlReport = (GEMQlReport)obj;

		long primaryKey = gemQlReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GEMQlReportModelImpl gemQlReportModelImpl = this;

		gemQlReportModelImpl._originalPublishId = gemQlReportModelImpl._publishId;

		gemQlReportModelImpl._setOriginalPublishId = false;

		gemQlReportModelImpl._originalStdId = gemQlReportModelImpl._stdId;

		gemQlReportModelImpl._setOriginalStdId = false;

		gemQlReportModelImpl._originalRegionId = gemQlReportModelImpl._regionId;

		gemQlReportModelImpl._setOriginalRegionId = false;

		gemQlReportModelImpl._originalParentQlReportId = gemQlReportModelImpl._parentQlReportId;

		gemQlReportModelImpl._setOriginalParentQlReportId = false;

		gemQlReportModelImpl._originalDuplicate = gemQlReportModelImpl._duplicate;

		gemQlReportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GEMQlReport> toCacheModel() {
		GEMQlReportCacheModel gemQlReportCacheModel = new GEMQlReportCacheModel();

		gemQlReportCacheModel.qlReportId = getQlReportId();

		gemQlReportCacheModel.publishDeptId = getPublishDeptId();

		gemQlReportCacheModel.publishId = getPublishId();

		gemQlReportCacheModel.stdId = getStdId();

		gemQlReportCacheModel.bucketId = getBucketId();

		gemQlReportCacheModel.severityId = getSeverityId();

		gemQlReportCacheModel.measurementId = getMeasurementId();

		gemQlReportCacheModel.triggerId = getTriggerId();

		gemQlReportCacheModel.categoryId = getCategoryId();

		gemQlReportCacheModel.displayOrderNumber = getDisplayOrderNumber();

		gemQlReportCacheModel.regionId = getRegionId();

		gemQlReportCacheModel.complianceDueDays = getComplianceDueDays();

		gemQlReportCacheModel.glblMustMeasure = getGlblMustMeasure();

		String glblMustMeasure = gemQlReportCacheModel.glblMustMeasure;

		if ((glblMustMeasure != null) && (glblMustMeasure.length() == 0)) {
			gemQlReportCacheModel.glblMustMeasure = null;
		}

		gemQlReportCacheModel.parentQlReportId = getParentQlReportId();

		gemQlReportCacheModel.duplicate = getDuplicate();

		String duplicate = gemQlReportCacheModel.duplicate;

		if ((duplicate != null) && (duplicate.length() == 0)) {
			gemQlReportCacheModel.duplicate = null;
		}

		gemQlReportCacheModel.creatorId = getCreatorId();

		String creatorId = gemQlReportCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemQlReportCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemQlReportCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemQlReportCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemQlReportCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemQlReportCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemQlReportCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemQlReportCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemQlReportCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemQlReportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{qlReportId=");
		sb.append(getQlReportId());
		sb.append(", publishDeptId=");
		sb.append(getPublishDeptId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", bucketId=");
		sb.append(getBucketId());
		sb.append(", severityId=");
		sb.append(getSeverityId());
		sb.append(", measurementId=");
		sb.append(getMeasurementId());
		sb.append(", triggerId=");
		sb.append(getTriggerId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", displayOrderNumber=");
		sb.append(getDisplayOrderNumber());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", complianceDueDays=");
		sb.append(getComplianceDueDays());
		sb.append(", glblMustMeasure=");
		sb.append(getGlblMustMeasure());
		sb.append(", parentQlReportId=");
		sb.append(getParentQlReportId());
		sb.append(", duplicate=");
		sb.append(getDuplicate());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMQlReport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>qlReportId</column-name><column-value><![CDATA[");
		sb.append(getQlReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDeptId</column-name><column-value><![CDATA[");
		sb.append(getPublishDeptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bucketId</column-name><column-value><![CDATA[");
		sb.append(getBucketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>severityId</column-name><column-value><![CDATA[");
		sb.append(getSeverityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>measurementId</column-name><column-value><![CDATA[");
		sb.append(getMeasurementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>triggerId</column-name><column-value><![CDATA[");
		sb.append(getTriggerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complianceDueDays</column-name><column-value><![CDATA[");
		sb.append(getComplianceDueDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glblMustMeasure</column-name><column-value><![CDATA[");
		sb.append(getGlblMustMeasure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentQlReportId</column-name><column-value><![CDATA[");
		sb.append(getParentQlReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duplicate</column-name><column-value><![CDATA[");
		sb.append(getDuplicate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMQlReport.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMQlReport.class
		};
	private long _qlReportId;
	private long _publishDeptId;
	private long _publishId;
	private long _originalPublishId;
	private boolean _setOriginalPublishId;
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private long _bucketId;
	private long _severityId;
	private long _measurementId;
	private long _triggerId;
	private long _categoryId;
	private long _displayOrderNumber;
	private long _regionId;
	private long _originalRegionId;
	private boolean _setOriginalRegionId;
	private long _complianceDueDays;
	private String _glblMustMeasure;
	private long _parentQlReportId;
	private long _originalParentQlReportId;
	private boolean _setOriginalParentQlReportId;
	private String _duplicate;
	private String _originalDuplicate;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private GEMQlReport _escapedModel;
}