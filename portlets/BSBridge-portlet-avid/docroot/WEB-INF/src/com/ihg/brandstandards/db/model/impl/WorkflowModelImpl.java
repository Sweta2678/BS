/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.Workflow;
import com.ihg.brandstandards.db.model.WorkflowModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Workflow service. Represents a row in the &quot;WORKFLOW_ACTV_LOG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.WorkflowModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkflowImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see WorkflowImpl
 * @see com.ihg.brandstandards.db.model.Workflow
 * @see com.ihg.brandstandards.db.model.WorkflowModel
 * @generated
 */
public class WorkflowModelImpl extends BaseModelImpl<Workflow>
	implements WorkflowModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a workflow model instance should use the {@link com.ihg.brandstandards.db.model.Workflow} interface instead.
	 */
	public static final String TABLE_NAME = "WORKFLOW_ACTV_LOG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "WORKFLOW_ACTV_LOG_ID", Types.BIGINT },
			{ "OBJECT_ID", Types.BIGINT },
			{ "OBJECT_TYP", Types.VARCHAR },
			{ "CURRENT_STAT_CD", Types.VARCHAR },
			{ "PREV_STAT_CD", Types.VARCHAR },
			{ "TITLE_TXT", Types.VARCHAR },
			{ "CMT_TXT", Types.VARCHAR },
			{ "USR_SCRN_NM", Types.VARCHAR },
			{ "CHAIN_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table WORKFLOW_ACTV_LOG (WORKFLOW_ACTV_LOG_ID LONG not null primary key,OBJECT_ID LONG,OBJECT_TYP VARCHAR(75) null,CURRENT_STAT_CD VARCHAR(75) null,PREV_STAT_CD VARCHAR(75) null,TITLE_TXT VARCHAR(75) null,CMT_TXT VARCHAR(75) null,USR_SCRN_NM VARCHAR(75) null,CHAIN_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table WORKFLOW_ACTV_LOG";
	public static final String ORDER_BY_JPQL = " ORDER BY workflow.workflowActvtId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WORKFLOW_ACTV_LOG.WORKFLOW_ACTV_LOG_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.Workflow"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.Workflow"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.Workflow"));

	public WorkflowModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _workflowActvtId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWorkflowActvtId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workflowActvtId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Workflow.class;
	}

	@Override
	public String getModelClassName() {
		return Workflow.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("workflowActvtId", getWorkflowActvtId());
		attributes.put("objectId", getObjectId());
		attributes.put("objectType", getObjectType());
		attributes.put("status", getStatus());
		attributes.put("prevStatus", getPrevStatus());
		attributes.put("title", getTitle());
		attributes.put("comment", getComment());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("chainCode", getChainCode());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long workflowActvtId = (Long)attributes.get("workflowActvtId");

		if (workflowActvtId != null) {
			setWorkflowActvtId(workflowActvtId);
		}

		Long objectId = (Long)attributes.get("objectId");

		if (objectId != null) {
			setObjectId(objectId);
		}

		String objectType = (String)attributes.get("objectType");

		if (objectType != null) {
			setObjectType(objectType);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String prevStatus = (String)attributes.get("prevStatus");

		if (prevStatus != null) {
			setPrevStatus(prevStatus);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String chainCode = (String)attributes.get("chainCode");

		if (chainCode != null) {
			setChainCode(chainCode);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getWorkflowActvtId() {
		return _workflowActvtId;
	}

	@Override
	public void setWorkflowActvtId(long workflowActvtId) {
		_workflowActvtId = workflowActvtId;
	}

	@Override
	public long getObjectId() {
		return _objectId;
	}

	@Override
	public void setObjectId(long objectId) {
		_objectId = objectId;
	}

	@Override
	public String getObjectType() {
		if (_objectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _objectType;
		}
	}

	@Override
	public void setObjectType(String objectType) {
		_objectType = objectType;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public String getPrevStatus() {
		if (_prevStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _prevStatus;
		}
	}

	@Override
	public void setPrevStatus(String prevStatus) {
		_prevStatus = prevStatus;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return StringPool.BLANK;
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getChainCode() {
		if (_chainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chainCode;
		}
	}

	@Override
	public void setChainCode(String chainCode) {
		_chainCode = chainCode;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Workflow.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Workflow toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Workflow)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkflowImpl workflowImpl = new WorkflowImpl();

		workflowImpl.setWorkflowActvtId(getWorkflowActvtId());
		workflowImpl.setObjectId(getObjectId());
		workflowImpl.setObjectType(getObjectType());
		workflowImpl.setStatus(getStatus());
		workflowImpl.setPrevStatus(getPrevStatus());
		workflowImpl.setTitle(getTitle());
		workflowImpl.setComment(getComment());
		workflowImpl.setCreatedBy(getCreatedBy());
		workflowImpl.setChainCode(getChainCode());
		workflowImpl.setCreatorId(getCreatorId());
		workflowImpl.setCreatedDate(getCreatedDate());
		workflowImpl.setUpdatedBy(getUpdatedBy());
		workflowImpl.setUpdatedDate(getUpdatedDate());

		workflowImpl.resetOriginalValues();

		return workflowImpl;
	}

	@Override
	public int compareTo(Workflow workflow) {
		long primaryKey = workflow.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Workflow)) {
			return false;
		}

		Workflow workflow = (Workflow)obj;

		long primaryKey = workflow.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Workflow> toCacheModel() {
		WorkflowCacheModel workflowCacheModel = new WorkflowCacheModel();

		workflowCacheModel.workflowActvtId = getWorkflowActvtId();

		workflowCacheModel.objectId = getObjectId();

		workflowCacheModel.objectType = getObjectType();

		String objectType = workflowCacheModel.objectType;

		if ((objectType != null) && (objectType.length() == 0)) {
			workflowCacheModel.objectType = null;
		}

		workflowCacheModel.status = getStatus();

		String status = workflowCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			workflowCacheModel.status = null;
		}

		workflowCacheModel.prevStatus = getPrevStatus();

		String prevStatus = workflowCacheModel.prevStatus;

		if ((prevStatus != null) && (prevStatus.length() == 0)) {
			workflowCacheModel.prevStatus = null;
		}

		workflowCacheModel.title = getTitle();

		String title = workflowCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			workflowCacheModel.title = null;
		}

		workflowCacheModel.comment = getComment();

		String comment = workflowCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			workflowCacheModel.comment = null;
		}

		workflowCacheModel.createdBy = getCreatedBy();

		String createdBy = workflowCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			workflowCacheModel.createdBy = null;
		}

		workflowCacheModel.chainCode = getChainCode();

		String chainCode = workflowCacheModel.chainCode;

		if ((chainCode != null) && (chainCode.length() == 0)) {
			workflowCacheModel.chainCode = null;
		}

		workflowCacheModel.creatorId = getCreatorId();

		String creatorId = workflowCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			workflowCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			workflowCacheModel.createdDate = createdDate.getTime();
		}
		else {
			workflowCacheModel.createdDate = Long.MIN_VALUE;
		}

		workflowCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = workflowCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			workflowCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			workflowCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			workflowCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return workflowCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{workflowActvtId=");
		sb.append(getWorkflowActvtId());
		sb.append(", objectId=");
		sb.append(getObjectId());
		sb.append(", objectType=");
		sb.append(getObjectType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", prevStatus=");
		sb.append(getPrevStatus());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", chainCode=");
		sb.append(getChainCode());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.Workflow");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>workflowActvtId</column-name><column-value><![CDATA[");
		sb.append(getWorkflowActvtId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectId</column-name><column-value><![CDATA[");
		sb.append(getObjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectType</column-name><column-value><![CDATA[");
		sb.append(getObjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prevStatus</column-name><column-value><![CDATA[");
		sb.append(getPrevStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chainCode</column-name><column-value><![CDATA[");
		sb.append(getChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Workflow.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Workflow.class
		};
	private long _workflowActvtId;
	private long _objectId;
	private String _objectType;
	private String _status;
	private String _prevStatus;
	private String _title;
	private String _comment;
	private String _createdBy;
	private String _chainCode;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private Workflow _escapedModel;
}