/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.Glossary;
import com.ihg.brandstandards.db.model.GlossaryModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Glossary service. Represents a row in the &quot;GLOSSARY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GlossaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlossaryImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GlossaryImpl
 * @see com.ihg.brandstandards.db.model.Glossary
 * @see com.ihg.brandstandards.db.model.GlossaryModel
 * @generated
 */
public class GlossaryModelImpl extends BaseModelImpl<Glossary>
	implements GlossaryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a glossary model instance should use the {@link com.ihg.brandstandards.db.model.Glossary} interface instead.
	 */
	public static final String TABLE_NAME = "GLOSSARY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GLOSSARY_ID", Types.BIGINT },
			{ "GLOSSARY_TERM_TXT", Types.VARCHAR },
			{ "GLOSSARY_TERM_DESC", Types.VARCHAR },
			{ "ACTV_IND", Types.VARCHAR },
			{ "OWNER_RGN_ID", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GLOSSARY (GLOSSARY_ID LONG not null primary key,GLOSSARY_TERM_TXT VARCHAR(75) null,GLOSSARY_TERM_DESC VARCHAR(75) null,ACTV_IND VARCHAR(75) null,OWNER_RGN_ID LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GLOSSARY";
	public static final String ORDER_BY_JPQL = " ORDER BY glossary.glossaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GLOSSARY.GLOSSARY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.Glossary"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.Glossary"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.Glossary"),
			true);
	public static long GLOSSARYID_COLUMN_BITMASK = 1L;
	public static long GLOSSARYTERMTEXT_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.Glossary"));

	public GlossaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGlossaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Glossary.class;
	}

	@Override
	public String getModelClassName() {
		return Glossary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("glossaryId", getGlossaryId());
		attributes.put("glossaryTermText", getGlossaryTermText());
		attributes.put("glossaryTermDesc", getGlossaryTermDesc());
		attributes.put("activeInd", getActiveInd());
		attributes.put("glossaryOwner", getGlossaryOwner());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long glossaryId = (Long)attributes.get("glossaryId");

		if (glossaryId != null) {
			setGlossaryId(glossaryId);
		}

		String glossaryTermText = (String)attributes.get("glossaryTermText");

		if (glossaryTermText != null) {
			setGlossaryTermText(glossaryTermText);
		}

		String glossaryTermDesc = (String)attributes.get("glossaryTermDesc");

		if (glossaryTermDesc != null) {
			setGlossaryTermDesc(glossaryTermDesc);
		}

		String activeInd = (String)attributes.get("activeInd");

		if (activeInd != null) {
			setActiveInd(activeInd);
		}

		Long glossaryOwner = (Long)attributes.get("glossaryOwner");

		if (glossaryOwner != null) {
			setGlossaryOwner(glossaryOwner);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getGlossaryId() {
		return _glossaryId;
	}

	@Override
	public void setGlossaryId(long glossaryId) {
		_columnBitmask |= GLOSSARYID_COLUMN_BITMASK;

		if (!_setOriginalGlossaryId) {
			_setOriginalGlossaryId = true;

			_originalGlossaryId = _glossaryId;
		}

		_glossaryId = glossaryId;
	}

	public long getOriginalGlossaryId() {
		return _originalGlossaryId;
	}

	@Override
	public String getGlossaryTermText() {
		if (_glossaryTermText == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryTermText;
		}
	}

	@Override
	public void setGlossaryTermText(String glossaryTermText) {
		_columnBitmask |= GLOSSARYTERMTEXT_COLUMN_BITMASK;

		if (_originalGlossaryTermText == null) {
			_originalGlossaryTermText = _glossaryTermText;
		}

		_glossaryTermText = glossaryTermText;
	}

	public String getOriginalGlossaryTermText() {
		return GetterUtil.getString(_originalGlossaryTermText);
	}

	@Override
	public String getGlossaryTermDesc() {
		if (_glossaryTermDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryTermDesc;
		}
	}

	@Override
	public void setGlossaryTermDesc(String glossaryTermDesc) {
		_glossaryTermDesc = glossaryTermDesc;
	}

	@Override
	public String getActiveInd() {
		if (_activeInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeInd;
		}
	}

	@Override
	public void setActiveInd(String activeInd) {
		_activeInd = activeInd;
	}

	@Override
	public long getGlossaryOwner() {
		return _glossaryOwner;
	}

	@Override
	public void setGlossaryOwner(long glossaryOwner) {
		_glossaryOwner = glossaryOwner;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Glossary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Glossary toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Glossary)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GlossaryImpl glossaryImpl = new GlossaryImpl();

		glossaryImpl.setGlossaryId(getGlossaryId());
		glossaryImpl.setGlossaryTermText(getGlossaryTermText());
		glossaryImpl.setGlossaryTermDesc(getGlossaryTermDesc());
		glossaryImpl.setActiveInd(getActiveInd());
		glossaryImpl.setGlossaryOwner(getGlossaryOwner());
		glossaryImpl.setCreatorId(getCreatorId());
		glossaryImpl.setCreatedDate(getCreatedDate());
		glossaryImpl.setUpdatedBy(getUpdatedBy());
		glossaryImpl.setUpdatedDate(getUpdatedDate());

		glossaryImpl.resetOriginalValues();

		return glossaryImpl;
	}

	@Override
	public int compareTo(Glossary glossary) {
		long primaryKey = glossary.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Glossary)) {
			return false;
		}

		Glossary glossary = (Glossary)obj;

		long primaryKey = glossary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GlossaryModelImpl glossaryModelImpl = this;

		glossaryModelImpl._originalGlossaryId = glossaryModelImpl._glossaryId;

		glossaryModelImpl._setOriginalGlossaryId = false;

		glossaryModelImpl._originalGlossaryTermText = glossaryModelImpl._glossaryTermText;

		glossaryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Glossary> toCacheModel() {
		GlossaryCacheModel glossaryCacheModel = new GlossaryCacheModel();

		glossaryCacheModel.glossaryId = getGlossaryId();

		glossaryCacheModel.glossaryTermText = getGlossaryTermText();

		String glossaryTermText = glossaryCacheModel.glossaryTermText;

		if ((glossaryTermText != null) && (glossaryTermText.length() == 0)) {
			glossaryCacheModel.glossaryTermText = null;
		}

		glossaryCacheModel.glossaryTermDesc = getGlossaryTermDesc();

		String glossaryTermDesc = glossaryCacheModel.glossaryTermDesc;

		if ((glossaryTermDesc != null) && (glossaryTermDesc.length() == 0)) {
			glossaryCacheModel.glossaryTermDesc = null;
		}

		glossaryCacheModel.activeInd = getActiveInd();

		String activeInd = glossaryCacheModel.activeInd;

		if ((activeInd != null) && (activeInd.length() == 0)) {
			glossaryCacheModel.activeInd = null;
		}

		glossaryCacheModel.glossaryOwner = getGlossaryOwner();

		glossaryCacheModel.creatorId = getCreatorId();

		String creatorId = glossaryCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			glossaryCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			glossaryCacheModel.createdDate = createdDate.getTime();
		}
		else {
			glossaryCacheModel.createdDate = Long.MIN_VALUE;
		}

		glossaryCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = glossaryCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			glossaryCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			glossaryCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			glossaryCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return glossaryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{glossaryId=");
		sb.append(getGlossaryId());
		sb.append(", glossaryTermText=");
		sb.append(getGlossaryTermText());
		sb.append(", glossaryTermDesc=");
		sb.append(getGlossaryTermDesc());
		sb.append(", activeInd=");
		sb.append(getActiveInd());
		sb.append(", glossaryOwner=");
		sb.append(getGlossaryOwner());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.Glossary");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>glossaryId</column-name><column-value><![CDATA[");
		sb.append(getGlossaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryTermText</column-name><column-value><![CDATA[");
		sb.append(getGlossaryTermText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryTermDesc</column-name><column-value><![CDATA[");
		sb.append(getGlossaryTermDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeInd</column-name><column-value><![CDATA[");
		sb.append(getActiveInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryOwner</column-name><column-value><![CDATA[");
		sb.append(getGlossaryOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Glossary.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Glossary.class
		};
	private long _glossaryId;
	private long _originalGlossaryId;
	private boolean _setOriginalGlossaryId;
	private String _glossaryTermText;
	private String _originalGlossaryTermText;
	private String _glossaryTermDesc;
	private String _activeInd;
	private long _glossaryOwner;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private Glossary _escapedModel;
}