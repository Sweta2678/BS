/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.StandardsDisplayOrder;
import com.ihg.brandstandards.db.model.StandardsDisplayOrderModel;
import com.ihg.brandstandards.db.service.persistence.StandardsDisplayOrderPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StandardsDisplayOrder service. Represents a row in the &quot;STD_DISPLAY_ORDER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.StandardsDisplayOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandardsDisplayOrderImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see StandardsDisplayOrderImpl
 * @see com.ihg.brandstandards.db.model.StandardsDisplayOrder
 * @see com.ihg.brandstandards.db.model.StandardsDisplayOrderModel
 * @generated
 */
public class StandardsDisplayOrderModelImpl extends BaseModelImpl<StandardsDisplayOrder>
	implements StandardsDisplayOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a standards display order model instance should use the {@link com.ihg.brandstandards.db.model.StandardsDisplayOrder} interface instead.
	 */
	public static final String TABLE_NAME = "STD_DISPLAY_ORDER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "STD_ID", Types.BIGINT },
			{ "RGN_CD", Types.VARCHAR },
			{ "CHAIN_CD", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table STD_DISPLAY_ORDER (STD_ID LONG not null,RGN_CD VARCHAR(75) not null,CHAIN_CD VARCHAR(75) not null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null,primary key (STD_ID, RGN_CD, CHAIN_CD))";
	public static final String TABLE_SQL_DROP = "drop table STD_DISPLAY_ORDER";
	public static final String ORDER_BY_JPQL = " ORDER BY standardsDisplayOrder.id.stdId ASC, standardsDisplayOrder.id.regionCode ASC, standardsDisplayOrder.id.chainCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY STD_DISPLAY_ORDER.STD_ID ASC, STD_DISPLAY_ORDER.RGN_CD ASC, STD_DISPLAY_ORDER.CHAIN_CD ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.StandardsDisplayOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.StandardsDisplayOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.brandstandards.db.model.StandardsDisplayOrder"),
			true);
	public static long CHAINCODE_COLUMN_BITMASK = 1L;
	public static long REGIONCODE_COLUMN_BITMASK = 2L;
	public static long STDID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.StandardsDisplayOrder"));

	public StandardsDisplayOrderModelImpl() {
	}

	@Override
	public StandardsDisplayOrderPK getPrimaryKey() {
		return new StandardsDisplayOrderPK(_stdId, _regionCode, _chainCode);
	}

	@Override
	public void setPrimaryKey(StandardsDisplayOrderPK primaryKey) {
		setStdId(primaryKey.stdId);
		setRegionCode(primaryKey.regionCode);
		setChainCode(primaryKey.chainCode);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new StandardsDisplayOrderPK(_stdId, _regionCode, _chainCode);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((StandardsDisplayOrderPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return StandardsDisplayOrder.class;
	}

	@Override
	public String getModelClassName() {
		return StandardsDisplayOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stdId", getStdId());
		attributes.put("regionCode", getRegionCode());
		attributes.put("chainCode", getChainCode());
		attributes.put("displayOrder", getDisplayOrder());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String regionCode = (String)attributes.get("regionCode");

		if (regionCode != null) {
			setRegionCode(regionCode);
		}

		String chainCode = (String)attributes.get("chainCode");

		if (chainCode != null) {
			setChainCode(chainCode);
		}

		Long displayOrder = (Long)attributes.get("displayOrder");

		if (displayOrder != null) {
			setDisplayOrder(displayOrder);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_columnBitmask |= STDID_COLUMN_BITMASK;

		if (!_setOriginalStdId) {
			_setOriginalStdId = true;

			_originalStdId = _stdId;
		}

		_stdId = stdId;
	}

	public long getOriginalStdId() {
		return _originalStdId;
	}

	@Override
	public String getRegionCode() {
		if (_regionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionCode;
		}
	}

	@Override
	public void setRegionCode(String regionCode) {
		_columnBitmask |= REGIONCODE_COLUMN_BITMASK;

		if (_originalRegionCode == null) {
			_originalRegionCode = _regionCode;
		}

		_regionCode = regionCode;
	}

	public String getOriginalRegionCode() {
		return GetterUtil.getString(_originalRegionCode);
	}

	@Override
	public String getChainCode() {
		if (_chainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _chainCode;
		}
	}

	@Override
	public void setChainCode(String chainCode) {
		_columnBitmask |= CHAINCODE_COLUMN_BITMASK;

		if (_originalChainCode == null) {
			_originalChainCode = _chainCode;
		}

		_chainCode = chainCode;
	}

	public String getOriginalChainCode() {
		return GetterUtil.getString(_originalChainCode);
	}

	@Override
	public long getDisplayOrder() {
		return _displayOrder;
	}

	@Override
	public void setDisplayOrder(long displayOrder) {
		_displayOrder = displayOrder;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public StandardsDisplayOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StandardsDisplayOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StandardsDisplayOrderImpl standardsDisplayOrderImpl = new StandardsDisplayOrderImpl();

		standardsDisplayOrderImpl.setStdId(getStdId());
		standardsDisplayOrderImpl.setRegionCode(getRegionCode());
		standardsDisplayOrderImpl.setChainCode(getChainCode());
		standardsDisplayOrderImpl.setDisplayOrder(getDisplayOrder());
		standardsDisplayOrderImpl.setCreatorId(getCreatorId());
		standardsDisplayOrderImpl.setCreatedDate(getCreatedDate());
		standardsDisplayOrderImpl.setUpdatedBy(getUpdatedBy());
		standardsDisplayOrderImpl.setUpdatedDate(getUpdatedDate());

		standardsDisplayOrderImpl.resetOriginalValues();

		return standardsDisplayOrderImpl;
	}

	@Override
	public int compareTo(StandardsDisplayOrder standardsDisplayOrder) {
		StandardsDisplayOrderPK primaryKey = standardsDisplayOrder.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StandardsDisplayOrder)) {
			return false;
		}

		StandardsDisplayOrder standardsDisplayOrder = (StandardsDisplayOrder)obj;

		StandardsDisplayOrderPK primaryKey = standardsDisplayOrder.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		StandardsDisplayOrderModelImpl standardsDisplayOrderModelImpl = this;

		standardsDisplayOrderModelImpl._originalStdId = standardsDisplayOrderModelImpl._stdId;

		standardsDisplayOrderModelImpl._setOriginalStdId = false;

		standardsDisplayOrderModelImpl._originalRegionCode = standardsDisplayOrderModelImpl._regionCode;

		standardsDisplayOrderModelImpl._originalChainCode = standardsDisplayOrderModelImpl._chainCode;

		standardsDisplayOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StandardsDisplayOrder> toCacheModel() {
		StandardsDisplayOrderCacheModel standardsDisplayOrderCacheModel = new StandardsDisplayOrderCacheModel();

		standardsDisplayOrderCacheModel.stdId = getStdId();

		standardsDisplayOrderCacheModel.regionCode = getRegionCode();

		String regionCode = standardsDisplayOrderCacheModel.regionCode;

		if ((regionCode != null) && (regionCode.length() == 0)) {
			standardsDisplayOrderCacheModel.regionCode = null;
		}

		standardsDisplayOrderCacheModel.chainCode = getChainCode();

		String chainCode = standardsDisplayOrderCacheModel.chainCode;

		if ((chainCode != null) && (chainCode.length() == 0)) {
			standardsDisplayOrderCacheModel.chainCode = null;
		}

		standardsDisplayOrderCacheModel.displayOrder = getDisplayOrder();

		standardsDisplayOrderCacheModel.creatorId = getCreatorId();

		String creatorId = standardsDisplayOrderCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			standardsDisplayOrderCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			standardsDisplayOrderCacheModel.createdDate = createdDate.getTime();
		}
		else {
			standardsDisplayOrderCacheModel.createdDate = Long.MIN_VALUE;
		}

		standardsDisplayOrderCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = standardsDisplayOrderCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			standardsDisplayOrderCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			standardsDisplayOrderCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			standardsDisplayOrderCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return standardsDisplayOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{stdId=");
		sb.append(getStdId());
		sb.append(", regionCode=");
		sb.append(getRegionCode());
		sb.append(", chainCode=");
		sb.append(getChainCode());
		sb.append(", displayOrder=");
		sb.append(getDisplayOrder());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.StandardsDisplayOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionCode</column-name><column-value><![CDATA[");
		sb.append(getRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chainCode</column-name><column-value><![CDATA[");
		sb.append(getChainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrder</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandardsDisplayOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StandardsDisplayOrder.class
		};
	private long _stdId;
	private long _originalStdId;
	private boolean _setOriginalStdId;
	private String _regionCode;
	private String _originalRegionCode;
	private String _chainCode;
	private String _originalChainCode;
	private long _displayOrder;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private long _columnBitmask;
	private StandardsDisplayOrder _escapedModel;
}