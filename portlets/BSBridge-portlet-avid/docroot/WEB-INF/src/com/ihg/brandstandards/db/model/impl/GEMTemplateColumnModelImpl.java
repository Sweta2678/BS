/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMTemplateColumn;
import com.ihg.brandstandards.db.model.GEMTemplateColumnModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMTemplateColumn service. Represents a row in the &quot;GEM_TEMPLATE_COL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMTemplateColumnModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMTemplateColumnImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMTemplateColumnImpl
 * @see com.ihg.brandstandards.db.model.GEMTemplateColumn
 * @see com.ihg.brandstandards.db.model.GEMTemplateColumnModel
 * @generated
 */
public class GEMTemplateColumnModelImpl extends BaseModelImpl<GEMTemplateColumn>
	implements GEMTemplateColumnModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m template column model instance should use the {@link com.ihg.brandstandards.db.model.GEMTemplateColumn} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_TEMPLATE_COL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_TEMPLATE_COL_ID", Types.BIGINT },
			{ "GEM_TEMPLATE_ID", Types.BIGINT },
			{ "COL_NM", Types.VARCHAR },
			{ "VAL_DAT_TYP", Types.VARCHAR },
			{ "DFLT_VAL_TXT", Types.VARCHAR },
			{ "MAND_IND", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_TEMPLATE_COL (GEM_TEMPLATE_COL_ID LONG not null primary key,GEM_TEMPLATE_ID LONG,COL_NM VARCHAR(75) null,VAL_DAT_TYP VARCHAR(75) null,DFLT_VAL_TXT VARCHAR(75) null,MAND_IND VARCHAR(75) null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_TEMPLATE_COL";
	public static final String ORDER_BY_JPQL = " ORDER BY gemTemplateColumn.columnId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_TEMPLATE_COL.GEM_TEMPLATE_COL_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMTemplateColumn"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMTemplateColumn"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMTemplateColumn"));

	public GEMTemplateColumnModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _columnId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setColumnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _columnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMTemplateColumn.class;
	}

	@Override
	public String getModelClassName() {
		return GEMTemplateColumn.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("columnId", getColumnId());
		attributes.put("templateId", getTemplateId());
		attributes.put("columnName", getColumnName());
		attributes.put("valueType", getValueType());
		attributes.put("defaultValue", getDefaultValue());
		attributes.put("isMandatory", getIsMandatory());
		attributes.put("displayOrderNumber", getDisplayOrderNumber());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long columnId = (Long)attributes.get("columnId");

		if (columnId != null) {
			setColumnId(columnId);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		String columnName = (String)attributes.get("columnName");

		if (columnName != null) {
			setColumnName(columnName);
		}

		String valueType = (String)attributes.get("valueType");

		if (valueType != null) {
			setValueType(valueType);
		}

		String defaultValue = (String)attributes.get("defaultValue");

		if (defaultValue != null) {
			setDefaultValue(defaultValue);
		}

		String isMandatory = (String)attributes.get("isMandatory");

		if (isMandatory != null) {
			setIsMandatory(isMandatory);
		}

		Long displayOrderNumber = (Long)attributes.get("displayOrderNumber");

		if (displayOrderNumber != null) {
			setDisplayOrderNumber(displayOrderNumber);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getColumnId() {
		return _columnId;
	}

	@Override
	public void setColumnId(long columnId) {
		_columnId = columnId;
	}

	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		_templateId = templateId;
	}

	@Override
	public String getColumnName() {
		if (_columnName == null) {
			return StringPool.BLANK;
		}
		else {
			return _columnName;
		}
	}

	@Override
	public void setColumnName(String columnName) {
		_columnName = columnName;
	}

	@Override
	public String getValueType() {
		if (_valueType == null) {
			return StringPool.BLANK;
		}
		else {
			return _valueType;
		}
	}

	@Override
	public void setValueType(String valueType) {
		_valueType = valueType;
	}

	@Override
	public String getDefaultValue() {
		if (_defaultValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _defaultValue;
		}
	}

	@Override
	public void setDefaultValue(String defaultValue) {
		_defaultValue = defaultValue;
	}

	@Override
	public String getIsMandatory() {
		if (_isMandatory == null) {
			return StringPool.BLANK;
		}
		else {
			return _isMandatory;
		}
	}

	@Override
	public void setIsMandatory(String isMandatory) {
		_isMandatory = isMandatory;
	}

	@Override
	public long getDisplayOrderNumber() {
		return _displayOrderNumber;
	}

	@Override
	public void setDisplayOrderNumber(long displayOrderNumber) {
		_displayOrderNumber = displayOrderNumber;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMTemplateColumn.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMTemplateColumn toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMTemplateColumn)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMTemplateColumnImpl gemTemplateColumnImpl = new GEMTemplateColumnImpl();

		gemTemplateColumnImpl.setColumnId(getColumnId());
		gemTemplateColumnImpl.setTemplateId(getTemplateId());
		gemTemplateColumnImpl.setColumnName(getColumnName());
		gemTemplateColumnImpl.setValueType(getValueType());
		gemTemplateColumnImpl.setDefaultValue(getDefaultValue());
		gemTemplateColumnImpl.setIsMandatory(getIsMandatory());
		gemTemplateColumnImpl.setDisplayOrderNumber(getDisplayOrderNumber());
		gemTemplateColumnImpl.setCreatorId(getCreatorId());
		gemTemplateColumnImpl.setCreatedDate(getCreatedDate());
		gemTemplateColumnImpl.setUpdatedBy(getUpdatedBy());
		gemTemplateColumnImpl.setUpdatedDate(getUpdatedDate());

		gemTemplateColumnImpl.resetOriginalValues();

		return gemTemplateColumnImpl;
	}

	@Override
	public int compareTo(GEMTemplateColumn gemTemplateColumn) {
		long primaryKey = gemTemplateColumn.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMTemplateColumn)) {
			return false;
		}

		GEMTemplateColumn gemTemplateColumn = (GEMTemplateColumn)obj;

		long primaryKey = gemTemplateColumn.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMTemplateColumn> toCacheModel() {
		GEMTemplateColumnCacheModel gemTemplateColumnCacheModel = new GEMTemplateColumnCacheModel();

		gemTemplateColumnCacheModel.columnId = getColumnId();

		gemTemplateColumnCacheModel.templateId = getTemplateId();

		gemTemplateColumnCacheModel.columnName = getColumnName();

		String columnName = gemTemplateColumnCacheModel.columnName;

		if ((columnName != null) && (columnName.length() == 0)) {
			gemTemplateColumnCacheModel.columnName = null;
		}

		gemTemplateColumnCacheModel.valueType = getValueType();

		String valueType = gemTemplateColumnCacheModel.valueType;

		if ((valueType != null) && (valueType.length() == 0)) {
			gemTemplateColumnCacheModel.valueType = null;
		}

		gemTemplateColumnCacheModel.defaultValue = getDefaultValue();

		String defaultValue = gemTemplateColumnCacheModel.defaultValue;

		if ((defaultValue != null) && (defaultValue.length() == 0)) {
			gemTemplateColumnCacheModel.defaultValue = null;
		}

		gemTemplateColumnCacheModel.isMandatory = getIsMandatory();

		String isMandatory = gemTemplateColumnCacheModel.isMandatory;

		if ((isMandatory != null) && (isMandatory.length() == 0)) {
			gemTemplateColumnCacheModel.isMandatory = null;
		}

		gemTemplateColumnCacheModel.displayOrderNumber = getDisplayOrderNumber();

		gemTemplateColumnCacheModel.creatorId = getCreatorId();

		String creatorId = gemTemplateColumnCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemTemplateColumnCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemTemplateColumnCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemTemplateColumnCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemTemplateColumnCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemTemplateColumnCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemTemplateColumnCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemTemplateColumnCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemTemplateColumnCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemTemplateColumnCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{columnId=");
		sb.append(getColumnId());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append(", columnName=");
		sb.append(getColumnName());
		sb.append(", valueType=");
		sb.append(getValueType());
		sb.append(", defaultValue=");
		sb.append(getDefaultValue());
		sb.append(", isMandatory=");
		sb.append(getIsMandatory());
		sb.append(", displayOrderNumber=");
		sb.append(getDisplayOrderNumber());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMTemplateColumn");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>columnId</column-name><column-value><![CDATA[");
		sb.append(getColumnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columnName</column-name><column-value><![CDATA[");
		sb.append(getColumnName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>valueType</column-name><column-value><![CDATA[");
		sb.append(getValueType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultValue</column-name><column-value><![CDATA[");
		sb.append(getDefaultValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMandatory</column-name><column-value><![CDATA[");
		sb.append(getIsMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMTemplateColumn.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMTemplateColumn.class
		};
	private long _columnId;
	private long _templateId;
	private String _columnName;
	private String _valueType;
	private String _defaultValue;
	private String _isMandatory;
	private long _displayOrderNumber;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMTemplateColumn _escapedModel;
}