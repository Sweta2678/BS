/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GlossaryExt;
import com.ihg.brandstandards.db.model.GlossaryExtModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GlossaryExt service. Represents a row in the &quot;GLOSSARY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GlossaryExtModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlossaryExtImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GlossaryExtImpl
 * @see com.ihg.brandstandards.db.model.GlossaryExt
 * @see com.ihg.brandstandards.db.model.GlossaryExtModel
 * @generated
 */
public class GlossaryExtModelImpl extends BaseModelImpl<GlossaryExt>
	implements GlossaryExtModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a glossary ext model instance should use the {@link com.ihg.brandstandards.db.model.GlossaryExt} interface instead.
	 */
	public static final String TABLE_NAME = "GLOSSARY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GLOSSARY_ID", Types.BIGINT },
			{ "ACTV_IND", Types.VARCHAR },
			{ "GLOSSARY_TERM_TXT", Types.VARCHAR },
			{ "GLOSSARY_TERM_DESC", Types.VARCHAR },
			{ "REGIONS", Types.VARCHAR },
			{ "CHAINS", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GLOSSARY (GLOSSARY_ID LONG not null primary key,ACTV_IND VARCHAR(75) null,GLOSSARY_TERM_TXT VARCHAR(75) null,GLOSSARY_TERM_DESC VARCHAR(75) null,REGIONS VARCHAR(75) null,CHAINS VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GLOSSARY";
	public static final String ORDER_BY_JPQL = " ORDER BY glossaryExt.glossaryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GLOSSARY.GLOSSARY_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GlossaryExt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GlossaryExt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GlossaryExt"));

	public GlossaryExtModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGlossaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _glossaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GlossaryExt.class;
	}

	@Override
	public String getModelClassName() {
		return GlossaryExt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("glossaryId", getGlossaryId());
		attributes.put("activeInd", getActiveInd());
		attributes.put("glossaryTermText", getGlossaryTermText());
		attributes.put("glossaryTermDesc", getGlossaryTermDesc());
		attributes.put("glossaryRegions", getGlossaryRegions());
		attributes.put("glossaryChains", getGlossaryChains());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long glossaryId = (Long)attributes.get("glossaryId");

		if (glossaryId != null) {
			setGlossaryId(glossaryId);
		}

		String activeInd = (String)attributes.get("activeInd");

		if (activeInd != null) {
			setActiveInd(activeInd);
		}

		String glossaryTermText = (String)attributes.get("glossaryTermText");

		if (glossaryTermText != null) {
			setGlossaryTermText(glossaryTermText);
		}

		String glossaryTermDesc = (String)attributes.get("glossaryTermDesc");

		if (glossaryTermDesc != null) {
			setGlossaryTermDesc(glossaryTermDesc);
		}

		String glossaryRegions = (String)attributes.get("glossaryRegions");

		if (glossaryRegions != null) {
			setGlossaryRegions(glossaryRegions);
		}

		String glossaryChains = (String)attributes.get("glossaryChains");

		if (glossaryChains != null) {
			setGlossaryChains(glossaryChains);
		}
	}

	@Override
	public long getGlossaryId() {
		return _glossaryId;
	}

	@Override
	public void setGlossaryId(long glossaryId) {
		_glossaryId = glossaryId;
	}

	@Override
	public String getActiveInd() {
		if (_activeInd == null) {
			return StringPool.BLANK;
		}
		else {
			return _activeInd;
		}
	}

	@Override
	public void setActiveInd(String activeInd) {
		_activeInd = activeInd;
	}

	@Override
	public String getGlossaryTermText() {
		if (_glossaryTermText == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryTermText;
		}
	}

	@Override
	public void setGlossaryTermText(String glossaryTermText) {
		_glossaryTermText = glossaryTermText;
	}

	@Override
	public String getGlossaryTermDesc() {
		if (_glossaryTermDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryTermDesc;
		}
	}

	@Override
	public void setGlossaryTermDesc(String glossaryTermDesc) {
		_glossaryTermDesc = glossaryTermDesc;
	}

	@Override
	public String getGlossaryRegions() {
		if (_glossaryRegions == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryRegions;
		}
	}

	@Override
	public void setGlossaryRegions(String glossaryRegions) {
		_glossaryRegions = glossaryRegions;
	}

	@Override
	public String getGlossaryChains() {
		if (_glossaryChains == null) {
			return StringPool.BLANK;
		}
		else {
			return _glossaryChains;
		}
	}

	@Override
	public void setGlossaryChains(String glossaryChains) {
		_glossaryChains = glossaryChains;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GlossaryExt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GlossaryExt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GlossaryExt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GlossaryExtImpl glossaryExtImpl = new GlossaryExtImpl();

		glossaryExtImpl.setGlossaryId(getGlossaryId());
		glossaryExtImpl.setActiveInd(getActiveInd());
		glossaryExtImpl.setGlossaryTermText(getGlossaryTermText());
		glossaryExtImpl.setGlossaryTermDesc(getGlossaryTermDesc());
		glossaryExtImpl.setGlossaryRegions(getGlossaryRegions());
		glossaryExtImpl.setGlossaryChains(getGlossaryChains());

		glossaryExtImpl.resetOriginalValues();

		return glossaryExtImpl;
	}

	@Override
	public int compareTo(GlossaryExt glossaryExt) {
		long primaryKey = glossaryExt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GlossaryExt)) {
			return false;
		}

		GlossaryExt glossaryExt = (GlossaryExt)obj;

		long primaryKey = glossaryExt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GlossaryExt> toCacheModel() {
		GlossaryExtCacheModel glossaryExtCacheModel = new GlossaryExtCacheModel();

		glossaryExtCacheModel.glossaryId = getGlossaryId();

		glossaryExtCacheModel.activeInd = getActiveInd();

		String activeInd = glossaryExtCacheModel.activeInd;

		if ((activeInd != null) && (activeInd.length() == 0)) {
			glossaryExtCacheModel.activeInd = null;
		}

		glossaryExtCacheModel.glossaryTermText = getGlossaryTermText();

		String glossaryTermText = glossaryExtCacheModel.glossaryTermText;

		if ((glossaryTermText != null) && (glossaryTermText.length() == 0)) {
			glossaryExtCacheModel.glossaryTermText = null;
		}

		glossaryExtCacheModel.glossaryTermDesc = getGlossaryTermDesc();

		String glossaryTermDesc = glossaryExtCacheModel.glossaryTermDesc;

		if ((glossaryTermDesc != null) && (glossaryTermDesc.length() == 0)) {
			glossaryExtCacheModel.glossaryTermDesc = null;
		}

		glossaryExtCacheModel.glossaryRegions = getGlossaryRegions();

		String glossaryRegions = glossaryExtCacheModel.glossaryRegions;

		if ((glossaryRegions != null) && (glossaryRegions.length() == 0)) {
			glossaryExtCacheModel.glossaryRegions = null;
		}

		glossaryExtCacheModel.glossaryChains = getGlossaryChains();

		String glossaryChains = glossaryExtCacheModel.glossaryChains;

		if ((glossaryChains != null) && (glossaryChains.length() == 0)) {
			glossaryExtCacheModel.glossaryChains = null;
		}

		return glossaryExtCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{glossaryId=");
		sb.append(getGlossaryId());
		sb.append(", activeInd=");
		sb.append(getActiveInd());
		sb.append(", glossaryTermText=");
		sb.append(getGlossaryTermText());
		sb.append(", glossaryTermDesc=");
		sb.append(getGlossaryTermDesc());
		sb.append(", glossaryRegions=");
		sb.append(getGlossaryRegions());
		sb.append(", glossaryChains=");
		sb.append(getGlossaryChains());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GlossaryExt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>glossaryId</column-name><column-value><![CDATA[");
		sb.append(getGlossaryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeInd</column-name><column-value><![CDATA[");
		sb.append(getActiveInd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryTermText</column-name><column-value><![CDATA[");
		sb.append(getGlossaryTermText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryTermDesc</column-name><column-value><![CDATA[");
		sb.append(getGlossaryTermDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryRegions</column-name><column-value><![CDATA[");
		sb.append(getGlossaryRegions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>glossaryChains</column-name><column-value><![CDATA[");
		sb.append(getGlossaryChains());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GlossaryExt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GlossaryExt.class
		};
	private long _glossaryId;
	private String _activeInd;
	private String _glossaryTermText;
	private String _glossaryTermDesc;
	private String _glossaryRegions;
	private String _glossaryChains;
	private GlossaryExt _escapedModel;
}