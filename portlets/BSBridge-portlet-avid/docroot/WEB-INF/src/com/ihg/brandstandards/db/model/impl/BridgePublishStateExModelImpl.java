/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.BridgePublishStateEx;
import com.ihg.brandstandards.db.model.BridgePublishStateExModel;
import com.ihg.brandstandards.db.service.persistence.BridgePublishStateExPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BridgePublishStateEx service. Represents a row in the &quot;BRIDGE_PUBLISH_STAT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.BridgePublishStateExModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BridgePublishStateExImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see BridgePublishStateExImpl
 * @see com.ihg.brandstandards.db.model.BridgePublishStateEx
 * @see com.ihg.brandstandards.db.model.BridgePublishStateExModel
 * @generated
 */
public class BridgePublishStateExModelImpl extends BaseModelImpl<BridgePublishStateEx>
	implements BridgePublishStateExModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bridge publish state ex model instance should use the {@link com.ihg.brandstandards.db.model.BridgePublishStateEx} interface instead.
	 */
	public static final String TABLE_NAME = "BRIDGE_PUBLISH_STAT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "BRIDGE_PUBLISH_ID", Types.BIGINT },
			{ "STD_ID", Types.BIGINT },
			{ "TAX_TITLE_TXT", Types.VARCHAR },
			{ "TITLE", Types.VARCHAR },
			{ "PATH", Types.VARCHAR },
			{ "PRNT_STD_ID", Types.BIGINT },
			{ "STAT_CD", Types.VARCHAR },
			{ "STD_TYP", Types.VARCHAR },
			{ "MNL_TYP", Types.VARCHAR },
			{ "STAT_COUNT", Types.BIGINT },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "TAXONOMY_ID", Types.BIGINT },
			{ "PRNT_TAXONOMY_ID", Types.BIGINT },
			{ "INDX_ORDER", Types.BIGINT },
			{ "LVL", Types.BIGINT },
			{ "HIER_LVL_NBR", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table BRIDGE_PUBLISH_STAT (BRIDGE_PUBLISH_ID LONG not null,STD_ID LONG not null,TAX_TITLE_TXT VARCHAR(75) null,TITLE VARCHAR(75) null,PATH VARCHAR(75) null,PRNT_STD_ID LONG,STAT_CD VARCHAR(75) null,STD_TYP VARCHAR(75) null,MNL_TYP VARCHAR(75) null,STAT_COUNT LONG,DISP_ORDER_NBR LONG,TAXONOMY_ID LONG,PRNT_TAXONOMY_ID LONG,INDX_ORDER LONG,LVL LONG,HIER_LVL_NBR LONG,primary key (BRIDGE_PUBLISH_ID, STD_ID))";
	public static final String TABLE_SQL_DROP = "drop table BRIDGE_PUBLISH_STAT";
	public static final String ORDER_BY_JPQL = " ORDER BY bridgePublishStateEx.id.publishId ASC, bridgePublishStateEx.id.stdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BRIDGE_PUBLISH_STAT.BRIDGE_PUBLISH_ID ASC, BRIDGE_PUBLISH_STAT.STD_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishStateEx"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.BridgePublishStateEx"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.BridgePublishStateEx"));

	public BridgePublishStateExModelImpl() {
	}

	@Override
	public BridgePublishStateExPK getPrimaryKey() {
		return new BridgePublishStateExPK(_publishId, _stdId);
	}

	@Override
	public void setPrimaryKey(BridgePublishStateExPK primaryKey) {
		setPublishId(primaryKey.publishId);
		setStdId(primaryKey.stdId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new BridgePublishStateExPK(_publishId, _stdId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((BridgePublishStateExPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return BridgePublishStateEx.class;
	}

	@Override
	public String getModelClassName() {
		return BridgePublishStateEx.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publishId", getPublishId());
		attributes.put("stdId", getStdId());
		attributes.put("taxonomyTitle", getTaxonomyTitle());
		attributes.put("title", getTitle());
		attributes.put("path", getPath());
		attributes.put("parentStdId", getParentStdId());
		attributes.put("stateCd", getStateCd());
		attributes.put("type", getType());
		attributes.put("manualType", getManualType());
		attributes.put("count", getCount());
		attributes.put("displayOrder", getDisplayOrder());
		attributes.put("taxonomyId", getTaxonomyId());
		attributes.put("parentTaxonomyId", getParentTaxonomyId());
		attributes.put("indexOrder", getIndexOrder());
		attributes.put("level", getLevel());
		attributes.put("levelSortOrder", getLevelSortOrder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long stdId = (Long)attributes.get("stdId");

		if (stdId != null) {
			setStdId(stdId);
		}

		String taxonomyTitle = (String)attributes.get("taxonomyTitle");

		if (taxonomyTitle != null) {
			setTaxonomyTitle(taxonomyTitle);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Long parentStdId = (Long)attributes.get("parentStdId");

		if (parentStdId != null) {
			setParentStdId(parentStdId);
		}

		String stateCd = (String)attributes.get("stateCd");

		if (stateCd != null) {
			setStateCd(stateCd);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String manualType = (String)attributes.get("manualType");

		if (manualType != null) {
			setManualType(manualType);
		}

		Long count = (Long)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Long displayOrder = (Long)attributes.get("displayOrder");

		if (displayOrder != null) {
			setDisplayOrder(displayOrder);
		}

		Long taxonomyId = (Long)attributes.get("taxonomyId");

		if (taxonomyId != null) {
			setTaxonomyId(taxonomyId);
		}

		Long parentTaxonomyId = (Long)attributes.get("parentTaxonomyId");

		if (parentTaxonomyId != null) {
			setParentTaxonomyId(parentTaxonomyId);
		}

		Long indexOrder = (Long)attributes.get("indexOrder");

		if (indexOrder != null) {
			setIndexOrder(indexOrder);
		}

		Long level = (Long)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Long levelSortOrder = (Long)attributes.get("levelSortOrder");

		if (levelSortOrder != null) {
			setLevelSortOrder(levelSortOrder);
		}
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_publishId = publishId;
	}

	@Override
	public long getStdId() {
		return _stdId;
	}

	@Override
	public void setStdId(long stdId) {
		_stdId = stdId;
	}

	@Override
	public String getTaxonomyTitle() {
		if (_taxonomyTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxonomyTitle;
		}
	}

	@Override
	public void setTaxonomyTitle(String taxonomyTitle) {
		_taxonomyTitle = taxonomyTitle;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@Override
	public long getParentStdId() {
		return _parentStdId;
	}

	@Override
	public void setParentStdId(long parentStdId) {
		_parentStdId = parentStdId;
	}

	@Override
	public String getStateCd() {
		if (_stateCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCd;
		}
	}

	@Override
	public void setStateCd(String stateCd) {
		_stateCd = stateCd;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getManualType() {
		if (_manualType == null) {
			return StringPool.BLANK;
		}
		else {
			return _manualType;
		}
	}

	@Override
	public void setManualType(String manualType) {
		_manualType = manualType;
	}

	@Override
	public long getCount() {
		return _count;
	}

	@Override
	public void setCount(long count) {
		_count = count;
	}

	@Override
	public long getDisplayOrder() {
		return _displayOrder;
	}

	@Override
	public void setDisplayOrder(long displayOrder) {
		_displayOrder = displayOrder;
	}

	@Override
	public long getTaxonomyId() {
		return _taxonomyId;
	}

	@Override
	public void setTaxonomyId(long taxonomyId) {
		_taxonomyId = taxonomyId;
	}

	@Override
	public long getParentTaxonomyId() {
		return _parentTaxonomyId;
	}

	@Override
	public void setParentTaxonomyId(long parentTaxonomyId) {
		_parentTaxonomyId = parentTaxonomyId;
	}

	@Override
	public long getIndexOrder() {
		return _indexOrder;
	}

	@Override
	public void setIndexOrder(long indexOrder) {
		_indexOrder = indexOrder;
	}

	@Override
	public long getLevel() {
		return _level;
	}

	@Override
	public void setLevel(long level) {
		_level = level;
	}

	@Override
	public long getLevelSortOrder() {
		return _levelSortOrder;
	}

	@Override
	public void setLevelSortOrder(long levelSortOrder) {
		_levelSortOrder = levelSortOrder;
	}

	@Override
	public BridgePublishStateEx toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BridgePublishStateEx)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BridgePublishStateExImpl bridgePublishStateExImpl = new BridgePublishStateExImpl();

		bridgePublishStateExImpl.setPublishId(getPublishId());
		bridgePublishStateExImpl.setStdId(getStdId());
		bridgePublishStateExImpl.setTaxonomyTitle(getTaxonomyTitle());
		bridgePublishStateExImpl.setTitle(getTitle());
		bridgePublishStateExImpl.setPath(getPath());
		bridgePublishStateExImpl.setParentStdId(getParentStdId());
		bridgePublishStateExImpl.setStateCd(getStateCd());
		bridgePublishStateExImpl.setType(getType());
		bridgePublishStateExImpl.setManualType(getManualType());
		bridgePublishStateExImpl.setCount(getCount());
		bridgePublishStateExImpl.setDisplayOrder(getDisplayOrder());
		bridgePublishStateExImpl.setTaxonomyId(getTaxonomyId());
		bridgePublishStateExImpl.setParentTaxonomyId(getParentTaxonomyId());
		bridgePublishStateExImpl.setIndexOrder(getIndexOrder());
		bridgePublishStateExImpl.setLevel(getLevel());
		bridgePublishStateExImpl.setLevelSortOrder(getLevelSortOrder());

		bridgePublishStateExImpl.resetOriginalValues();

		return bridgePublishStateExImpl;
	}

	@Override
	public int compareTo(BridgePublishStateEx bridgePublishStateEx) {
		BridgePublishStateExPK primaryKey = bridgePublishStateEx.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BridgePublishStateEx)) {
			return false;
		}

		BridgePublishStateEx bridgePublishStateEx = (BridgePublishStateEx)obj;

		BridgePublishStateExPK primaryKey = bridgePublishStateEx.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<BridgePublishStateEx> toCacheModel() {
		BridgePublishStateExCacheModel bridgePublishStateExCacheModel = new BridgePublishStateExCacheModel();

		bridgePublishStateExCacheModel.publishId = getPublishId();

		bridgePublishStateExCacheModel.stdId = getStdId();

		bridgePublishStateExCacheModel.taxonomyTitle = getTaxonomyTitle();

		String taxonomyTitle = bridgePublishStateExCacheModel.taxonomyTitle;

		if ((taxonomyTitle != null) && (taxonomyTitle.length() == 0)) {
			bridgePublishStateExCacheModel.taxonomyTitle = null;
		}

		bridgePublishStateExCacheModel.title = getTitle();

		String title = bridgePublishStateExCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bridgePublishStateExCacheModel.title = null;
		}

		bridgePublishStateExCacheModel.path = getPath();

		String path = bridgePublishStateExCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			bridgePublishStateExCacheModel.path = null;
		}

		bridgePublishStateExCacheModel.parentStdId = getParentStdId();

		bridgePublishStateExCacheModel.stateCd = getStateCd();

		String stateCd = bridgePublishStateExCacheModel.stateCd;

		if ((stateCd != null) && (stateCd.length() == 0)) {
			bridgePublishStateExCacheModel.stateCd = null;
		}

		bridgePublishStateExCacheModel.type = getType();

		String type = bridgePublishStateExCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			bridgePublishStateExCacheModel.type = null;
		}

		bridgePublishStateExCacheModel.manualType = getManualType();

		String manualType = bridgePublishStateExCacheModel.manualType;

		if ((manualType != null) && (manualType.length() == 0)) {
			bridgePublishStateExCacheModel.manualType = null;
		}

		bridgePublishStateExCacheModel.count = getCount();

		bridgePublishStateExCacheModel.displayOrder = getDisplayOrder();

		bridgePublishStateExCacheModel.taxonomyId = getTaxonomyId();

		bridgePublishStateExCacheModel.parentTaxonomyId = getParentTaxonomyId();

		bridgePublishStateExCacheModel.indexOrder = getIndexOrder();

		bridgePublishStateExCacheModel.level = getLevel();

		bridgePublishStateExCacheModel.levelSortOrder = getLevelSortOrder();

		return bridgePublishStateExCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{publishId=");
		sb.append(getPublishId());
		sb.append(", stdId=");
		sb.append(getStdId());
		sb.append(", taxonomyTitle=");
		sb.append(getTaxonomyTitle());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", parentStdId=");
		sb.append(getParentStdId());
		sb.append(", stateCd=");
		sb.append(getStateCd());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", manualType=");
		sb.append(getManualType());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", displayOrder=");
		sb.append(getDisplayOrder());
		sb.append(", taxonomyId=");
		sb.append(getTaxonomyId());
		sb.append(", parentTaxonomyId=");
		sb.append(getParentTaxonomyId());
		sb.append(", indexOrder=");
		sb.append(getIndexOrder());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", levelSortOrder=");
		sb.append(getLevelSortOrder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.BridgePublishStateEx");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stdId</column-name><column-value><![CDATA[");
		sb.append(getStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyTitle</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentStdId</column-name><column-value><![CDATA[");
		sb.append(getParentStdId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCd</column-name><column-value><![CDATA[");
		sb.append(getStateCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manualType</column-name><column-value><![CDATA[");
		sb.append(getManualType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrder</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxonomyId</column-name><column-value><![CDATA[");
		sb.append(getTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTaxonomyId</column-name><column-value><![CDATA[");
		sb.append(getParentTaxonomyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexOrder</column-name><column-value><![CDATA[");
		sb.append(getIndexOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>levelSortOrder</column-name><column-value><![CDATA[");
		sb.append(getLevelSortOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BridgePublishStateEx.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BridgePublishStateEx.class
		};
	private long _publishId;
	private long _stdId;
	private String _taxonomyTitle;
	private String _title;
	private String _path;
	private long _parentStdId;
	private String _stateCd;
	private String _type;
	private String _manualType;
	private long _count;
	private long _displayOrder;
	private long _taxonomyId;
	private long _parentTaxonomyId;
	private long _indexOrder;
	private long _level;
	private long _levelSortOrder;
	private BridgePublishStateEx _escapedModel;
}