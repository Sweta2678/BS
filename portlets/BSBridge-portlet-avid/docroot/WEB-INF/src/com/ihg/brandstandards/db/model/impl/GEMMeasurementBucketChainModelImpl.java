/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMMeasurementBucketChain;
import com.ihg.brandstandards.db.model.GEMMeasurementBucketChainModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMMeasurementBucketChain service. Represents a row in the &quot;GEM_MSRMNT_BUCKET_CHAIN&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMMeasurementBucketChainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMMeasurementBucketChainImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMMeasurementBucketChainImpl
 * @see com.ihg.brandstandards.db.model.GEMMeasurementBucketChain
 * @see com.ihg.brandstandards.db.model.GEMMeasurementBucketChainModel
 * @generated
 */
public class GEMMeasurementBucketChainModelImpl extends BaseModelImpl<GEMMeasurementBucketChain>
	implements GEMMeasurementBucketChainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m measurement bucket chain model instance should use the {@link com.ihg.brandstandards.db.model.GEMMeasurementBucketChain} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_MSRMNT_BUCKET_CHAIN";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_MSRMNT_BUCKET_CHAIN_ID", Types.BIGINT },
			{ "GEM_MGT_BUCKET_ID", Types.BIGINT },
			{ "GEM_SEVERITY_ID", Types.BIGINT },
			{ "GEM_MSRMNT_ID", Types.BIGINT },
			{ "GEM_PUBLISH_DEPT_ID", Types.BIGINT },
			{ "PUBLISH_ID", Types.BIGINT },
			{ "RGN_ID", Types.BIGINT },
			{ "GEM_SUB_RGN_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_MSRMNT_BUCKET_CHAIN (GEM_MSRMNT_BUCKET_CHAIN_ID LONG not null primary key,GEM_MGT_BUCKET_ID LONG,GEM_SEVERITY_ID LONG,GEM_MSRMNT_ID LONG,GEM_PUBLISH_DEPT_ID LONG,PUBLISH_ID LONG,RGN_ID LONG,GEM_SUB_RGN_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_MSRMNT_BUCKET_CHAIN";
	public static final String ORDER_BY_JPQL = " ORDER BY gemMeasurementBucketChain.measurementBucketChainId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_MSRMNT_BUCKET_CHAIN.GEM_MSRMNT_BUCKET_CHAIN_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMMeasurementBucketChain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMMeasurementBucketChain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMMeasurementBucketChain"));

	public GEMMeasurementBucketChainModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _measurementBucketChainId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMeasurementBucketChainId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _measurementBucketChainId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMMeasurementBucketChain.class;
	}

	@Override
	public String getModelClassName() {
		return GEMMeasurementBucketChain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("measurementBucketChainId", getMeasurementBucketChainId());
		attributes.put("bucketId", getBucketId());
		attributes.put("severityId", getSeverityId());
		attributes.put("measurementId", getMeasurementId());
		attributes.put("publishDeptId", getPublishDeptId());
		attributes.put("publishId", getPublishId());
		attributes.put("regionId", getRegionId());
		attributes.put("subRegionCd", getSubRegionCd());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long measurementBucketChainId = (Long)attributes.get(
				"measurementBucketChainId");

		if (measurementBucketChainId != null) {
			setMeasurementBucketChainId(measurementBucketChainId);
		}

		Long bucketId = (Long)attributes.get("bucketId");

		if (bucketId != null) {
			setBucketId(bucketId);
		}

		Long severityId = (Long)attributes.get("severityId");

		if (severityId != null) {
			setSeverityId(severityId);
		}

		Long measurementId = (Long)attributes.get("measurementId");

		if (measurementId != null) {
			setMeasurementId(measurementId);
		}

		Long publishDeptId = (Long)attributes.get("publishDeptId");

		if (publishDeptId != null) {
			setPublishDeptId(publishDeptId);
		}

		Long publishId = (Long)attributes.get("publishId");

		if (publishId != null) {
			setPublishId(publishId);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String subRegionCd = (String)attributes.get("subRegionCd");

		if (subRegionCd != null) {
			setSubRegionCd(subRegionCd);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getMeasurementBucketChainId() {
		return _measurementBucketChainId;
	}

	@Override
	public void setMeasurementBucketChainId(long measurementBucketChainId) {
		_measurementBucketChainId = measurementBucketChainId;
	}

	@Override
	public long getBucketId() {
		return _bucketId;
	}

	@Override
	public void setBucketId(long bucketId) {
		_bucketId = bucketId;
	}

	@Override
	public long getSeverityId() {
		return _severityId;
	}

	@Override
	public void setSeverityId(long severityId) {
		_severityId = severityId;
	}

	@Override
	public long getMeasurementId() {
		return _measurementId;
	}

	@Override
	public void setMeasurementId(long measurementId) {
		_measurementId = measurementId;
	}

	@Override
	public long getPublishDeptId() {
		return _publishDeptId;
	}

	@Override
	public void setPublishDeptId(long publishDeptId) {
		_publishDeptId = publishDeptId;
	}

	@Override
	public long getPublishId() {
		return _publishId;
	}

	@Override
	public void setPublishId(long publishId) {
		_publishId = publishId;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public String getSubRegionCd() {
		if (_subRegionCd == null) {
			return StringPool.BLANK;
		}
		else {
			return _subRegionCd;
		}
	}

	@Override
	public void setSubRegionCd(String subRegionCd) {
		_subRegionCd = subRegionCd;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMMeasurementBucketChain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMMeasurementBucketChain toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMMeasurementBucketChain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMMeasurementBucketChainImpl gemMeasurementBucketChainImpl = new GEMMeasurementBucketChainImpl();

		gemMeasurementBucketChainImpl.setMeasurementBucketChainId(getMeasurementBucketChainId());
		gemMeasurementBucketChainImpl.setBucketId(getBucketId());
		gemMeasurementBucketChainImpl.setSeverityId(getSeverityId());
		gemMeasurementBucketChainImpl.setMeasurementId(getMeasurementId());
		gemMeasurementBucketChainImpl.setPublishDeptId(getPublishDeptId());
		gemMeasurementBucketChainImpl.setPublishId(getPublishId());
		gemMeasurementBucketChainImpl.setRegionId(getRegionId());
		gemMeasurementBucketChainImpl.setSubRegionCd(getSubRegionCd());
		gemMeasurementBucketChainImpl.setCreatorId(getCreatorId());
		gemMeasurementBucketChainImpl.setCreatedDate(getCreatedDate());
		gemMeasurementBucketChainImpl.setUpdatedBy(getUpdatedBy());
		gemMeasurementBucketChainImpl.setUpdatedDate(getUpdatedDate());

		gemMeasurementBucketChainImpl.resetOriginalValues();

		return gemMeasurementBucketChainImpl;
	}

	@Override
	public int compareTo(GEMMeasurementBucketChain gemMeasurementBucketChain) {
		long primaryKey = gemMeasurementBucketChain.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMMeasurementBucketChain)) {
			return false;
		}

		GEMMeasurementBucketChain gemMeasurementBucketChain = (GEMMeasurementBucketChain)obj;

		long primaryKey = gemMeasurementBucketChain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMMeasurementBucketChain> toCacheModel() {
		GEMMeasurementBucketChainCacheModel gemMeasurementBucketChainCacheModel = new GEMMeasurementBucketChainCacheModel();

		gemMeasurementBucketChainCacheModel.measurementBucketChainId = getMeasurementBucketChainId();

		gemMeasurementBucketChainCacheModel.bucketId = getBucketId();

		gemMeasurementBucketChainCacheModel.severityId = getSeverityId();

		gemMeasurementBucketChainCacheModel.measurementId = getMeasurementId();

		gemMeasurementBucketChainCacheModel.publishDeptId = getPublishDeptId();

		gemMeasurementBucketChainCacheModel.publishId = getPublishId();

		gemMeasurementBucketChainCacheModel.regionId = getRegionId();

		gemMeasurementBucketChainCacheModel.subRegionCd = getSubRegionCd();

		String subRegionCd = gemMeasurementBucketChainCacheModel.subRegionCd;

		if ((subRegionCd != null) && (subRegionCd.length() == 0)) {
			gemMeasurementBucketChainCacheModel.subRegionCd = null;
		}

		gemMeasurementBucketChainCacheModel.creatorId = getCreatorId();

		String creatorId = gemMeasurementBucketChainCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemMeasurementBucketChainCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemMeasurementBucketChainCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemMeasurementBucketChainCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemMeasurementBucketChainCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemMeasurementBucketChainCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemMeasurementBucketChainCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemMeasurementBucketChainCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemMeasurementBucketChainCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemMeasurementBucketChainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{measurementBucketChainId=");
		sb.append(getMeasurementBucketChainId());
		sb.append(", bucketId=");
		sb.append(getBucketId());
		sb.append(", severityId=");
		sb.append(getSeverityId());
		sb.append(", measurementId=");
		sb.append(getMeasurementId());
		sb.append(", publishDeptId=");
		sb.append(getPublishDeptId());
		sb.append(", publishId=");
		sb.append(getPublishId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", subRegionCd=");
		sb.append(getSubRegionCd());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMMeasurementBucketChain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>measurementBucketChainId</column-name><column-value><![CDATA[");
		sb.append(getMeasurementBucketChainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bucketId</column-name><column-value><![CDATA[");
		sb.append(getBucketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>severityId</column-name><column-value><![CDATA[");
		sb.append(getSeverityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>measurementId</column-name><column-value><![CDATA[");
		sb.append(getMeasurementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDeptId</column-name><column-value><![CDATA[");
		sb.append(getPublishDeptId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishId</column-name><column-value><![CDATA[");
		sb.append(getPublishId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subRegionCd</column-name><column-value><![CDATA[");
		sb.append(getSubRegionCd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMMeasurementBucketChain.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMMeasurementBucketChain.class
		};
	private long _measurementBucketChainId;
	private long _bucketId;
	private long _severityId;
	private long _measurementId;
	private long _publishDeptId;
	private long _publishId;
	private long _regionId;
	private String _subRegionCd;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMMeasurementBucketChain _escapedModel;
}