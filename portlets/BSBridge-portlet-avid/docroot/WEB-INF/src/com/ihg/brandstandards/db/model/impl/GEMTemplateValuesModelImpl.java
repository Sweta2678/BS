/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.brandstandards.db.model.impl;

import com.ihg.brandstandards.db.model.GEMTemplateValues;
import com.ihg.brandstandards.db.model.GEMTemplateValuesModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GEMTemplateValues service. Represents a row in the &quot;GEM_TEMPLATE_VAL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.brandstandards.db.model.GEMTemplateValuesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GEMTemplateValuesImpl}.
 * </p>
 *
 * @author Mummanedi
 * @see GEMTemplateValuesImpl
 * @see com.ihg.brandstandards.db.model.GEMTemplateValues
 * @see com.ihg.brandstandards.db.model.GEMTemplateValuesModel
 * @generated
 */
public class GEMTemplateValuesModelImpl extends BaseModelImpl<GEMTemplateValues>
	implements GEMTemplateValuesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g e m template values model instance should use the {@link com.ihg.brandstandards.db.model.GEMTemplateValues} interface instead.
	 */
	public static final String TABLE_NAME = "GEM_TEMPLATE_VAL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "GEM_TEMPLATE_VAL_ID", Types.BIGINT },
			{ "GEM_TEMPLATE_COL_ID", Types.BIGINT },
			{ "GEM_CATGY_ID", Types.BIGINT },
			{ "COL_VAL", Types.VARCHAR },
			{ "DISP_ORDER_NBR", Types.BIGINT },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table GEM_TEMPLATE_VAL (GEM_TEMPLATE_VAL_ID LONG not null primary key,GEM_TEMPLATE_COL_ID LONG,GEM_CATGY_ID LONG,COL_VAL VARCHAR(75) null,DISP_ORDER_NBR LONG,CREAT_USR_ID VARCHAR(75) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(75) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table GEM_TEMPLATE_VAL";
	public static final String ORDER_BY_JPQL = " ORDER BY gemTemplateValues.valueId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GEM_TEMPLATE_VAL.GEM_TEMPLATE_VAL_ID ASC";
	public static final String DATA_SOURCE = "brandstandDataSource";
	public static final String SESSION_FACTORY = "BRNDSTNDSessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.brandstandards.db.model.GEMTemplateValues"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.brandstandards.db.model.GEMTemplateValues"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.brandstandards.db.model.GEMTemplateValues"));

	public GEMTemplateValuesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _valueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setValueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _valueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GEMTemplateValues.class;
	}

	@Override
	public String getModelClassName() {
		return GEMTemplateValues.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("valueId", getValueId());
		attributes.put("columnId", getColumnId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("columnValue", getColumnValue());
		attributes.put("displayOrderNumber", getDisplayOrderNumber());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("updatedDate", getUpdatedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long valueId = (Long)attributes.get("valueId");

		if (valueId != null) {
			setValueId(valueId);
		}

		Long columnId = (Long)attributes.get("columnId");

		if (columnId != null) {
			setColumnId(columnId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		String columnValue = (String)attributes.get("columnValue");

		if (columnValue != null) {
			setColumnValue(columnValue);
		}

		Long displayOrderNumber = (Long)attributes.get("displayOrderNumber");

		if (displayOrderNumber != null) {
			setDisplayOrderNumber(displayOrderNumber);
		}

		String creatorId = (String)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}
	}

	@Override
	public long getValueId() {
		return _valueId;
	}

	@Override
	public void setValueId(long valueId) {
		_valueId = valueId;
	}

	@Override
	public long getColumnId() {
		return _columnId;
	}

	@Override
	public void setColumnId(long columnId) {
		_columnId = columnId;
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	@Override
	public String getColumnValue() {
		if (_columnValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _columnValue;
		}
	}

	@Override
	public void setColumnValue(String columnValue) {
		_columnValue = columnValue;
	}

	@Override
	public long getDisplayOrderNumber() {
		return _displayOrderNumber;
	}

	@Override
	public void setDisplayOrderNumber(long displayOrderNumber) {
		_displayOrderNumber = displayOrderNumber;
	}

	@Override
	public String getCreatorId() {
		if (_creatorId == null) {
			return StringPool.BLANK;
		}
		else {
			return _creatorId;
		}
	}

	@Override
	public void setCreatorId(String creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GEMTemplateValues.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GEMTemplateValues toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GEMTemplateValues)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GEMTemplateValuesImpl gemTemplateValuesImpl = new GEMTemplateValuesImpl();

		gemTemplateValuesImpl.setValueId(getValueId());
		gemTemplateValuesImpl.setColumnId(getColumnId());
		gemTemplateValuesImpl.setCategoryId(getCategoryId());
		gemTemplateValuesImpl.setColumnValue(getColumnValue());
		gemTemplateValuesImpl.setDisplayOrderNumber(getDisplayOrderNumber());
		gemTemplateValuesImpl.setCreatorId(getCreatorId());
		gemTemplateValuesImpl.setCreatedDate(getCreatedDate());
		gemTemplateValuesImpl.setUpdatedBy(getUpdatedBy());
		gemTemplateValuesImpl.setUpdatedDate(getUpdatedDate());

		gemTemplateValuesImpl.resetOriginalValues();

		return gemTemplateValuesImpl;
	}

	@Override
	public int compareTo(GEMTemplateValues gemTemplateValues) {
		long primaryKey = gemTemplateValues.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GEMTemplateValues)) {
			return false;
		}

		GEMTemplateValues gemTemplateValues = (GEMTemplateValues)obj;

		long primaryKey = gemTemplateValues.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GEMTemplateValues> toCacheModel() {
		GEMTemplateValuesCacheModel gemTemplateValuesCacheModel = new GEMTemplateValuesCacheModel();

		gemTemplateValuesCacheModel.valueId = getValueId();

		gemTemplateValuesCacheModel.columnId = getColumnId();

		gemTemplateValuesCacheModel.categoryId = getCategoryId();

		gemTemplateValuesCacheModel.columnValue = getColumnValue();

		String columnValue = gemTemplateValuesCacheModel.columnValue;

		if ((columnValue != null) && (columnValue.length() == 0)) {
			gemTemplateValuesCacheModel.columnValue = null;
		}

		gemTemplateValuesCacheModel.displayOrderNumber = getDisplayOrderNumber();

		gemTemplateValuesCacheModel.creatorId = getCreatorId();

		String creatorId = gemTemplateValuesCacheModel.creatorId;

		if ((creatorId != null) && (creatorId.length() == 0)) {
			gemTemplateValuesCacheModel.creatorId = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			gemTemplateValuesCacheModel.createdDate = createdDate.getTime();
		}
		else {
			gemTemplateValuesCacheModel.createdDate = Long.MIN_VALUE;
		}

		gemTemplateValuesCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = gemTemplateValuesCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			gemTemplateValuesCacheModel.updatedBy = null;
		}

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			gemTemplateValuesCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			gemTemplateValuesCacheModel.updatedDate = Long.MIN_VALUE;
		}

		return gemTemplateValuesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{valueId=");
		sb.append(getValueId());
		sb.append(", columnId=");
		sb.append(getColumnId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", columnValue=");
		sb.append(getColumnValue());
		sb.append(", displayOrderNumber=");
		sb.append(getDisplayOrderNumber());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.ihg.brandstandards.db.model.GEMTemplateValues");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>valueId</column-name><column-value><![CDATA[");
		sb.append(getValueId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columnId</column-name><column-value><![CDATA[");
		sb.append(getColumnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columnValue</column-name><column-value><![CDATA[");
		sb.append(getColumnValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getDisplayOrderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GEMTemplateValues.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GEMTemplateValues.class
		};
	private long _valueId;
	private long _columnId;
	private long _categoryId;
	private String _columnValue;
	private long _displayOrderNumber;
	private String _creatorId;
	private Date _createdDate;
	private String _updatedBy;
	private Date _updatedDate;
	private GEMTemplateValues _escapedModel;
}